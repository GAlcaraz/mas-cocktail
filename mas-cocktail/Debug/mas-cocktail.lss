
<<<<<<< HEAD
AVRASM ver. 2.2.6  C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\main.asm Fri Nov 25 17:09:23 2016

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.0.106\avrasm\inc\m328pdef.inc'
C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\main.asm(230): Including file 'C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\kb_driver.asm'
C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\main.asm(231): Including file 'C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\disp_driver.asm'
C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\main.asm(232): Including file 'C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\delay.asm'
C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\main.asm(233): Including file 'C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\interface.asm'
C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\main.asm(234): Including file 'C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\math.asm'
C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\main.asm(235): Including file 'C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\ultrasound_driver.asm'
C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\main.asm(236): Including file 'C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\caudal_driver.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.0.106\avrasm\inc\m328pdef.inc'
C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\main.asm(230): Including file 'C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\kb_driver.asm'
C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\main.asm(231): Including file 'C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\disp_driver.asm'
C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\main.asm(232): Including file 'C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\delay.asm'
C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\main.asm(233): Including file 'C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\interface.asm'
C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\main.asm(234): Including file 'C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\math.asm'
C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\main.asm(235): Including file 'C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\ultrasound_driver.asm'
C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\main.asm(236): Including file 'C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\caudal_driver.asm'
=======
AVRASM ver. 2.2.6  D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm Sat Nov 26 16:23:26 2016

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.0.106\avrasm\inc\m328pdef.inc'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(225): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\kb_driver.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(226): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\disp_driver.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(227): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\delay.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(228): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(229): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\math.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(230): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\ultrasound_driver.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(231): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\caudal_driver.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.0.106\avrasm\inc\m328pdef.inc'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(225): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\kb_driver.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(226): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\disp_driver.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(227): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\delay.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(228): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(229): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\math.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(230): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\ultrasound_driver.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(231): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\caudal_driver.asm'
>>>>>>> Pruebas-finales
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; mas-cocktail.asm
                                 ;
                                 ; Created: 01-Oct-16 1:40:18 PM
                                 ; Author : galca
                                 ;
                                 ; 
                                 
                                  .equ F_CPU = 18432000
                                  .equ SHIFTDELAY = 160
                                 
                                  .def TEMP = R16
                                  .DEF TEMP2 = R18
                                  .DEF TEMP3 = R6
                                  
                                  .def PRGFLAGS = R21
                                 
                                  ;----------------------------------------------------------
                                  ;----------------------------------------------------------
                                  ;----------------PARÁMETROS DE LAS BEBIDAS-----------------
                                  ;----------------------------------------------------------
                                  ;----------------------------------------------------------
                                 
                                  .EQU FERNET = 1
                                  .EQU WHISKY = 2
                                  .EQU COCA = 3
                                  .EQU PERC = 0
                                  .EQU PERC1 = $1400
                                  .EQU PERC2 = $1401
                                  .EQU DRINK1 = $1402
                                  .EQU DRINK2 = $1403
                                  .EQU CORDO = 1
                                  .EQU MEDIUM = 2
                                  .EQU INFANT = 3
                                 
                                 
                                 .CSEG
000000 c4ff                      		RJMP		BEGIN
                                 
                                 .org 0x0016
000016 940c 0200                 		jmp			T1_B_ISR
                                 
                                 
                                 .ORG	$500
                                 BEGIN:
000500 ef0f                      		LDI	R16, low(RAMEND)
000501 bf0d                      		OUT	SPL, R16
000502 e008                      		LDI	R16, high(RAMEND)
000503 bf0e                      		OUT	SPH, R16
000504 e000                      		ldi temp, 0x00
000505 b904                      		out ddrb,temp
000506 b90a                      		out ddrd,temp
000507 9a38                      		sbi ddrc,0
000508 9a39                      		sbi ddrc,1
000509 9a3a                      		sbi ddrc,2
00050a 94f8                      		cli
<<<<<<< HEAD
00050b d01d                      		RCALL		KBINIT			; inicialización del teclado
00050c d050                      		RCALL		InicI2C			; esta funcion inicializa el display, si o si tiene que ir. no hace falta modificarle nada
00050d d072                      		RCALL		InicDisplay		; lo mismo que la anterior
00050e d2c6                      		RCALL		InitUsart		; inicialización del protocolo USART para el sensor de distancia
                                  /*MAIN:	
                                 		RCALL		DisplayWelcome					; muestra mensaje de bienvendia
                                 		;RCALL		retardo3s						; durante 3 segundos
                                 		RCALL		DisplayClear					; borra el display
                                 		RCALL		DisplayMenu0					; empieza el programa en si
                                 		LDI			TEMP,SHIFTDELAY					; settea el contador de velocidad de shifteo del display
                                 MenuModo:
                                 		RCALL		DisplayClear
                                 		RCALL		DisplayMenu0
                                 		RCALL		CLEARKEY
                                 getk0:
                                 		RCALL		Shift
                                 		RCALL		GETKEY
                                 		CPI			KEY,0x01
                                 		BREQ		MenuTrago
                                 		CPI			KEY,0x02
                                 		BREQ		MenuBebida
                                 		RJMP		getk0
                                 MenuTrago:
                                 		RCALL		DisplayClear
                                 		RCALL		DisplayMenu1a
                                 		RCALL		CLEARKEY
                                 		RCALL		retardo1s
                                 getk1a:
                                 		RCALL		Shift
                                 		RCALL		GETKEY
                                 		CPI			KEY,0x00
                                 		BREQ		getk1a
                                 		CPI			KEY,0x03
                                 		BRSH		getk1a
                                 		BREQ		PureCoke
                                 		STS			DRINK1,KEY
                                 		LDI			TEMP,COCA
                                 		STS			DRINK2,TEMP
                                 PureCoke:
                                 		LDI			TEMP,COCA
                                 		STS			DRINK1,TEMP
                                 		LDI			TEMP,0x00
                                 		STS			DRINK2,TEMP
                                 
                                 MenuPotencia:
                                 		RCALL		DisplayClear
                                 		RCALL		DisplayMenu2a
                                 		RCALL		CLEARKEY
                                 		RCALL		retardo1s
                                 getk2a:		
                                 		RCALL		Shift
                                 		RCALL		GETKEY
                                 		CPI			KEY,0x00
                                 		BREQ		getk2a
                                 		CPI			KEY,0x04
                                 		BRSH		getk2a
                                 		CPI			KEY,0x01
                                 		BREQ		PotCordobes
                                 		CPI			KEY,0x02
                                 		BREQ		PotMediA
                                 		LDI			TEMP,10
                                 		STS			PERC1,TEMP
                                 		LDI			TEMP,90
                                 		STS			PERC2,TEMP
                                 		RJMP		END
                                 PotCordobes:
                                 		LDI			TEMP,50
                                 		STS			PERC1,TEMP
                                 		STS			PERC2,TEMP
                                 		RJMP		END
                                 PotMedia:
                                 		LDI			TEMP,30
                                 		STS			PERC1,TEMP
                                 		LDI			TEMP,70
                                 		STS			PERC2,TEMP
                                 		RJMP		END
                                 MenuBebida:
                                 		RCALL		DisplayClear
                                 		RCALL		DisplayMenu1b
                                 		RCALL		CLEARKEY
                                 		RCALL		retardo1s
                                 getk1b:		
                                 		RCALL		Shift
                                 		RCALL		GETKEY
                                 		CPI			KEY,0x00
                                 		BREQ		getk1b
                                 		CPI			KEY,0x03
                                 		BRSH		getk1b
                                 		STS			DRINK1,KEY
                                 		LDI			TEMP,COCA
                                 		STS			DRINK2,TEMP
                                 MenuPorc:
                                 		RCALL		DisplayClear
                                 		RCALL		DisplayMenu2b
                                 		RCALL		CLEARKEY
                                 		RCALL		retardo1s
                                 getk2b:	
                                 		RCALL		CLEARKEY	
                                 		RCALL		GETKEY
                                 		CPI			KEY,0x00
                                 		BREQ		getk2b
                                 		CPI			KEY,11
                                 		BRNE		KeyNotZero
                                 		LDI			KEY,0x00
                                 KeyNotZero:
                                 		LDI			TEMP,48
                                 		ADD			KEY,TEMP
                                 		MOV			DISPVAR,KEY
                                 		LDI			TEMP,48
                                 		SUB			KEY,TEMP
                                 		RCALL		DisplayChar
                                 		RCALL		retardo1s
                                 		PUSH		KEY
                                 		SBRC		PRGFLAGS,PERC
                                 		RJMP		getPercentage
                                 		ORI			PRGFLAGS,(1<<PERC)
                                 		RJMP		getk2b
                                 
                                 getPercentage:
                                 		ANDI		PRGFLAGS,(0xFE<<PERC)
                                 		POP			TEMP2
                                 		POP			TEMP3
                                 		PUSH		TEMP2
                                 		PUSH		TEMP3
                                 		RCALL		keyb_to_bcd
                                 		RCALL		bcd_to_bin
                                 		POP			TEMP2
                                 		STS			PERC1,TEMP2
                                 		LDI			TEMP,100
                                 		SUB			TEMP,TEMP2
                                 		STS			PERC2,TEMP
=======
00050b d09a                      		RCALL		KBINIT			; inicialización del teclado
00050c d0cd                      		RCALL		InicI2C			; esta funcion inicializa el display, si o si tiene que ir. no hace falta modificarle nada
00050d d0ef                      		RCALL		InicDisplay		; lo mismo que la anterior
00050e d343                      		RCALL		InitUsart		; inicialización del protocolo USART para el sensor de distancia
                                  MAIN:	
00050f d228                      		RCALL		DisplayWelcome					; muestra mensaje de bienvendia
                                 		;RCALL		retardo3s						; durante 3 segundos
000510 d1b2                      		RCALL		DisplayClear					; borra el display
000511 d22e                      		RCALL		DisplayMenu0					; empieza el programa en si
000512 ea00                      		LDI			TEMP,SHIFTDELAY					; settea el contador de velocidad de shifteo del display
                                 MenuModo:
000513 d1af                      		RCALL		DisplayClear
000514 d22b                      		RCALL		DisplayMenu0
000515 d0c2                      		RCALL		CLEARKEY
                                 getk0:
000516 d1d2                      		RCALL		Shift
000517 d095                      		RCALL		GETKEY
000518 3031                      		CPI			KEY,0x01
000519 f019                      		BREQ		MenuTrago
00051a 3032                      		CPI			KEY,0x02
00051b f7d1                      		BRNE		getk0
00051c c041                      		RJMP		MenuBebida
                                 MenuTrago:
00051d d1a5                      		RCALL		DisplayClear
00051e d225                      		RCALL		DisplayMenu1a
00051f d0b8                      		RCALL		CLEARKEY
000520 d212                      		RCALL		retardo1s
                                 getk1a:
000521 d1c7                      		RCALL		Shift
000522 d08a                      		RCALL		GETKEY
000523 3030                      		CPI			KEY,0x00
000524 f3e1                      		BREQ		getk1a
000525 3034                      		CPI			KEY,0x04
000526 f7d0                      		BRSH		getk1a
000527 3033                      		CPI			KEY,0x03
000528 f031                      		BREQ		PureCoke
000529 9330 1402                 		STS			DRINK1,KEY
00052b e003                      		LDI			TEMP,COCA
00052c 9300 1403                 		STS			DRINK2,TEMP
00052e c00c                      		RJMP		MenuPotencia
                                 PureCoke:
00052f e003                      		LDI			TEMP,COCA
000530 9300 1402                 		STS			DRINK1,TEMP
000532 9300 1403                 		STS			DRINK2,TEMP
000534 e603                      		LDI			TEMP,99
000535 9300 1400                 		STS			PERC1,TEMP
000537 e001                      		LDI			TEMP,01
000538 9300 1401                 		STS			PERC2,TEMP
00053a c057                      		RJMP		END
                                 			
                                 MenuPotencia:
00053b d187                      		RCALL		DisplayClear
00053c d20b                      		RCALL		DisplayMenu2a
00053d d09a                      		RCALL		CLEARKEY
00053e d1f4                      		RCALL		retardo1s
                                 getk2a:		
00053f d1a9                      		RCALL		Shift
000540 d06c                      		RCALL		GETKEY
000541 3030                      		CPI			KEY,0x00
000542 f3e1                      		BREQ		getk2a
000543 3034                      		CPI			KEY,0x04
000544 f7d0                      		BRSH		getk2a
000545 3031                      		CPI			KEY,0x01
000546 f049                      		BREQ		PotCordobes
000547 3032                      		CPI			KEY,0x02
000548 f071                      		BREQ		PotMediA
000549 e109                      		LDI			TEMP,25
00054a 9300 1400                 		STS			PERC1,TEMP
00054c e40b                      		LDI			TEMP,75
00054d 9300 1401                 		STS			PERC2,TEMP
00054f c042                      		RJMP		END
                                 PotCordobes:
000550 e40b                      		LDI			TEMP,75
000551 9300 1400                 		STS			PERC1,TEMP
000553 e109                      		LDI			TEMP,25
000554 9300 1401                 		STS			PERC2,TEMP
000556 c03b                      		RJMP		END
                                 PotMedia:
000557 e302                      		LDI			TEMP,50
000558 9300 1400                 		STS			PERC1,TEMP
00055a e302                      		LDI			TEMP,50
00055b 9300 1401                 		STS			PERC2,TEMP
00055d c034                      		RJMP		END
                                 MenuBebida:
00055e d164                      		RCALL		DisplayClear
00055f d1ec                      		RCALL		DisplayMenu1b
000560 d077                      		RCALL		CLEARKEY
000561 d1d1                      		RCALL		retardo1s
                                 getk1b:		
000562 d186                      		RCALL		Shift
000563 d049                      		RCALL		GETKEY
000564 3030                      		CPI			KEY,0x00
000565 f3e1                      		BREQ		getk1b
000566 3033                      		CPI			KEY,0x03
000567 f7d0                      		BRSH		getk1b
000568 9330 1402                 		STS			DRINK1,KEY
00056a e003                      		LDI			TEMP,COCA
00056b 9300 1403                 		STS			DRINK2,TEMP
                                 
                                 MenuPorc:
00056d d155                      		RCALL		DisplayClear
00056e d1e1                      		RCALL		DisplayMenu2b
00056f d068                      		RCALL		CLEARKEY
000570 d1c2                      		RCALL		retardo1s
                                 getk2b:	
000571 d066                      		RCALL		CLEARKEY	
000572 d03a                      		RCALL		GETKEY
000573 3030                      		CPI			KEY,0x00
000574 f3e1                      		BREQ		getk2b
000575 303b                      		CPI			KEY,11
000576 f409                      		BRNE		KeyNotZero
000577 e030                      		LDI			KEY,0x00
                                 KeyNotZero:
000578 e300                      		LDI			TEMP,48
000579 0f30                      		ADD			KEY,TEMP
00057a 2f83                      		MOV			DISPVAR,KEY
00057b e300                      		LDI			TEMP,48
00057c 1b30                      		SUB			KEY,TEMP
00057d d0fe                      		RCALL		DisplayChar
00057e d1b4                      		RCALL		retardo1s
00057f 933f                      		PUSH		KEY
000580 fd50                      		SBRC		PRGFLAGS,PERC
000581 c002                      		RJMP		getPercentage
000582 6051                      		ORI			PRGFLAGS,(1<<PERC)
000583 cfed                      		RJMP		getk2b
                                 
                                 getPercentage:
000584 7f5e                      		ANDI		PRGFLAGS,(0xFE<<PERC)
000585 912f                      		POP			TEMP2
000586 906f                      		POP			TEMP3
000587 932f                      		PUSH		TEMP2
000588 926f                      		PUSH		TEMP3
000589 d26c                      		RCALL		keyb_to_bcd
00058a d278                      		RCALL		bcd_to_bin
00058b 912f                      		POP			TEMP2
00058c 9320 1400                 		STS			PERC1,TEMP2
00058e e604                      		LDI			TEMP,100
00058f 1b02                      		SUB			TEMP,TEMP2
000590 9300 1401                 		STS			PERC2,TEMP
>>>>>>> Pruebas-finales
                                 
                                 		
                                 
                                 		
                                 
                                 
                                 
                                 END:	
<<<<<<< HEAD
                                 		RCALL		DisplayClear
                                 		RCALL		DisplayWait
                                 		RCALL		CreoTrago
                                 		RCALL		DisplayClear
                                 		RCALL		DisplayDone
                                 		rcall		retardo1s
                                 		
                                 		rjmp		MAIN*/
                                 ;---------------------------PRueba----
00050f e500                      		ldi temp, 80
000510 9300 1400                 		sts perc1,temp
000512 e002                      		ldi temp,2
000513 9300 1402                 		sts drink1,temp
000515 e104                      		ldi temp, 20
000516 9300 1401                 		sts perc2,temp
000518 e001                      		ldi temp,1
000519 9300 1403                 		sts drink2,temp
                                 
                                 beh:
00051b 9a40                      		SBI	PORTC,0
00051c d199                      		rcall	retardo1s
00051d 9840                      		cbi portc,0
00051e d197                      		rcall	retardo1s
00051f 9a41                      		SBI	PORTC,1
000520 d195                      		rcall	retardo1s
000521 9841                      		cbi portc,1
000522 d193                      		rcall	retardo1s
000523 9a42                      		SBI	PORTC,2
000524 d191                      		rcall	retardo1s
000525 9842                      		cbi portc,2
000526 940e 07fd                 		call CreoTrago
                                 	loopfinal:
000528 cfff                      		rjmp loopfinal
=======
                                 		
                                 		
000592 d130                      		RCALL		DisplayClear
000593 d1c0                      		RCALL		DisplayWait
000594 d2e5                      		RCALL		CreoTrago
000595 d19d                      		rcall		retardo1s
000596 d12c                      		RCALL		DisplayClear
000597 d1c0                      		RCALL		DisplayDone
000598 d195                      		rcall		retardo3s
                                 		
000599 cf75                      		rjmp		MAIN
                                 ;---------------------------PRueba----
00059a e500                      		ldi temp, 80
00059b 9300 1400                 		sts perc1,temp
00059d e002                      		ldi temp,2
00059e 9300 1402                 		sts drink1,temp
0005a0 e104                      		ldi temp, 20
0005a1 9300 1401                 		sts perc2,temp
0005a3 e001                      		ldi temp,1
0005a4 9300 1403                 		sts drink2,temp
>>>>>>> Pruebas-finales
                                 
                                  .include "kb_driver.asm"
                                 
                                  * kb_driver.asm
                                  *
                                  *  Created: 25-Oct-16 10:23:47 PM
                                  *   Author: galca
                                  */ 
                                 
                                 .EQU COL1 = PINB0
                                 .EQU COL2 = PINB1
                                 .EQU COL3 = PINB2
                                 
                                 .EQU ROW1 = PINB3
                                 .EQU ROW2 = PINC3
                                 .EQU ROW3 = PINB5
                                 .EQU ROW4 = PINB4
                                 
                                 .EQU ROW1VAL = 1
                                 .EQU ROW2VAL = 4
                                 .EQU ROW3VAL = 7
                                 .EQU ROW4VAL = 10
                                 
                                 .EQU KBPORT = PORTB
                                 .EQU PRESSED = 7
                                 .EQU KBCONF = 0xF8
                                 .EQU KBPULLUPS = 0x07
                                  
                                 
                                 .DEF KBTEMP = R17
                                 .DEF KEY = R19
                                  
                                 .CSEG
                                 
                                 KBINIT:
<<<<<<< HEAD
000529 931f                      		PUSH		KBTEMP
00052a ef18                       		LDI			KBTEMP,KBCONF		;cols como input, filas como output
00052b b914                      		OUT			DDRB,KBTEMP
                                 
00052c e017                      		LDI			KBTEMP,KBPULLUPS		;habilitar pullups en el input
00052d b915                      		OUT			KBPORT,KBTEMP
00052e 911f                      		POP			KBTEMP	
00052f 9508                      		RET
                                 
                                  GETKEY:
                                 												;Esta sección lee la fila 1
000530 e031                      		LDI			KEY,ROW1VAL					;carga el valor de la primera tecla de la fila 1 en "key"
000531 ef17                      		LDI			KBTEMP,~(1<<ROW1)			;"apaga" fila 1 (carga un byte de unos con un único cero en la posición "ROW1")
000532 b915                      		OUT			KBPORT,KBTEMP				;y cargando el valor al puerto usado por el teclado
000533 d00d                      		RCALL		READ_COL					;se pasa a leer las columnas, esperando encontrar coincidencias
                                 		
                                  
000534 fd57                      		SBRC		PRGFLAGS,PRESSED				;si se registró una tecla presionada
000535 c00a                      		RJMP		DONE						;salir de la subrutina
=======
0005a6 931f                      		PUSH		KBTEMP
0005a7 ef18                       		LDI			KBTEMP,KBCONF		;cols como input, filas como output
0005a8 b914                      		OUT			DDRB,KBTEMP
                                 
0005a9 e017                      		LDI			KBTEMP,KBPULLUPS		;habilitar pullups en el input
0005aa b915                      		OUT			KBPORT,KBTEMP
0005ab 911f                      		POP			KBTEMP	
0005ac 9508                      		RET
                                 
                                  GETKEY:
                                 												;Esta sección lee la fila 1
0005ad e031                      		LDI			KEY,ROW1VAL					;carga el valor de la primera tecla de la fila 1 en "key"
0005ae ef17                      		LDI			KBTEMP,~(1<<ROW1)			;"apaga" fila 1 (carga un byte de unos con un único cero en la posición "ROW1")
0005af b915                      		OUT			KBPORT,KBTEMP				;y cargando el valor al puerto usado por el teclado
0005b0 d00d                      		RCALL		READ_COL					;se pasa a leer las columnas, esperando encontrar coincidencias
                                 		
                                  
0005b1 fd57                      		SBRC		PRGFLAGS,PRESSED				;si se registró una tecla presionada
0005b2 c00a                      		RJMP		DONE						;salir de la subrutina
>>>>>>> Pruebas-finales
                                  
                                 												;Esta sección lee la fila 2
                                 /*		LDI			KEY,ROW2VAL					;carga el valor de la primera tecla de la fila 2 en "key"
                                 		IN			KBTEMP,PORTC
                                 		ANDI		KBTEMP,(1<<PINC3)			;"apaga" fila 2 (carga un byte de unos con un único cero en la posición "ROW2")
                                 		OUT			PORTC,KBTEMP				;y cargando el valor al puerto usado por el teclado
                                 		RCALL		READ_COL					;se pasa a leer las columnas, esperando encontrar coincidencias
                                  
                                 		SBRC		PRGFLAGS,PRESSED				;si se registró una tecla presionada
                                 		RJMP		DONE						;salir de la subrutina*/
                                 												
                                 												;Esta sección lee la fila 3
<<<<<<< HEAD
000536 e037                      		LDI			KEY,ROW3VAL					;carga el valor de la primera tecla de la fila 3 en "key"
000537 ed1f                      		LDI			KBTEMP,~(1<<ROW3)			;"apaga" fila 3 (carga un byte de unos con un único cero en la posición "ROW3")
000538 b915                      		OUT			KBPORT,KBTEMP				;y cargando el valor al puerto usado por el teclado
000539 d007                      		RCALL		READ_COL					;se pasa a leer las columnas, esperando encontrar coincidencias
                                 
00053a fd57                      		SBRC		PRGFLAGS,PRESSED				;si se registró una tecla presionada
00053b c004                      		RJMP		DONE						;salir de la subrutina
                                  
                                 												;Esta sección lee la fila 4
00053c e03a                      		LDI			KEY,ROW4VAL					;carga el valor de la primera tecla de la fila 4 en "key"
00053d ee1f                      		LDI			KBTEMP,~(1<<ROW4)			;"apaga" fila 4 (carga un byte de unos con un único cero en la posición "ROW4")
00053e b915                      		OUT			KBPORT,KBTEMP				;y cargando el valor al puerto usado por el teclado
00053f d001                      		RCALL		READ_COL					;se pasa a leer las columnas, esperando encontrar coincidencias*/
                                  
                                 DONE:					
000540 9508                      		RET
                                  
                                 READ_COL:
000541 d015                      		RCALL		SETTLE
000542 775f                      		CBR			PRGFLAGS, (1<<PRESSED)		;estado = no presionado
                                  
000543 9918                      		SBIC		PINB, COL1					;lee columna 1
000544 c002                      		RJMP		NEXTCOL						;si no, pasar a columna 2
000545 6850                      		SBR			PRGFLAGS, (1<<PRESSED)		;estado = presionado
000546 9508                      		RET										;devolver el valor de la primer columna de la fila
                                 NEXTCOL:
000547 d00f                      		RCALL		SETTLE
000548 9919                      		SBIC		PINB,COL2					;lee columna 2
000549 c003                      		RJMP		NEXTCOL1					;si no, pasar a columna 3
00054a 9533                      		INC			KEY							
00054b 6850                      		SBR			PRGFLAGS,(1<<PRESSED)		;estado = presionado
00054c 9508                      		RET										;devolver el valor de la segunda columna de la fila
                                 NEXTCOL1:
00054d d009                      		RCALL		SETTLE
00054e 991a                      		SBIC		PINB,COL3					;lee columna 3
00054f c004                      		RJMP		EXIT						;si no, termina
000550 9533                      		INC			KEY							;estado = presionado
000551 9533                      		INC			KEY
000552 6850                      		SBR			PRGFLAGS, (1<<PRESSED)		;estado=presionado
000553 9508                      		RET										;devolver el valor de la tercer columna de la fila
                                 EXIT:
000554 2733                      		CLR			KEY							;vacía el valor de la tecla
000555 775f                      		CBR			PRGFLAGS, (1<<PRESSED)		;no se presionó ninguna tecla
000556 9508                      		RET										
                                 SETTLE:
000557 ef1f                      		LDI			KBTEMP,255
000558 951a                      TAGAIN: DEC			KBTEMP
000559 f7f1                      		BRNE		TAGAIN
00055a 9508                      		RET 
                                 
                                 CLEARKEY:
00055b e030                      		LDI			KEY,0X00
                                  .include "disp_driver.asm"
00055c 9508                      
=======
0005b3 e037                      		LDI			KEY,ROW3VAL					;carga el valor de la primera tecla de la fila 3 en "key"
0005b4 ed1f                      		LDI			KBTEMP,~(1<<ROW3)			;"apaga" fila 3 (carga un byte de unos con un único cero en la posición "ROW3")
0005b5 b915                      		OUT			KBPORT,KBTEMP				;y cargando el valor al puerto usado por el teclado
0005b6 d007                      		RCALL		READ_COL					;se pasa a leer las columnas, esperando encontrar coincidencias
                                 
0005b7 fd57                      		SBRC		PRGFLAGS,PRESSED				;si se registró una tecla presionada
0005b8 c004                      		RJMP		DONE						;salir de la subrutina
                                  
                                 												;Esta sección lee la fila 4
0005b9 e03a                      		LDI			KEY,ROW4VAL					;carga el valor de la primera tecla de la fila 4 en "key"
0005ba ee1f                      		LDI			KBTEMP,~(1<<ROW4)			;"apaga" fila 4 (carga un byte de unos con un único cero en la posición "ROW4")
0005bb b915                      		OUT			KBPORT,KBTEMP				;y cargando el valor al puerto usado por el teclado
0005bc d001                      		RCALL		READ_COL					;se pasa a leer las columnas, esperando encontrar coincidencias*/
                                  
                                 DONE:					
0005bd 9508                      		RET
                                  
                                 READ_COL:
0005be d015                      		RCALL		SETTLE
0005bf 775f                      		CBR			PRGFLAGS, (1<<PRESSED)		;estado = no presionado
                                  
0005c0 9918                      		SBIC		PINB, COL1					;lee columna 1
0005c1 c002                      		RJMP		NEXTCOL						;si no, pasar a columna 2
0005c2 6850                      		SBR			PRGFLAGS, (1<<PRESSED)		;estado = presionado
0005c3 9508                      		RET										;devolver el valor de la primer columna de la fila
                                 NEXTCOL:
0005c4 d00f                      		RCALL		SETTLE
0005c5 9919                      		SBIC		PINB,COL2					;lee columna 2
0005c6 c003                      		RJMP		NEXTCOL1					;si no, pasar a columna 3
0005c7 9533                      		INC			KEY							
0005c8 6850                      		SBR			PRGFLAGS,(1<<PRESSED)		;estado = presionado
0005c9 9508                      		RET										;devolver el valor de la segunda columna de la fila
                                 NEXTCOL1:
0005ca d009                      		RCALL		SETTLE
0005cb 991a                      		SBIC		PINB,COL3					;lee columna 3
0005cc c004                      		RJMP		EXIT						;si no, termina
0005cd 9533                      		INC			KEY							;estado = presionado
0005ce 9533                      		INC			KEY
0005cf 6850                      		SBR			PRGFLAGS, (1<<PRESSED)		;estado=presionado
0005d0 9508                      		RET										;devolver el valor de la tercer columna de la fila
                                 EXIT:
0005d1 2733                      		CLR			KEY							;vacía el valor de la tecla
0005d2 775f                      		CBR			PRGFLAGS, (1<<PRESSED)		;no se presionó ninguna tecla
0005d3 9508                      		RET										
                                 SETTLE:
0005d4 ef1f                      		LDI			KBTEMP,255
0005d5 951a                      TAGAIN: DEC			KBTEMP
0005d6 f7f1                      		BRNE		TAGAIN
0005d7 9508                      		RET 
                                 
                                 CLEARKEY:
0005d8 e030                      		LDI			KEY,0X00
                                  .include "disp_driver.asm"
0005d9 9508                      
>>>>>>> Pruebas-finales
                                  * disp_driver.asm
                                  *
                                  *  Created: 01-Nov-16 5:01:30 PM
                                  *   Author: galca
                                  */ 
                                  ;
                                 ; display.asm
                                 ;
                                 ; Created: 23/9/2016 2:16:36 p. m.
                                 ; Author : waral
                                 ;
                                 
                                 	.def CONTADOR = R20
                                 	.def DISPVAR = R24
                                 
                                 	.equ TWI_RATE = 0xF8
                                 	.equ STARTi = 0x08
                                 	.equ MT_SLA_ACK = 0x20
                                 	.equ MT_DATA_ACK= 0x28
                                 	.equ SL_ADD = 0b01001110
                                 
                                 
                                 ;para usar el i2c no hay que inicializar nada de los puertos... 
                                 ;lo que yo puse fue para encender un led que me diga que esta todo ok
                                 
                                 
                                 ;---------------------------------------------------------------------
                                 ;---------------------------------------------------------------------
                                 ;-----------------------------Fin start-------------------------------
                                 ;---------------------------------------------------------------------
                                 ;---------------------------------------------------------------------
                                 
                                 
                                 
                                 ;----------------------------SUBRUTINAS-------------------------------
                                 
                                 ;_____________________________________________________
                                 ;;;;;;;;;;;;;;;;;DISPLAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;|
                                 ;_____________________________________________________|
                                 
                                 ;------- inicializacion i2c-------
                                 InicI2C:	
                                 	
<<<<<<< HEAD
00055d ef08                      	ldi TEMP, TWI_RATE
00055e 9300 00b8                 	sts TWBR,TEMP
                                 
000560 ea04                      	ldi TEMP, (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)   
000561 9300 00bc                 	sts TWCR, TEMP								;envia condicion de start
                                 
                                 wait1:
000563 9100 00bc                 	lds TEMP,TWCR
000565 ff07                      	sbrs TEMP,TWINT								;espera flag de start ok
000566 cffc                      	rjmp wait1
                                 
000567 9100 00b9                 	lds TEMP,TWSR
000569 7f08                      	andi TEMP, 0xF8								;si el estado en el registro TWI es distinto de START se va a error
00056a 3008                      	cpi TEMP, STARTi
00056b f409                      	brne error_A
00056c c001                      	rjmp continuo
                                 error_A:
00056d d0d4                      	RCALL ERROR1
                                 	
                                 continuo:
00056e e40e                      	ldi TEMP, SL_ADD								
00056f 9300 00bb                 	sts TWDR, TEMP								;Carga direccion del esclavo en el registro TWDR, limpia bit TWINT para empezar la transmision de la direccion
000571 e804                      	ldi TEMP, (1<<TWINT) | (1<<TWEN)
000572 9300 00bc                 	sts TWCR, TEMP								;envio direccion del esclavo
                                 
                                 wait2:
000574 9100 00bc                 	lds TEMP,TWCR
000576 ff07                      	sbrs TEMP,TWINT								;espera seteo de TWINT para confirmar transmision ok
000577 cffc                      	rjmp wait2
                                 
000578 9100 00b9                 	lds TEMP,TWSR
00057a 7f08                      	andi TEMP, 0xF8								;chequea el registro TWI, salta a error si no se transmitio bien
00057b 3200                      	cpi TEMP, MT_SLA_ACK
00057c f009                      	breq error_B
00057d c001                      	rjmp continuo2
                                 error_B:
00057e d0c3                      	RCALL ERROR1
                                 continuo2:
00057f 9508                      	ret
=======
0005da ef08                      	ldi TEMP, TWI_RATE
0005db 9300 00b8                 	sts TWBR,TEMP
                                 
0005dd ea04                      	ldi TEMP, (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)   
0005de 9300 00bc                 	sts TWCR, TEMP								;envia condicion de start
                                 
                                 wait1:
0005e0 9100 00bc                 	lds TEMP,TWCR
0005e2 ff07                      	sbrs TEMP,TWINT								;espera flag de start ok
0005e3 cffc                      	rjmp wait1
                                 
0005e4 9100 00b9                 	lds TEMP,TWSR
0005e6 7f08                      	andi TEMP, 0xF8								;si el estado en el registro TWI es distinto de START se va a error
0005e7 3008                      	cpi TEMP, STARTi
0005e8 f409                      	brne error_A
0005e9 c001                      	rjmp continuo
                                 error_A:
0005ea d0d4                      	RCALL ERROR1
                                 	
                                 continuo:
0005eb e40e                      	ldi TEMP, SL_ADD								
0005ec 9300 00bb                 	sts TWDR, TEMP								;Carga direccion del esclavo en el registro TWDR, limpia bit TWINT para empezar la transmision de la direccion
0005ee e804                      	ldi TEMP, (1<<TWINT) | (1<<TWEN)
0005ef 9300 00bc                 	sts TWCR, TEMP								;envio direccion del esclavo
                                 
                                 wait2:
0005f1 9100 00bc                 	lds TEMP,TWCR
0005f3 ff07                      	sbrs TEMP,TWINT								;espera seteo de TWINT para confirmar transmision ok
0005f4 cffc                      	rjmp wait2
                                 
0005f5 9100 00b9                 	lds TEMP,TWSR
0005f7 7f08                      	andi TEMP, 0xF8								;chequea el registro TWI, salta a error si no se transmitio bien
0005f8 3200                      	cpi TEMP, MT_SLA_ACK
0005f9 f009                      	breq error_B
0005fa c001                      	rjmp continuo2
                                 error_B:
0005fb d0c3                      	RCALL ERROR1
                                 continuo2:
0005fc 9508                      	ret
>>>>>>> Pruebas-finales
                                 	
                                 ;----------------------------------Fin inicializacion i2c----------------------------------------;
                                 
                                 ;.................................incialización display, envio de a 4bits........................;
                                 InicDisplay:	
                                 	
<<<<<<< HEAD
000580 d11d                      	RCALL retardo50ms
                                 	
000581 e300                      	ldi TEMP, 0x30
000582 e310                      	ldi r17,0x30
000583 9300 00bb                 	sts TWDR, TEMP								; Carga DATA en twdr, limpia twint para empezar la transmision
000585 e804                      	ldi TEMP, (1<<TWINT) |(1<<TWEN)
000586 9300 00bc                 	sts TWCR, TEMP								
000588 d06c                      	RCALL WaitDataI2c
                                 
000589 d0a7                      	RCALL DisplayEnable
                                 
00058a d121                      	RCALL retardo5ms
                                 
00058b d0a5                      	RCALL DisplayEnable
                                 
00058c d10a                      	RCALL retardo1ms
                                 												; todo esto te lo pide que hagas la hoja de datos del display
00058d d0a3                      	RCALL DisplayEnable
                                 
00058e d11d                      	RCALL retardo5ms
                                 
00058f e208                      	ldi r16, 0x28								;set 4bit mode
000590 e218                      	ldi r17,0x28
000591 9300 00bb                 	sts TWDR, r16								
000593 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
000594 9300 00bc                 	sts TWCR, r16								
000596 d05e                      	RCALL WaitDataI2c
                                 	
000597 d099                      	RCALL DisplayEnable
                                 
000598 d0fe                      	RCALL retardo1ms
                                 
000599 e208                      	ldi TEMP,0x28								;0x28_H
00059a e218                      	ldi r17,0x28
00059b 9300 00bb                 	sts TWDR, TEMP								
00059d e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
00059e 9300 00bc                 	sts TWCR, TEMP								
0005a0 d054                      	RCALL WaitDataI2c
                                 
0005a1 d08f                      	RCALL DisplayEnable
                                 
0005a2 e808                      	ldi TEMP,0x88								;0x28_L
0005a3 e818                      	ldi r17,0x88
0005a4 9300 00bb                 	sts TWDR, r16								
0005a6 e804                      	ldi TEMP, (1<<TWINT) |(1<<TWEN)
0005a7 9300 00bc                 	sts TWCR, TEMP								
0005a9 d04b                      	RCALL WaitDataI2c
                                 
0005aa d086                      	RCALL DisplayEnable
                                 
0005ab e008                      	ldi TEMP, 0x08								;0x08_H
0005ac e018                      	ldi r17,0x08
0005ad 9300 00bb                 	sts TWDR, TEMP								
0005af e804                      	ldi TEMP, (1<<TWINT) |(1<<TWEN)
0005b0 9300 00bc                 	sts TWCR, TEMP								
0005b2 d042                      	RCALL WaitDataI2c
                                 
0005b3 d07d                      	RCALL DisplayEnable							
                                 
0005b4 e808                      	ldi TEMP,0x88								;0x08_L				
0005b5 e818                      	ldi r17,0x88
                                 	
0005b6 9300 00bb                 	sts TWDR, TEMP								
0005b8 e804                      	ldi TEMP, (1<<TWINT) |(1<<TWEN)
0005b9 9300 00bc                 	sts TWCR, TEMP								
0005bb d039                      	RCALL WaitDataI2c
                                 
0005bc d074                      	RCALL DisplayEnable
                                 
0005bd e008                      	ldi r16,0x08								;0x01_H	
0005be e018                      	ldi r17,0x08
0005bf 9300 00bb                 	sts TWDR, r16								
0005c1 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
0005c2 9300 00bc                 	sts TWCR, r16								
0005c4 d030                      	RCALL WaitDataI2c
                                 
0005c5 d06b                      	RCALL DisplayEnable
                                 
0005c6 e108                      	ldi r16,0x18								;0x01_L	
0005c7 e118                      	ldi r17,0x18
                                 		
0005c8 9300 00bb                 	sts TWDR, r16								
0005ca e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
0005cb 9300 00bc                 	sts TWCR, r16								
0005cd d027                      	RCALL WaitDataI2c
                                 
0005ce d062                      	RCALL DisplayEnable
                                 
0005cf e008                      	ldi r16,0x08								;0x0F_H		
0005d0 e018                      	ldi r17,0x08
                                 
0005d1 9300 00bb                 	sts TWDR, r16								
0005d3 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
0005d4 9300 00bc                 	sts TWCR, r16								
0005d6 d01e                      	RCALL WaitDataI2c
                                 
0005d7 d059                      	RCALL DisplayEnable
                                 	
0005d8 ef08                      	ldi r16,0xF8								;0x0F_L	
0005d9 ef18                      	ldi r17,0xF8
0005da 9300 00bb                 	sts TWDR, r16								
0005dc e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
0005dd 9300 00bc                 	sts TWCR, r16								
0005df d015                      	RCALL WaitDataI2c
                                 
0005e0 d050                      	RCALL DisplayEnable
                                 
0005e1 e008                      	ldi r16,0x08							;0x06_H
0005e2 e018                      	ldi r17,0x08
0005e3 9300 00bb                 	sts TWDR, r16								
0005e5 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
0005e6 9300 00bc                 	sts TWCR, r16
0005e8 d00c                      	RCALL WaitDataI2c
                                 
0005e9 d047                      	RCALL DisplayEnable
                                 
0005ea d0c1                      	RCALL retardo5ms
                                 	
0005eb e608                      	ldi r16, 0x68							;0x06_L
0005ec e618                      	ldi r17, 0x68
0005ed 9300 00bb                 	sts TWDR, r16								
0005ef e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
0005f0 9300 00bc                 	sts TWCR, r16
0005f2 d002                      	RCALL WaitDataI2c
                                 
0005f3 d03d                      	RCALL DisplayEnable
                                 
0005f4 9508                      	ret
=======
0005fd d11d                      	RCALL retardo50ms
                                 	
0005fe e300                      	ldi TEMP, 0x30
0005ff e310                      	ldi r17,0x30
000600 9300 00bb                 	sts TWDR, TEMP								; Carga DATA en twdr, limpia twint para empezar la transmision
000602 e804                      	ldi TEMP, (1<<TWINT) |(1<<TWEN)
000603 9300 00bc                 	sts TWCR, TEMP								
000605 d06c                      	RCALL WaitDataI2c
                                 
000606 d0a7                      	RCALL DisplayEnable
                                 
000607 d121                      	RCALL retardo5ms
                                 
000608 d0a5                      	RCALL DisplayEnable
                                 
000609 d10a                      	RCALL retardo1ms
                                 												; todo esto te lo pide que hagas la hoja de datos del display
00060a d0a3                      	RCALL DisplayEnable
                                 
00060b d11d                      	RCALL retardo5ms
                                 
00060c e208                      	ldi r16, 0x28								;set 4bit mode
00060d e218                      	ldi r17,0x28
00060e 9300 00bb                 	sts TWDR, r16								
000610 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
000611 9300 00bc                 	sts TWCR, r16								
000613 d05e                      	RCALL WaitDataI2c
                                 	
000614 d099                      	RCALL DisplayEnable
                                 
000615 d0fe                      	RCALL retardo1ms
                                 
000616 e208                      	ldi TEMP,0x28								;0x28_H
000617 e218                      	ldi r17,0x28
000618 9300 00bb                 	sts TWDR, TEMP								
00061a e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
00061b 9300 00bc                 	sts TWCR, TEMP								
00061d d054                      	RCALL WaitDataI2c
                                 
00061e d08f                      	RCALL DisplayEnable
                                 
00061f e808                      	ldi TEMP,0x88								;0x28_L
000620 e818                      	ldi r17,0x88
000621 9300 00bb                 	sts TWDR, r16								
000623 e804                      	ldi TEMP, (1<<TWINT) |(1<<TWEN)
000624 9300 00bc                 	sts TWCR, TEMP								
000626 d04b                      	RCALL WaitDataI2c
                                 
000627 d086                      	RCALL DisplayEnable
                                 
000628 e008                      	ldi TEMP, 0x08								;0x08_H
000629 e018                      	ldi r17,0x08
00062a 9300 00bb                 	sts TWDR, TEMP								
00062c e804                      	ldi TEMP, (1<<TWINT) |(1<<TWEN)
00062d 9300 00bc                 	sts TWCR, TEMP								
00062f d042                      	RCALL WaitDataI2c
                                 
000630 d07d                      	RCALL DisplayEnable							
                                 
000631 e808                      	ldi TEMP,0x88								;0x08_L				
000632 e818                      	ldi r17,0x88
                                 	
000633 9300 00bb                 	sts TWDR, TEMP								
000635 e804                      	ldi TEMP, (1<<TWINT) |(1<<TWEN)
000636 9300 00bc                 	sts TWCR, TEMP								
000638 d039                      	RCALL WaitDataI2c
                                 
000639 d074                      	RCALL DisplayEnable
                                 
00063a e008                      	ldi r16,0x08								;0x01_H	
00063b e018                      	ldi r17,0x08
00063c 9300 00bb                 	sts TWDR, r16								
00063e e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
00063f 9300 00bc                 	sts TWCR, r16								
000641 d030                      	RCALL WaitDataI2c
                                 
000642 d06b                      	RCALL DisplayEnable
                                 
000643 e108                      	ldi r16,0x18								;0x01_L	
000644 e118                      	ldi r17,0x18
                                 		
000645 9300 00bb                 	sts TWDR, r16								
000647 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
000648 9300 00bc                 	sts TWCR, r16								
00064a d027                      	RCALL WaitDataI2c
                                 
00064b d062                      	RCALL DisplayEnable
                                 
00064c e008                      	ldi r16,0x08								;0x0F_H		
00064d e018                      	ldi r17,0x08
                                 
00064e 9300 00bb                 	sts TWDR, r16								
000650 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
000651 9300 00bc                 	sts TWCR, r16								
000653 d01e                      	RCALL WaitDataI2c
                                 
000654 d059                      	RCALL DisplayEnable
                                 	
000655 ef08                      	ldi r16,0xF8								;0x0F_L	
000656 ef18                      	ldi r17,0xF8
000657 9300 00bb                 	sts TWDR, r16								
000659 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
00065a 9300 00bc                 	sts TWCR, r16								
00065c d015                      	RCALL WaitDataI2c
                                 
00065d d050                      	RCALL DisplayEnable
                                 
00065e e008                      	ldi r16,0x08							;0x06_H
00065f e018                      	ldi r17,0x08
000660 9300 00bb                 	sts TWDR, r16								
000662 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
000663 9300 00bc                 	sts TWCR, r16
000665 d00c                      	RCALL WaitDataI2c
                                 
000666 d047                      	RCALL DisplayEnable
                                 
000667 d0c1                      	RCALL retardo5ms
                                 	
000668 e608                      	ldi r16, 0x68							;0x06_L
000669 e618                      	ldi r17, 0x68
00066a 9300 00bb                 	sts TWDR, r16								
00066c e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
00066d 9300 00bc                 	sts TWCR, r16
00066f d002                      	RCALL WaitDataI2c
                                 
000670 d03d                      	RCALL DisplayEnable
                                 
000671 9508                      	ret
>>>>>>> Pruebas-finales
                                 
                                 ;-----------Fin Inicialización display--------------
                                 
                                 ;--DISPLAY : DATA I2C OK---;
                                 
                                 WaitDataI2c:
                                 
                                 wait_twint:
<<<<<<< HEAD
0005f5 9100 00bc                 	lds r16,TWCR
0005f7 ff07                      	sbrs r16,TWINT								; Espera TWINT para confirmar que se envió ok
0005f8 cffc                      	rjmp wait_twint
                                 
0005f9 9100 00b9                 	lds r16,TWSR
0005fb 7f08                      	andi r16, 0xF8
0005fc 3208                      	cpi r16, MT_DATA_ACK
0005fd f591                      	brne error_data
0005fe 9508                      	ret
=======
000672 9100 00bc                 	lds r16,TWCR
000674 ff07                      	sbrs r16,TWINT								; Espera TWINT para confirmar que se envió ok
000675 cffc                      	rjmp wait_twint
                                 
000676 9100 00b9                 	lds r16,TWSR
000678 7f08                      	andi r16, 0xF8
000679 3208                      	cpi r16, MT_DATA_ACK
00067a f591                      	brne error_data
00067b 9508                      	ret
>>>>>>> Pruebas-finales
                                 
                                 ;------DISPLAY : CHAR------;                  Con esta Funcion le enviamos un CHAR al display
                                 DisplayChar:
                                 
<<<<<<< HEAD
0005ff 2f08                      	mov r16,DISPVAR							  ;En DISPVAR tiene que estar el CHAR
000600 7f00                      	andi r16,0xF0							  ;Envio DISPVAR_H
000601 6009                      	ori r16,0x09
000602 2f10                      	mov r17,r16
000603 9300 00bb                 	sts TWDR, r16								; Carga DATA en twdr, limpia twint para empezar la transmision
000605 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
000606 9300 00bc                 	sts TWCR, r16
                                 
000608 dfec                      	RCALL WaitDataI2c
000609 d027                      	RCALL DisplayEnable
                                 
00060a 2f08                      	mov r16,DISPVAR							  ;Envio DISPVAR_L
00060b 0f00                      	lsl r16
00060c 0f00                      	lsl r16
00060d 0f00                      	lsl r16
00060e 0f00                      	lsl r16
00060f 6009                      	ori r16,0x09
000610 2f10                      	mov r17,r16
000611 9300 00bb                 	sts TWDR, r16								
000613 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
000614 9300 00bc                 	sts TWCR, r16
000616 dfde                      	RCALL WaitDataI2c
                                 
000617 d019                      	RCALL DisplayEnable
                                 
000618 9508                      	ret
=======
00067c 2f08                      	mov r16,DISPVAR							  ;En DISPVAR tiene que estar el CHAR
00067d 7f00                      	andi r16,0xF0							  ;Envio DISPVAR_H
00067e 6009                      	ori r16,0x09
00067f 2f10                      	mov r17,r16
000680 9300 00bb                 	sts TWDR, r16								; Carga DATA en twdr, limpia twint para empezar la transmision
000682 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
000683 9300 00bc                 	sts TWCR, r16
                                 
000685 dfec                      	RCALL WaitDataI2c
000686 d027                      	RCALL DisplayEnable
                                 
000687 2f08                      	mov r16,DISPVAR							  ;Envio DISPVAR_L
000688 0f00                      	lsl r16
000689 0f00                      	lsl r16
00068a 0f00                      	lsl r16
00068b 0f00                      	lsl r16
00068c 6009                      	ori r16,0x09
00068d 2f10                      	mov r17,r16
00068e 9300 00bb                 	sts TWDR, r16								
000690 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
000691 9300 00bc                 	sts TWCR, r16
000693 dfde                      	RCALL WaitDataI2c
                                 
000694 d019                      	RCALL DisplayEnable
                                 
000695 9508                      	ret
>>>>>>> Pruebas-finales
                                 
                                 ;------Display :ENTER----------
                                 
                                 DisplayEnter:
                                 
<<<<<<< HEAD
000619 ec08                      	ldi r16,0xC8								;0x08_H
00061a ec18                      	ldi r17,0xC8
00061b 9300 00bb                 	sts TWDR, r16								
00061d e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
00061e 9300 00bc                 	sts TWCR, r16								
000620 dfd4                      	RCALL WaitDataI2c
                                 
000621 d00f                      	RCALL DisplayEnable							
                                 
000622 e008                      	ldi r16,0x08								;0x08_L				
000623 e018                      	ldi r17,0x08
                                 	
000624 9300 00bb                 	sts TWDR, r16								
000626 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
000627 9300 00bc                 	sts TWCR, r16								
000629 dfcb                      	RCALL WaitDataI2c
                                 
00062a d006                      	RCALL DisplayEnable
00062b 9508                      ret
=======
000696 ec08                      	ldi r16,0xC8								;0x08_H
000697 ec18                      	ldi r17,0xC8
000698 9300 00bb                 	sts TWDR, r16								
00069a e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
00069b 9300 00bc                 	sts TWCR, r16								
00069d dfd4                      	RCALL WaitDataI2c
                                 
00069e d00f                      	RCALL DisplayEnable							
                                 
00069f e008                      	ldi r16,0x08								;0x08_L				
0006a0 e018                      	ldi r17,0x08
                                 	
0006a1 9300 00bb                 	sts TWDR, r16								
0006a3 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
0006a4 9300 00bc                 	sts TWCR, r16								
0006a6 dfcb                      	RCALL WaitDataI2c
                                 
0006a7 d006                      	RCALL DisplayEnable
0006a8 9508                      ret
>>>>>>> Pruebas-finales
                                 
                                 
                                 
                                 ;----DISPLAY : STOP------
                                 
                                 I2CStop:
<<<<<<< HEAD
00062c e904                      	ldi r16, (1<<TWINT)|(1<<TWEN)| (1<<TWSTO)	;Transmite bit de STOP
00062d 9300 00bc                 	sts TWCR, r16
00062f 9508                      			ret
                                 
                                 error_data:
000630 d011                      	RCALL ERROR1
                                 
                                 
                                 DisplayEnable:
000631 d065                      	RCALL retardo1ms
                                 	
000632 6014                      	ori r17, 0x04
000633 9310 00bb                 	sts TWDR, r17								
000635 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
000636 9300 00bc                 	sts TWCR, r16
000638 dfbc                      	RCALL WaitDataI2c
                                 ;	RCALL retardo1ms
                                 
000639 7f1b                      	andi r17, 0b11111011
00063a 9310 00bb                 	sts TWDR, r17								
00063c e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
00063d 9300 00bc                 	sts TWCR, r16
00063f dfb5                      	RCALL WaitDataI2c
                                 
                                 	;RCALL retardo1ms
000640 9508                      	ret
=======
0006a9 e904                      	ldi r16, (1<<TWINT)|(1<<TWEN)| (1<<TWSTO)	;Transmite bit de STOP
0006aa 9300 00bc                 	sts TWCR, r16
0006ac 9508                      			ret
                                 
                                 error_data:
0006ad d011                      	RCALL ERROR1
                                 
                                 
                                 DisplayEnable:
0006ae d065                      	RCALL retardo1ms
                                 	
0006af 6014                      	ori r17, 0x04
0006b0 9310 00bb                 	sts TWDR, r17								
0006b2 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
0006b3 9300 00bc                 	sts TWCR, r16
0006b5 dfbc                      	RCALL WaitDataI2c
                                 ;	RCALL retardo1ms
                                 
0006b6 7f1b                      	andi r17, 0b11111011
0006b7 9310 00bb                 	sts TWDR, r17								
0006b9 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
0006ba 9300 00bc                 	sts TWCR, r16
0006bc dfb5                      	RCALL WaitDataI2c
                                 
                                 	;RCALL retardo1ms
0006bd 9508                      	ret
>>>>>>> Pruebas-finales
                                 
                                 
                                 ;-----------Error----------------------------------
                                 
                                 ERROR:
                                 	
                                 	;ldi R16,0x02
                                 	;out PORTB,R16
<<<<<<< HEAD
000641 cfff                      	rjmp error
=======
0006be cfff                      	rjmp error
>>>>>>> Pruebas-finales
                                 
                                 ERROR1:
                                 	
                                 	;ldi R16,0x02
                                 	;out PORTB,R16
<<<<<<< HEAD
000642 e904                      	ldi r16, (1<<TWINT)|(1<<TWEN)| (1<<TWSTO)	;Transmite bit de STOP
000643 9300 00bc                 	sts TWCR, r16
000645 cffb                      	rjmp error
                                 
                                 ;------Display :CLEAR----------
                                 DisplayClear:
000646 e018                      	ldi r17, 0x08
000647 e008                      	ldi	r16, 0x08
000648 9300 00bb                 	sts TWDR, r16								; Carga DATA en twdr, limpia twint para empezar la transmision
00064a e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
00064b 9300 00bc                 	sts TWCR, r16
                                 
00064d dfa7                      	RCALL WaitDataI2c
00064e dfe2                      	RCALL DisplayEnable
                                 
00064f e118                      	ldi r17, 0x18
000650 e108                      	ldi r16, 0x18
000651 9300 00bb                 	sts TWDR, r16								
000653 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
000654 9300 00bc                 	sts TWCR, r16
000656 df9e                      	RCALL WaitDataI2c
                                 
000657 dfd9                      	RCALL DisplayEnable
=======
0006bf e904                      	ldi r16, (1<<TWINT)|(1<<TWEN)| (1<<TWSTO)	;Transmite bit de STOP
0006c0 9300 00bc                 	sts TWCR, r16
0006c2 cffb                      	rjmp error
                                 
                                 ;------Display :CLEAR----------
                                 DisplayClear:
0006c3 e018                      	ldi r17, 0x08
0006c4 e008                      	ldi	r16, 0x08
0006c5 9300 00bb                 	sts TWDR, r16								; Carga DATA en twdr, limpia twint para empezar la transmision
0006c7 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
0006c8 9300 00bc                 	sts TWCR, r16
                                 
0006ca dfa7                      	RCALL WaitDataI2c
0006cb dfe2                      	RCALL DisplayEnable
                                 
0006cc e118                      	ldi r17, 0x18
0006cd e108                      	ldi r16, 0x18
0006ce 9300 00bb                 	sts TWDR, r16								
0006d0 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
0006d1 9300 00bc                 	sts TWCR, r16
0006d3 df9e                      	RCALL WaitDataI2c
                                 
0006d4 dfd9                      	RCALL DisplayEnable
                                 
0006d5 9508                      	ret
                                 
                                 DisplayToggleShift:
0006d6 e118                      	ldi r17, 0x18
0006d7 e108                      	ldi	r16, 0x18
0006d8 9300 00bb                 	sts TWDR, r16								; Carga DATA en twdr, limpia twint para empezar la transmision
0006da e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
0006db 9300 00bc                 	sts TWCR, r16
                                 
0006dd df94                      	RCALL WaitDataI2c
0006de dfcf                      	RCALL DisplayEnable
                                 
0006df e818                      	ldi r17, 0x88
0006e0 e808                      	ldi r16, 0x88
0006e1 9300 00bb                 	sts TWDR, r16								
0006e3 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
0006e4 9300 00bc                 	sts TWCR, r16
0006e6 df8b                      	RCALL WaitDataI2c
                                 
0006e7 dfc6                      	RCALL DisplayEnable
>>>>>>> Pruebas-finales
                                 
000658 9508                      	ret
                                 
<<<<<<< HEAD
                                 DisplayToggleShift:
000659 e118                      	ldi r17, 0x18
00065a e108                      	ldi	r16, 0x18
00065b 9300 00bb                 	sts TWDR, r16								; Carga DATA en twdr, limpia twint para empezar la transmision
00065d e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
00065e 9300 00bc                 	sts TWCR, r16
                                 
000660 df94                      	RCALL WaitDataI2c
000661 dfcf                      	RCALL DisplayEnable
                                 
000662 e818                      	ldi r17, 0x88
000663 e808                      	ldi r16, 0x88
000664 9300 00bb                 	sts TWDR, r16								
000666 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
000667 9300 00bc                 	sts TWCR, r16
000669 df8b                      	RCALL WaitDataI2c
                                 
00066a dfc6                      	RCALL DisplayEnable
                                 
00066b 9508                      	ret
                                 
                                 Shift:
00066c 950a                      		DEC			TEMP
00066d f411                      		BRNE		SkipShift0
00066e dfea                      		RCALL		DisplayToggleShift
00066f ea00                      		LDI			TEMP,SHIFTDELAY		
                                 SkipShift0:
000670 d026                      		RCALL		retardo1ms
                                 
000671 9508                      		ret
                                 
                                 DisplayString:
000672 93ff                      	PUSH ZH
000673 93ef                      	PUSH ZL
000674 e040                      	LDI CONTADOR,0x00
                                 
                                 DisplayString_cont:
000675 9543                      	INC CONTADOR	
000676 9185                      	LPM DISPVAR, Z+
000677 3080                      	CPI DISPVAR,0x00
000678 f7e1                      	BRNE DisplayString_cont
000679 9543                      	INC CONTADOR
00067a 9185                      	LPM DISPVAR, Z+
00067b 3080                      	CPI DISPVAR,0x00
00067c f7c1                      	BRNE DisplayString_cont
00067d 954a                      	DEC CONTADOR
00067e 954a                      	DEC CONTADOR
00067f 91ef                      	POP ZL
000680 91ff                      	POP ZH
                                 
                                 DisplayString_next:
000681 9185                      	lpm DISPVAR, Z+
000682 3080                      	CPI DISPVAR,0x00
000683 f419                      	BRNE DisplayString_nextChar
000684 df94                      	RCALL DisplayEnter
000685 954a                      	DEC CONTADOR
000686 cffa                      	RJMP DisplayString_next
                                 DisplayString_nextChar:
000687 df77                      	RCALL DisplayChar
                                 
000688 954a                      	dec  CONTADOR
000689 f7b9                      	brne DisplayString_next
                                 	
00068a 9508                      	ret
=======
                                 Shift:
0006e9 950a                      		DEC			TEMP
0006ea f411                      		BRNE		SkipShift0
0006eb dfea                      		RCALL		DisplayToggleShift
0006ec ea00                      		LDI			TEMP,SHIFTDELAY		
                                 SkipShift0:
0006ed d026                      		RCALL		retardo1ms
                                 
0006ee 9508                      		ret
                                 
                                 DisplayString:
0006ef 93ff                      	PUSH ZH
0006f0 93ef                      	PUSH ZL
0006f1 e040                      	LDI CONTADOR,0x00
                                 
                                 DisplayString_cont:
0006f2 9543                      	INC CONTADOR	
0006f3 9185                      	LPM DISPVAR, Z+
0006f4 3080                      	CPI DISPVAR,0x00
0006f5 f7e1                      	BRNE DisplayString_cont
0006f6 9543                      	INC CONTADOR
0006f7 9185                      	LPM DISPVAR, Z+
0006f8 3080                      	CPI DISPVAR,0x00
0006f9 f7c1                      	BRNE DisplayString_cont
0006fa 954a                      	DEC CONTADOR
0006fb 954a                      	DEC CONTADOR
0006fc 91ef                      	POP ZL
0006fd 91ff                      	POP ZH
                                 
                                 DisplayString_next:
0006fe 9185                      	lpm DISPVAR, Z+
0006ff 3080                      	CPI DISPVAR,0x00
000700 f419                      	BRNE DisplayString_nextChar
000701 df94                      	RCALL DisplayEnter
000702 954a                      	DEC CONTADOR
000703 cffa                      	RJMP DisplayString_next
                                 DisplayString_nextChar:
000704 df77                      	RCALL DisplayChar
                                 
000705 954a                      	dec  CONTADOR
000706 f7b9                      	brne DisplayString_next
                                 	
000707 9508                      	ret
>>>>>>> Pruebas-finales
                                 
                                 
                                 
                                 DispNum:
                                 	
                                 
<<<<<<< HEAD
00068b e300                      	ldi TEMP, 48
00068c 0f30                      	add KEY,TEMP
                                 	
                                 	
                                 DispNum_cont:
00068d 2f80                      	mov DISPVAR,TEMP
00068e df70                      	RCALL DisplayChar
                                 	
                                  .include "delay.asm"
00068f 9508                      
=======
000708 e300                      	ldi TEMP, 48
000709 0f30                      	add KEY,TEMP
                                 	
                                 	
                                 DispNum_cont:
00070a 2f80                      	mov DISPVAR,TEMP
00070b df70                      	RCALL DisplayChar
                                 	
                                  .include "delay.asm"
00070c 9508                      
>>>>>>> Pruebas-finales
                                  * delay.asm
                                  *
                                  *  Created: 05-Nov-16 5:35:06 PM
                                  *   Author: galca
                                  */ 
                                  retardo10us:
<<<<<<< HEAD
000690 930f                      	push TEMP
000691 e30a                      	ldi TEMP,58
                                 loop_ret_10:
000692 950a                      	dec TEMP
000693 0000                      	NOP
000694 f7e9                      	brne loop_ret_10
000695 910f                      	pop TEMP
000696 9508                      	ret
                                 
                                 retardo1ms:
000697 930f                      	push TEMP
000698 e604                      	ldi TEMP,100
                                 loop_ret_1m:
000699 dff6                      	RCALL retardo10us
00069a 950a                      	dec TEMP	
00069b f7e9                      	brne loop_ret_1m
00069c 910f                      	pop TEMP
00069d 9508                      	ret
                                 
                                 retardo50ms:
00069e 930f                      	push TEMP
00069f e302                      	ldi TEMP,50
                                 loop_ret_50m:
0006a0 dff6                      	RCALL retardo1ms
0006a1 950a                      	dec TEMP
0006a2 f7e9                      	brne loop_ret_50m
0006a3 910f                      	pop TEMP
0006a4 9508                      	ret
                                 
                                 retardo500ms:
0006a5 930f                      	push TEMP
0006a6 e00a                      	ldi TEMP,10
                                 loop_ret_500m:
0006a7 dff6                      	RCALL retardo50ms
0006a8 950a                      	dec TEMP
0006a9 f7e9                      	brne loop_ret_500m
0006aa 910f                      	pop TEMP
0006ab 9508                      	ret
                                 
                                 retardo5ms:
0006ac e005                      	ldi TEMP,5
                                 loop_ret_5m:
0006ad dfe9                      	RCALL retardo1ms
0006ae 950a                      	dec TEMP
0006af f7e9                      	brne loop_ret_5m
0006b0 9508                      	ret
                                 
                                 retardo3s:
                                 
0006b1 e30c                      	ldi TEMP, 60
                                 loop_ret_3s:
0006b2 dfeb                      	RCALL retardo50ms
0006b3 950a                      	dec TEMP
0006b4 f7e9                      	brne loop_ret_3s
0006b5 9508                      	ret
                                 
                                 retardo1s:
                                 
0006b6 e104                      	ldi TEMP, 20
                                 loop_ret_1s:
0006b7 dfe6                      	RCALL retardo50ms
0006b8 950a                      	dec TEMP
0006b9 f7e9                      	brne loop_ret_1s
                                  .include "interface.asm"
0006ba 9508                      
=======
00070d 930f                      	push TEMP
00070e e30a                      	ldi TEMP,58
                                 loop_ret_10:
00070f 950a                      	dec TEMP
000710 0000                      	NOP
000711 f7e9                      	brne loop_ret_10
000712 910f                      	pop TEMP
000713 9508                      	ret
                                 
                                 retardo1ms:
000714 930f                      	push TEMP
000715 e604                      	ldi TEMP,100
                                 loop_ret_1m:
000716 dff6                      	RCALL retardo10us
000717 950a                      	dec TEMP	
000718 f7e9                      	brne loop_ret_1m
000719 910f                      	pop TEMP
00071a 9508                      	ret
                                 
                                 retardo50ms:
00071b 930f                      	push TEMP
00071c e302                      	ldi TEMP,50
                                 loop_ret_50m:
00071d dff6                      	RCALL retardo1ms
00071e 950a                      	dec TEMP
00071f f7e9                      	brne loop_ret_50m
000720 910f                      	pop TEMP
000721 9508                      	ret
                                 
                                 retardo500ms:
000722 930f                      	push TEMP
000723 e00a                      	ldi TEMP,10
                                 loop_ret_500m:
000724 dff6                      	RCALL retardo50ms
000725 950a                      	dec TEMP
000726 f7e9                      	brne loop_ret_500m
000727 910f                      	pop TEMP
000728 9508                      	ret
                                 
                                 retardo5ms:
000729 e005                      	ldi TEMP,5
                                 loop_ret_5m:
00072a dfe9                      	RCALL retardo1ms
00072b 950a                      	dec TEMP
00072c f7e9                      	brne loop_ret_5m
00072d 9508                      	ret
                                 
                                 retardo3s:
                                 
00072e e30c                      	ldi TEMP, 60
                                 loop_ret_3s:
00072f dfeb                      	RCALL retardo50ms
000730 950a                      	dec TEMP
000731 f7e9                      	brne loop_ret_3s
000732 9508                      	ret
                                 
                                 retardo1s:
                                 
000733 e104                      	ldi TEMP, 20
                                 loop_ret_1s:
000734 dfe6                      	RCALL retardo50ms
000735 950a                      	dec TEMP
000736 f7e9                      	brne loop_ret_1s
                                  .include "interface.asm"
000737 9508                      
>>>>>>> Pruebas-finales
                                  * interface.asm
                                  *
                                  *  Created: 05-Nov-16 7:59:54 PM
                                  *   Author: galca
                                  */ 
                                 
                                  ;....................Display welcome............................
                                 DisplayWelcome:
                                 	
<<<<<<< HEAD
0006bb e0fd                      	LDi ZH, High(2*T_Welcome)
0006bc ebee                      	LDI ZL, LOW(2*T_Welcome)
                                 	
0006bd dfb4                      	RCALL DisplayString
0006be df5a                      	RCALL DisplayEnter
                                 	
0006bf e0fd                      	LDI ZH, High(2*T_Cocktail)
0006c0 ecec                      	LDI ZL, LOW(2*T_Cocktail)
                                 	
0006c1 dfb0                      	RCALL DisplayString
                                 		
0006c2 9508                      	ret
                                 
                                 DisplayMenu0:
                                 	
0006c3 e0fd                      	LDi ZH, High(2*T_Mode_Select)
0006c4 edec                      	LDI ZL, LOW(2*T_Mode_Select)
                                 	
0006c5 dfac                      	RCALL DisplayString
                                 	
                                 		
0006c6 9508                      	ret
                                 
                                 DisplayMenu1a:
                                 	
0006c7 e0fe                      	LDi ZH, High(2*T_Pred_Select)
0006c8 e1e0                      	LDI ZL, LOW(2*T_Pred_Select)
                                 	
0006c9 dfa8                      	RCALL DisplayString
                                 	
                                 		
0006ca 9508                      	ret
                                 
                                 DisplayMenu2a:
                                 	
0006cb e0fe                      	LDi ZH, High(2*T_Pot_Select)
0006cc e4e4                      	LDI ZL, LOW(2*T_Pot_Select)
                                 	
0006cd dfa4                      	RCALL DisplayString
                                 	
                                 		
0006ce 9508                      	ret
                                 
                                 DisplayMenu1b:
                                 	
0006cf e0fe                      	LDi ZH, High(2*T_Bebida1_Select)
0006d0 e7e8                      	LDI ZL, LOW(2*T_Bebida1_Select)
                                 	
0006d1 dfa0                      	RCALL DisplayString
                                 	
                                 		
0006d2 9508                      	ret
                                 
                                 DisplayMenu2b:
                                 	
0006d3 e0fe                      	LDi ZH, High(2*T_Porc_Select)
0006d4 e9ee                      	LDI ZL, LOW(2*T_Porc_Select)
                                 	
0006d5 df9c                      	RCALL DisplayString
                                 	
                                 		
0006d6 9508                      	ret
                                 
                                 DisplayWait:
                                 	
0006d7 e0fe                      	LDi ZH, High(2*T_Espere)
0006d8 ebe8                      	LDI ZL, LOW(2*T_Espere)
                                 
0006d9 df98                      	RCALL DisplayString
0006da 9508                      	ret
                                 
                                 DisplayDone:
                                 	
0006db e0fe                      	LDi ZH, High(2*T_Listo)
0006dc ecee                      	LDI ZL, LOW(2*T_Listo)
                                 
0006dd df94                      	RCALL DisplayString
0006de 9508                      	ret
=======
000738 e0fe                      	LDi ZH, High(2*T_Welcome)
000739 ebe8                      	LDI ZL, LOW(2*T_Welcome)
                                 	
00073a dfb4                      	RCALL DisplayString
00073b df5a                      	RCALL DisplayEnter
                                 	
00073c e0fe                      	LDI ZH, High(2*T_Cocktail)
00073d ece6                      	LDI ZL, LOW(2*T_Cocktail)
                                 	
00073e dfb0                      	RCALL DisplayString
                                 		
00073f 9508                      	ret
                                 
                                 DisplayMenu0:
                                 	
000740 e0fe                      	LDi ZH, High(2*T_Mode_Select)
000741 ede6                      	LDI ZL, LOW(2*T_Mode_Select)
                                 	
000742 dfac                      	RCALL DisplayString
                                 	
                                 		
000743 9508                      	ret
                                 
                                 DisplayMenu1a:
                                 	
000744 e0ff                      	LDi ZH, High(2*T_Pred_Select)
000745 e0ea                      	LDI ZL, LOW(2*T_Pred_Select)
                                 	
000746 dfa8                      	RCALL DisplayString
                                 	
                                 		
000747 9508                      	ret
                                 
                                 DisplayMenu2a:
                                 	
000748 e0ff                      	LDi ZH, High(2*T_Pot_Select)
000749 e3ee                      	LDI ZL, LOW(2*T_Pot_Select)
                                 	
00074a dfa4                      	RCALL DisplayString
                                 	
                                 		
00074b 9508                      	ret
                                 
                                 DisplayMenu1b:
                                 	
00074c e0ff                      	LDi ZH, High(2*T_Bebida1_Select)
00074d e7e2                      	LDI ZL, LOW(2*T_Bebida1_Select)
                                 	
00074e dfa0                      	RCALL DisplayString
                                 	
                                 		
00074f 9508                      	ret
                                 
                                 DisplayMenu2b:
                                 	
000750 e0ff                      	LDi ZH, High(2*T_Porc_Select)
000751 e9e8                      	LDI ZL, LOW(2*T_Porc_Select)
                                 	
000752 df9c                      	RCALL DisplayString
                                 	
                                 		
000753 9508                      	ret
                                 
                                 DisplayWait:
                                 	
000754 e0ff                      	LDi ZH, High(2*T_Espere)
000755 ebe2                      	LDI ZL, LOW(2*T_Espere)
                                 
000756 df98                      	RCALL DisplayString
000757 9508                      	ret
                                 
                                 DisplayDone:
                                 	
000758 e0ff                      	LDi ZH, High(2*T_Listo)
000759 ece8                      	LDI ZL, LOW(2*T_Listo)
                                 
00075a df94                      	RCALL DisplayString
00075b 9508                      	ret
>>>>>>> Pruebas-finales
                                 
                                  ;....................TABLAS (display)...........................
                                 
                                 T_Welcome:
<<<<<<< HEAD
0006df 4942
0006e0 4e45
0006e1 4556
0006e2 494e
0006e3 4f44
0006e4 2153
0006e5 0000                      	.Db 'B','I','E','N','V','E','N','I','D','O','S','!',0,0
                                 
                                 T_COCKTail:
0006e6 2a2a
0006e7 432a
0006e8 434f
0006e9 2d4b
0006ea 4154
0006eb 4c49
0006ec 2a2a
0006ed 0000                      	.DB '*','*','*','C','O','C','K','-','T','A','I','L','*','*',0,0
                                 	
                                 T_Mode_Select:
0006ee 6553
0006ef 656c
0006f0 6363
0006f1 6f69
0006f2 656e
0006f3 6d20
0006f4 646f
0006f5 206f
0006f6 6564
0006f7 6f20
0006f8 6570
0006f9 6172
0006fa 6963
0006fb 6e6f
0006fc 003a
0006fd 2d31
0006fe 6142
0006ff 6973
000700 6f63
000701 3220
000702 412d
000703 6176
000704 7a6e
000705 6461
000706 006f
C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\interface.asm(99): warning: .cseg .db misalignment - padding zero byte
C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\main.asm(233): 'C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\interface.asm' included form here
000707 0000                      	.DB		"Seleccione modo de operacion:",0,"1-Basico 2-Avanzado",0,0 
                                 
                                 T_Pred_Select:
000708 6553
000709 656c
00070a 6363
00070b 6f69
00070c 656e
00070d 6220
00070e 6265
00070f 6469
000710 3a61
000711 3100
000712 462d
000713 7265
000714 656e
000715 2074
000716 2d32
000717 6857
000718 7369
000719 6f63
00071a 616c
00071b 3320
00071c 432d
00071d 636f
00071e 2d61
00071f 6f43
000720 616c
000721 0000                      	.DB		"Seleccione bebida:",0,"1-Fernet 2-Whiscola 3-Coca-Cola",0,0
                                 
                                 T_Pot_Select:
000722 6553
000723 656c
000724 6363
000725 6f69
000726 656e
000727 7020
000728 746f
000729 6e65
00072a 6963
00072b 3a61
00072c 3100
00072d 432d
00072e 726f
00072f 6f64
000730 6562
000731 2073
000732 2d32
000733 654d
000734 6964
000735 2061
000736 2d33
000737 6e49
000738 6166
000739 746e
00073a 6c69
00073b 0000                      	.DB		"Seleccione potencia:",0,"1-Cordobes 2-Media 3-Infantil",0,0
                                 
                                 T_Bebida1_Select:
00073c 6553
00073d 656c
00073e 6363
00073f 6f69
000740 656e
000741 6220
000742 6265
000743 6469
000744 3a61
000745 3100
000746 462d
000747 7265
000748 656e
000749 2074
00074a 2d32
00074b 6857
00074c 7369
00074d 796b
00074e 0000                      	.DB		"Seleccione bebida:",0,"1-Fernet 2-Whisky",0,0
                                 
                                 T_Porc_Select:
00074f 6e49
000750 7274
000751 646f
000752 7a75
000753 6163
000754 7000
000755 726f
000756 6563
000757 746e
000758 6a61
000759 3a65
00075a 0020
C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\interface.asm(111): warning: .cseg .db misalignment - padding zero byte
C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\main.asm(233): 'C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\interface.asm' included form here
00075b 0000                      	.DB		"Introduzca",0,"porcentaje: ",0,0
                                 
                                 T_Espere:
00075c 7345
00075d 6570
00075e 6572
00075f 0020
000760 6f70
000761 2072
000762 6166
000763 6f76
000764 2e72
000765 2e2e
000766 0000                      	.DB		"Espere ",0,"por favor...",0,0
                                 
                                 T_Listo:
000767 694c
000768 7473
000769 216f
00076a 5220
00076b 7465
00076c 7269
00076d 2065
00076e 7573
00076f 6200
000770 6265
000771 6469
000772 2061
000773 6f70
000774 2072
000775 6166
000776 6f76                       .include "math.asm"
000777 0072
C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\math.asm(1): warning: .cseg .db misalignment - padding zero byte
C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\main.asm(234): 'C:\Users\waral\OneDrive\Documentos\GitHub\mas-cocktail\mas-cocktail\math.asm' included form here
000778 0000                      
=======
00075c 4942
00075d 4e45
00075e 4556
00075f 494e
000760 4f44
000761 2153
000762 0000                      	.Db 'B','I','E','N','V','E','N','I','D','O','S','!',0,0
                                 
                                 T_COCKTail:
000763 2a2a
000764 432a
000765 434f
000766 2d4b
000767 4154
000768 4c49
000769 2a2a
00076a 0000                      	.DB '*','*','*','C','O','C','K','-','T','A','I','L','*','*',0,0
                                 	
                                 T_Mode_Select:
00076b 6553
00076c 656c
00076d 6363
00076e 6f69
00076f 656e
000770 6d20
000771 646f
000772 206f
000773 6564
000774 6f20
000775 6570
000776 6172
000777 6963
000778 6e6f
000779 003a
00077a 2d31
00077b 6142
00077c 6973
00077d 6f63
00077e 3220
00077f 412d
000780 6176
000781 7a6e
000782 6461
000783 006f
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm(99): warning: .cseg .db misalignment - padding zero byte
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(228): 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm' included form here
000784 0000                      	.DB		"Seleccione modo de operacion:",0,"1-Basico 2-Avanzado",0,0 
                                 
                                 T_Pred_Select:
000785 6553
000786 656c
000787 6363
000788 6f69
000789 656e
00078a 6220
00078b 6265
00078c 6469
00078d 3a61
00078e 3100
00078f 462d
000790 7265
000791 656e
000792 2074
000793 2d32
000794 6857
000795 7369
000796 6f63
000797 616c
000798 3320
000799 432d
00079a 636f
00079b 2d61
00079c 6f43
00079d 616c
00079e 0000                      	.DB		"Seleccione bebida:",0,"1-Fernet 2-Whiscola 3-Coca-Cola",0,0
                                 
                                 T_Pot_Select:
00079f 6553
0007a0 656c
0007a1 6363
0007a2 6f69
0007a3 656e
0007a4 7020
0007a5 746f
0007a6 6e65
0007a7 6963
0007a8 3a61
0007a9 3100
0007aa 432d
0007ab 726f
0007ac 6f64
0007ad 6562
0007ae 2073
0007af 2d32
0007b0 654d
0007b1 6964
0007b2 2061
0007b3 2d33
0007b4 6e49
0007b5 6166
0007b6 746e
0007b7 6c69
0007b8 0000                      	.DB		"Seleccione potencia:",0,"1-Cordobes 2-Media 3-Infantil",0,0
                                 
                                 T_Bebida1_Select:
0007b9 6553
0007ba 656c
0007bb 6363
0007bc 6f69
0007bd 656e
0007be 6220
0007bf 6265
0007c0 6469
0007c1 3a61
0007c2 3100
0007c3 462d
0007c4 7265
0007c5 656e
0007c6 2074
0007c7 2d32
0007c8 6857
0007c9 7369
0007ca 796b
0007cb 0000                      	.DB		"Seleccione bebida:",0,"1-Fernet 2-Whisky",0,0
                                 
                                 T_Porc_Select:
0007cc 6e49
0007cd 7274
0007ce 646f
0007cf 7a75
0007d0 6163
0007d1 7000
0007d2 726f
0007d3 6563
0007d4 746e
0007d5 6a61
0007d6 3a65
0007d7 0020
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm(111): warning: .cseg .db misalignment - padding zero byte
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(228): 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm' included form here
0007d8 0000                      	.DB		"Introduzca",0,"porcentaje: ",0,0
                                 
                                 T_Espere:
0007d9 7345
0007da 6570
0007db 6572
0007dc 0020
0007dd 6f70
0007de 2072
0007df 6166
0007e0 6f76
0007e1 2e72
0007e2 2e2e
0007e3 0000                      	.DB		"Espere ",0,"por favor...",0,0
                                 
                                 T_Listo:
0007e4 694c
0007e5 7473
0007e6 216f
0007e7 5220
0007e8 7465
0007e9 7269
0007ea 2065
0007eb 7573
0007ec 6200
0007ed 6265
0007ee 6469
0007ef 2061
0007f0 6f70
0007f1 2072
0007f2 6166
0007f3 6f76                       .include "math.asm"
0007f4 0072
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\math.asm(1): warning: .cseg .db misalignment - padding zero byte
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(229): 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\math.asm' included form here
0007f5 0000                      
>>>>>>> Pruebas-finales
                                  * math.asm
                                  *
                                  *  Created: 18-Nov-16 11:18:15 AM
                                  *   Author: galca
                                  */ 
                                 
                                  .DEF	DENOMINATOR = R2
                                  .DEF	QUOTIENT = R3
                                  .DEF	NUM = R4
                                  .def	numeradorL = R0
                                  .def	numeradorH = R1
                                  .def	denominadorL = R10
                                  .def	denominadorH = R11
                                  .def cociente = r12
                                 
                                 keyb_to_bcd:
<<<<<<< HEAD
000779 91ff                      		POP			ZH
00077a 91ef                      		POP			ZL
00077b 910f                      		POP			TEMP
00077c 700f                      		ANDI		TEMP,0x0F
00077d 9502                      		SWAP		TEMP
                                 
00077e 2f20                      		MOV			TEMP2,TEMP
00077f 910f                      		POP			TEMP
000780 700f                      		ANDI		TEMP,0x0F
000781 2b02                      		OR			TEMP,TEMP2
000782 930f                      		PUSH		TEMP
000783 93ef                      		PUSH		ZL
000784 93ff                      		PUSH		ZH
                                 
000785 9508                      		RET
                                 
                                 bcd_to_bin:
000786 91ff                      		POP			ZH
000787 91ef                      		POP			ZL
000788 910f                      		POP			TEMP
000789 930f                      		PUSH		TEMP
00078a 700f                      		ANDI		TEMP,0x0F
00078b 2f20                      		MOV			TEMP2,TEMP
00078c 910f                      		POP			TEMP
00078d 9502                      		SWAP		TEMP
00078e 700f                      		ANDI		TEMP,0x0F
00078f 2e60                      		MOV			TEMP3,TEMP
000790 e00a                      		LDI			TEMP,10
000791 9e60                      		MUL			TEMP3,TEMP
000792 0130                      		MOVW		TEMP3,R0
000793 1e62                      		ADC			TEMP3,TEMP2
000794 926f                      		PUSH		TEMP3
000795 93ef                      		PUSH		ZL
000796 93ff                      		PUSH		ZH
                                 		
000797 9508                      		RET
                                 
                                 
                                 bcd_to_ascii:
000798 91ff                      		POP			ZH
000799 91ef                      		POP			ZL
00079a 910f                      		POP			TEMP
00079b 930f                      		PUSH		TEMP
00079c 700f                      		ANDI		TEMP,0x0F
00079d 6300                      		ORI			TEMP,0x30
                                 
00079e 2f20                      		MOV			TEMP2,TEMP
00079f 910f                      		POP			TEMP
0007a0 932f                      		PUSH		TEMP2
0007a1 9502                      		SWAP		TEMP
0007a2 700f                      		ANDI		TEMP,0x0F
0007a3 6300                      		ORI			TEMP,0x30
0007a4 930f                      		PUSH		TEMP
                                 
0007a5 93ef                      		PUSH		ZL
0007a6 93ff                      		PUSH		ZH
0007a7 9508                      		RET
                                 
                                 pack_bcd:
0007a8 91ff                      		POP			ZH
0007a9 91ef                      		POP			ZL
0007aa 912f                      		POP			TEMP2
0007ab 910f                      		POP			TEMP
0007ac 9522                      		SWAP		TEMP2
0007ad 2b02                      		OR			TEMP,TEMP2
0007ae 930f                      		PUSH		TEMP
0007af 93ef                      		PUSH		ZL
0007b0 93ff                      		PUSH		ZH
0007b1 9508                      		RET
                                 
                                 bin_to_bcd:
0007b2 91ff                      		POP			ZH
0007b3 91ef                      		POP			ZL
0007b4 904f                      		POP			NUM
0007b5 e00a                      		LDI			TEMP,10
0007b6 2e20                      		MOV			DENOMINATOR,TEMP
0007b7 d00e                      		RCALL		DIVIDE
0007b8 2d04                      		MOV			TEMP,NUM
0007b9 2e40                      		MOV			NUM,TEMP
0007ba 924f                      		PUSH		NUM
0007bb 2c43                      		MOV			NUM,QUOTIENT
0007bc d009                      		RCALL		DIVIDE
0007bd 2d04                      		MOV			TEMP,NUM
0007be 2e40                      		MOV			NUM,TEMP
0007bf 924f                      		PUSH		NUM
0007c0 2d03                      		MOV			TEMP,QUOTIENT
0007c1 2e30                      		MOV			QUOTIENT,TEMP
0007c2 923f                      		PUSH		QUOTIENT
0007c3 93ef                      		PUSH		ZL
0007c4 93ff                      		PUSH		ZH
0007c5 9508                      		RET
                                 
                                 DIVIDE:
0007c6 e000                      		LDI			TEMP,0
0007c7 2e30                      		MOV			QUOTIENT,TEMP
                                 DIVLOOP:
0007c8 9433                      		INC			QUOTIENT
0007c9 1842                      		SUB			NUM,DENOMINATOR
0007ca f7e8                      		BRCC		DIVLOOP
0007cb 943a                      		DEC			QUOTIENT
0007cc 0c42                      		ADD			NUM,DENOMINATOR
0007cd 9508                      		RET
=======
0007f6 91ff                      		POP			ZH
0007f7 91ef                      		POP			ZL
0007f8 910f                      		POP			TEMP
0007f9 700f                      		ANDI		TEMP,0x0F
0007fa 9502                      		SWAP		TEMP
                                 
0007fb 2f20                      		MOV			TEMP2,TEMP
0007fc 910f                      		POP			TEMP
0007fd 700f                      		ANDI		TEMP,0x0F
0007fe 2b02                      		OR			TEMP,TEMP2
0007ff 930f                      		PUSH		TEMP
000800 93ef                      		PUSH		ZL
000801 93ff                      		PUSH		ZH
                                 
000802 9508                      		RET
                                 
                                 bcd_to_bin:
000803 91ff                      		POP			ZH
000804 91ef                      		POP			ZL
000805 910f                      		POP			TEMP
000806 930f                      		PUSH		TEMP
000807 700f                      		ANDI		TEMP,0x0F
000808 2f20                      		MOV			TEMP2,TEMP
000809 910f                      		POP			TEMP
00080a 9502                      		SWAP		TEMP
00080b 700f                      		ANDI		TEMP,0x0F
00080c 2e60                      		MOV			TEMP3,TEMP
00080d e00a                      		LDI			TEMP,10
00080e 9e60                      		MUL			TEMP3,TEMP
00080f 0130                      		MOVW		TEMP3,R0
000810 1e62                      		ADC			TEMP3,TEMP2
000811 926f                      		PUSH		TEMP3
000812 93ef                      		PUSH		ZL
000813 93ff                      		PUSH		ZH
                                 		
000814 9508                      		RET
                                 
                                 
                                 bcd_to_ascii:
000815 91ff                      		POP			ZH
000816 91ef                      		POP			ZL
000817 910f                      		POP			TEMP
000818 930f                      		PUSH		TEMP
000819 700f                      		ANDI		TEMP,0x0F
00081a 6300                      		ORI			TEMP,0x30
                                 
00081b 2f20                      		MOV			TEMP2,TEMP
00081c 910f                      		POP			TEMP
00081d 932f                      		PUSH		TEMP2
00081e 9502                      		SWAP		TEMP
00081f 700f                      		ANDI		TEMP,0x0F
000820 6300                      		ORI			TEMP,0x30
000821 930f                      		PUSH		TEMP
                                 
000822 93ef                      		PUSH		ZL
000823 93ff                      		PUSH		ZH
000824 9508                      		RET
                                 
                                 pack_bcd:
000825 91ff                      		POP			ZH
000826 91ef                      		POP			ZL
000827 912f                      		POP			TEMP2
000828 910f                      		POP			TEMP
000829 9522                      		SWAP		TEMP2
00082a 2b02                      		OR			TEMP,TEMP2
00082b 930f                      		PUSH		TEMP
00082c 93ef                      		PUSH		ZL
00082d 93ff                      		PUSH		ZH
00082e 9508                      		RET
                                 
                                 bin_to_bcd:
00082f 91ff                      		POP			ZH
000830 91ef                      		POP			ZL
000831 904f                      		POP			NUM
000832 e00a                      		LDI			TEMP,10
000833 2e20                      		MOV			DENOMINATOR,TEMP
000834 d00e                      		RCALL		DIVIDE
000835 2d04                      		MOV			TEMP,NUM
000836 2e40                      		MOV			NUM,TEMP
000837 924f                      		PUSH		NUM
000838 2c43                      		MOV			NUM,QUOTIENT
000839 d009                      		RCALL		DIVIDE
00083a 2d04                      		MOV			TEMP,NUM
00083b 2e40                      		MOV			NUM,TEMP
00083c 924f                      		PUSH		NUM
00083d 2d03                      		MOV			TEMP,QUOTIENT
00083e 2e30                      		MOV			QUOTIENT,TEMP
00083f 923f                      		PUSH		QUOTIENT
000840 93ef                      		PUSH		ZL
000841 93ff                      		PUSH		ZH
000842 9508                      		RET
                                 
                                 DIVIDE:
000843 e000                      		LDI			TEMP,0
000844 2e30                      		MOV			QUOTIENT,TEMP
                                 DIVLOOP:
000845 9433                      		INC			QUOTIENT
000846 1842                      		SUB			NUM,DENOMINATOR
000847 f7e8                      		BRCC		DIVLOOP
000848 943a                      		DEC			QUOTIENT
000849 0c42                      		ADD			NUM,DENOMINATOR
00084a 9508                      		RET
>>>>>>> Pruebas-finales
                                 
                                 
                                 ;----------------Operaciones matemáticas---------------
                                 
                                 ;---Division--
                                 division:
<<<<<<< HEAD
0007ce 24cc                      	clr cociente
                                 
                                 div1:
0007cf 94c3                      	inc cociente
0007d0 180a                      	sub numeradorL, denominadorL
0007d1 081b                      	sbc numeradorH, denominadorH
0007d2 f7e0                      	brcc div1
0007d3 94ca                      	dec cociente
                                 	
                                  .include "ultrasound_driver.asm"
0007d4 9508                      
=======
00084b 24cc                      	clr cociente
                                 
                                 div1:
00084c 94c3                      	inc cociente
00084d 180a                      	sub numeradorL, denominadorL
00084e 081b                      	sbc numeradorH, denominadorH
00084f f7e0                      	brcc div1
000850 94ca                      	dec cociente
                                 	
                                  .include "ultrasound_driver.asm"
000851 9508                      
>>>>>>> Pruebas-finales
                                  * ultrasound_driver.asm
                                  *
                                  *  Created: 19-Nov-16 4:18:04 PM
                                  *   Author: galca
                                  */ 
                                 
                                 .EQU USART_BAUDRATE = 9600
                                 .EQU BAUD_PRESCALE = (((F_CPU / (USART_BAUDRATE * 16))) - 1)
                                 
                                 InitUsart:
<<<<<<< HEAD
0007d5 e108                      		LDI		TEMP,(1<<TXEN0)|(1<<RXEN0)
0007d6 9300 00c1                 		STS		UCSR0B,TEMP
0007d8 e006                      		LDI		TEMP,(3<<UCSZ00)
0007d9 9300 00c2                 		STS		UCSR0C,R16
0007db e707                      		LDI		TEMP,0X77
0007dc 9300 00c4                 		STS		UBRR0L,TEMP
0007de e000                      		LDI		TEMP,0x00
0007df 9300 00c5                 		STS		UBRR0H,TEMP
                                 
0007e1 9508                      		RET
                                 
                                 measurement:
0007e2 91ff                      		POP		ZH
0007e3 91ef                      		POP		ZL
                                 
0007e4 e505                      		LDI		TEMP,0x55
0007e5 d009                      		RCALL	transmit
0007e6 deb7                      		RCALL	retardo50ms
0007e7 d00e                      		RCALL	receive
0007e8 930f                      		PUSH	TEMP
0007e9 d00c                      		RCALL	receive
0007ea 930f                      		PUSH	TEMP
0007eb d00a                      		RCALL receive
                                 
0007ec 93ef                      		PUSH	ZL
0007ed 93ff                      		PUSH	ZH
0007ee 9508                      		RET
                                 
                                 
                                 transmit:		
0007ef 9120 00c0                 		LDS		TEMP2,UCSR0A
0007f1 ff25                      		SBRS	TEMP2,UDRE0
0007f2 cffc                      		RJMP	transmit
0007f3 9300 00c6                 		STS		UDR0,TEMP
0007f5 9508                      		RET
                                 
                                 receive:
0007f6 9120 00c0                 		LDS		TEMP2,UCSR0A
0007f8 ff25                      		SBRS	TEMP2,UDRE0
0007f9 cffc                      		RJMP	receive
0007fa 9100 00c6                 		LDS		TEMP,UDR0
                                  .include "caudal_driver.asm"
0007fc 9508                      
=======
000852 e108                      		LDI		TEMP,(1<<TXEN0)|(1<<RXEN0)
000853 9300 00c1                 		STS		UCSR0B,TEMP
000855 e006                      		LDI		TEMP,(3<<UCSZ00)
000856 9300 00c2                 		STS		UCSR0C,R16
000858 e707                      		LDI		TEMP,0X77
000859 9300 00c4                 		STS		UBRR0L,TEMP
00085b e000                      		LDI		TEMP,0x00
00085c 9300 00c5                 		STS		UBRR0H,TEMP
                                 
00085e 9508                      		RET
                                 
                                 measurement:
00085f 91ff                      		POP		ZH
000860 91ef                      		POP		ZL
                                 
000861 e505                      		LDI		TEMP,0x55
000862 d009                      		RCALL	transmit
000863 deb7                      		RCALL	retardo50ms
000864 d00e                      		RCALL	receive
000865 930f                      		PUSH	TEMP
000866 d00c                      		RCALL	receive
000867 930f                      		PUSH	TEMP
000868 d00a                      		RCALL receive
                                 
000869 93ef                      		PUSH	ZL
00086a 93ff                      		PUSH	ZH
00086b 9508                      		RET
                                 
                                 
                                 transmit:		
00086c 9120 00c0                 		LDS		TEMP2,UCSR0A
00086e ff25                      		SBRS	TEMP2,UDRE0
00086f cffc                      		RJMP	transmit
000870 9300 00c6                 		STS		UDR0,TEMP
000872 9508                      		RET
                                 
                                 receive:
000873 9120 00c0                 		LDS		TEMP2,UCSR0A
000875 ff25                      		SBRS	TEMP2,UDRE0
000876 cffc                      		RJMP	receive
000877 9100 00c6                 		LDS		TEMP,UDR0
                                  .include "caudal_driver.asm"
000879 9508                      
>>>>>>> Pruebas-finales
                                  * caudal_driver.asm
                                  *
                                  *  Created: 25-Nov-16 3:18:48 PM
                                  *   Author: galca
                                  */ 
                                 
<<<<<<< HEAD
                                  .equ MaxPulsos = 150
=======
                                  .equ MaxPulsos = 120
>>>>>>> Pruebas-finales
                                  .def CONTROL = R22
                                  .def TOTAL = R23
                                  .def IMPRIMO = R25
                                 
                                 
                                  ;________________________________________________--
                                 ;				 Caudalimetro
                                 ;__________________________________________________
                                 
                                 ;---Inicio Creacion de Trago------
                                 CreoTrago:
<<<<<<< HEAD
0007fd 940e 081a                 	call CargoTrago1
0007ff e060                      	ldi CONTROL,0x00
                                 loop4:
                                 	
000800 fd60                      	sbrc CONTROL, 0
000801 940c 080a                 	jmp ahora
000803 9170 0084                 	lds TOTAL,TCNT1L
000805 940e 085c                 	call imprimototal
000807 940e 069e                 	call retardo50ms
000809 cff6                      	rjmp loop4
                                 ahora:	
00080a 940e 06b1                 	call retardo3s
00080c 940e 083b                 	call CargoTrago2
00080e e060                      	ldi CONTROL,0x00
                                 loop5:
                                 	
00080f fd60                      	sbrc CONTROL, 0
000810 940c 0819                 	jmp ahora2
000812 9170 0084                 	lds TOTAL,TCNT1L
000814 940e 085c                 	call imprimototal
000816 940e 069e                 	call retardo50ms
000818 cff6                      	rjmp loop5
                                 ahora2:	
000819 9508                      	ret
                                 
                                 CargoTrago1:
00081a 94f8                      	cli
                                 	
00081b 9100 1400                 	lds TEMP,perc1
00081d e926                      	ldi TEMP2,MAxPulsos
                                 	
00081e 9f02                      	mul temp,temp2
00081f e000                      	ldi temp,0
000820 2eb0                      	mov denominadorh,temp
000821 e604                      	ldi temp,100
000822 2ea0                      	mov denominadorL,temp
000823 940e 07ce                 	call division ;En cociente tenemos la cantidad de pulsos 
                                 
000825 e000                      	ldi TEMP,0     
000826 9300 0089                 	sts OCR1AH,TEMP
000828 2d0c                      	mov TEMP,cociente			;Cantidad de pulsos hasta cortar electrovalvula
000829 9300 0088                 	sts OCR1AL,TEMP
                                 
00082b e000                      	ldi TEMP,0x00			;Configuro timer para external clock, pt11
00082c 9300 0080                 	sts TCCR1A,TEMP
00082e e00e                      	ldi TEMP,0b00001110		; CTC External clock  SART         0b00001001  ; CTC INTERNAL clock
00082f 9300 0081                 	sts TCCR1B,TEMP
000831 e002                      	ldi TEMP,(1<<1)			 ; Interrupts enabled, compare match b
000832 9300 006f                 	sts TIMSK1, TEMP
000834 9100 1402                 	lds temp, Drink1
000836 b128                      	in temp2,portc
000837 2b02                      	or temp,temp2
000838 b908                      	out portc,temp
000839 9478                      	sei
00083a 9508                      	ret
                                 
                                 ;------Cargo TRago 2----
                                 CargoTrago2:
00083b 94f8                      	cli
                                 	
00083c 9100 1401                 	lds TEMP,perc2
00083e e926                      	ldi TEMP2,MAxPulsos
                                 	
00083f 9f02                      	mul temp,temp2
000840 e000                      	ldi temp,0
000841 2eb0                      	mov denominadorh,temp
000842 e604                      	ldi temp,100
000843 2ea0                      	mov denominadorL,temp
000844 940e 07ce                 	call division ;En cociente tenemos la cantidad de pulsos 
                                 
000846 e000                      	ldi TEMP,0     
000847 9300 0089                 	sts OCR1AH,TEMP
000849 2d0c                      	mov TEMP,cociente			;Cantidad de pulsos hasta cortar electrovalvula
00084a 9300 0088                 	sts OCR1AL,TEMP
                                 
00084c e000                      	ldi TEMP,0x00			;Configuro timer para external clock, pt11
00084d 9300 0080                 	sts TCCR1A,TEMP
00084f e00e                      	ldi TEMP,0b00001110		; CTC External clock  SART         0b00001001  ; CTC INTERNAL clock
000850 9300 0081                 	sts TCCR1B,TEMP
000852 e002                      	ldi TEMP,(1<<1)			 ; Interrupts enabled, compare match b
000853 9300 006f                 	sts TIMSK1, TEMP
000855 9100 1403                 	lds temp, Drink2
000857 b128                      	in temp2,portc
000858 2b02                      	or temp,temp2
000859 b908                      	out portc,temp
00085a 9478                      	sei
00085b 9508                      	ret
                                 ;-----numero a string-----
                                 ImprimoTotal:
00085c 940e 0646                 		call DisplayClear
                                 
00085e e098                      		ldi IMPRIMO,8
                                 contimprtot:
00085f ff77                      		sbrs TOTAL,7
000860 c001                      		rjmp CeroTotal
000861 c007                      		rjmp UnoTotal
                                 
                                 CeroTotal: 
000862 e380                      		ldi DISPVAR,'0'
000863 940e 05ff                 		call DisplayChar
000865 959a                      		dec IMPRIMO
000866 f049                      		breq finImprimo
000867 0f77                      		lsL TOTAL
000868 cff6                      		rjmp contimprtot
                                 UnoTotal:
000869 e381                      		ldi DISPVAR,'1'
00086a 940e 05ff                 		call DisplayChar
00086c 959a                      		dec IMPRIMO
00086d f011                      		breq finImprimo
00086e 0f77                      		lsL TOTAL
00086f cfef                      		rjmp contimprtot
                                 FinImprimo:
000870 9508                      ret
=======
                                 
                                 
                                 
00087a 940e 08a7                 	call CargoTrago1
00087c e060                      	ldi CONTROL,0x00
                                 loop4:
                                 	
00087d fd60                      	sbrc CONTROL, 0
00087e 940c 088d                 	jmp ahora
000880 9170 0084                 	lds TOTAL,TCNT1L
000882 9100 0064                 	LDS TEMP, 100
000884 9f07                      	MUL TEMP,TOTAL
000885 e708                      	LDI TEMP, MaxPulsos
000886 940e 084b                 	call division
                                 /*	PUSH cociente
                                 	RCALL bin_to_bcd
                                 	POP TEMP
                                 	RCALL pack_bcd
                                 	rcall bcd_to_ascii
                                 	pop temp
                                 	pop temp2
                                 	mov dispvar,temp2
                                 	rcall DisplayChar
                                 	mov dispvar,temp
                                 	rcall DisplayChar*/
000888 940e 08d1                 	call imprimototal
00088a 940e 071b                 	call retardo50ms
00088c cff0                      	rjmp loop4
                                 ahora:	
00088d 940e 072e                 	call retardo3s
00088f 9100 1403                 	lds temp, drink2
000891 9300 1402                 	sts drink1,temp
000893 9100 1401                 	lds temp, perc2
000895 9300 1400                 	sts perc1, temp
000897 de96                      	rcall retardo3s
000898 de95                      	rcall retardo3s
000899 940e 08a7                 	call CargoTrago1
00089b e060                      	ldi CONTROL,0x00
                                 loop5:
                                 	
00089c fd60                      	sbrc CONTROL, 0
00089d 940c 08a6                 	jmp ahora2
00089f 9170 0084                 	lds TOTAL,TCNT1L
0008a1 940e 08d1                 	call imprimototal
0008a3 940e 071b                 	call retardo50ms
0008a5 cff6                      	rjmp loop5
                                 ahora2:	
0008a6 9508                      	ret
                                 
                                 CargoTrago1:
0008a7 94f8                      	cli
                                 	
0008a8 9100 1400                 	lds TEMP,perc1
0008aa e728                      	ldi TEMP2,MAxPulsos
                                 	
0008ab 9f02                      	mul temp,temp2
0008ac e000                      	ldi temp,0
0008ad 2eb0                      	mov denominadorh,temp
0008ae e604                      	ldi temp,100
0008af 2ea0                      	mov denominadorL,temp
0008b0 940e 084b                 	call division ;En cociente tenemos la cantidad de pulsos 
                                 
0008b2 e000                      	ldi TEMP,0     
0008b3 9300 0089                 	sts OCR1AH,TEMP
0008b5 2d0c                      	mov TEMP,cociente			;Cantidad de pulsos hasta cortar electrovalvula
0008b6 9300 0088                 	sts OCR1AL,TEMP
                                 
0008b8 e000                      	ldi TEMP,0x00			;Configuro timer para external clock, pt11
0008b9 9300 0080                 	sts TCCR1A,TEMP
0008bb e00e                      	ldi TEMP,0b00001110		; CTC External clock  SART         0b00001001  ; CTC INTERNAL clock
0008bc 9300 0081                 	sts TCCR1B,TEMP
0008be e002                      	ldi TEMP,(1<<1)			 ; Interrupts enabled, compare match b
0008bf 9300 006f                 	sts TIMSK1, TEMP
0008c1 9100 1402                 	lds temp, Drink1
0008c3 3001                      	cpi temp, 0x01
0008c4 f031                      	breq StartEV1
0008c5 3002                      	cpi temp, 0x02
0008c6 f031                      	breq StartEV2
0008c7 3003                      	cpi temp, 0x03
0008c8 f031                      	breq StartEV3
                                 	
                                 
                                 EndCreoTrago:
0008c9 9478                      	sei
0008ca 9508                      	ret
                                 
                                 StartEV1:
0008cb 9a40                      	sbi portc,0
0008cc cffc                      	rjmp EndCreoTrago
                                 StartEV2:
0008cd 9a41                      	sbi portc,1
0008ce cffa                      	rjmp EndCreoTrago
                                 StartEV3:
0008cf 9a42                      	sbi portc,2
0008d0 cff8                      	rjmp EndCreoTrago
                                 /*;------Cargo TRago 2----
                                 CargoTrago2:
                                 	cli
                                 	
                                 	lds TEMP,perc2
                                 	ldi TEMP2,MAxPulsos
                                 	
                                 	mul temp,temp2
                                 	ldi temp,0
                                 	mov denominadorh,temp
                                 	ldi temp,100
                                 	mov denominadorL,temp
                                 	call division ;En cociente tenemos la cantidad de pulsos 
                                 
                                 	ldi TEMP,0     
                                 	sts OCR1AH,TEMP
                                 	mov TEMP,cociente			;Cantidad de pulsos hasta cortar electrovalvula
                                 	sts OCR1AL,TEMP
                                 
                                 	ldi TEMP,0x00			;Configuro timer para external clock, pt11
                                 	sts TCCR1A,TEMP
                                 	ldi TEMP,0b00001110		; CTC External clock  SART         0b00001001  ; CTC INTERNAL clock
                                 	sts TCCR1B,TEMP
                                 	ldi TEMP,(1<<1)			 ; Interrupts enabled, compare match b
                                 	sts TIMSK1, TEMP
                                 	SBI PORTC,2
                                 	in temp2,portc
                                 	or temp,temp2
                                 	out portc,temp
                                 	sei
                                 	ret*/
                                 ;-----numero a string-----
                                 ImprimoTotal:
0008d1 940e 06c3                 		call DisplayClear
                                 
0008d3 e098                      		ldi IMPRIMO,8
                                 contimprtot:
0008d4 ff77                      		sbrs TOTAL,7
0008d5 c001                      		rjmp CeroTotal
0008d6 c007                      		rjmp UnoTotal
                                 
                                 CeroTotal: 
0008d7 e380                      		ldi DISPVAR,'0'
0008d8 940e 067c                 		call DisplayChar
0008da 959a                      		dec IMPRIMO
0008db f049                      		breq finImprimo
0008dc 0f77                      		lsL TOTAL
0008dd cff6                      		rjmp contimprtot
                                 UnoTotal:
0008de e381                      		ldi DISPVAR,'1'
0008df 940e 067c                 		call DisplayChar
0008e1 959a                      		dec IMPRIMO
0008e2 f011                      		breq finImprimo
0008e3 0f77                      		lsL TOTAL
0008e4 cfef                      		rjmp contimprtot
                                 FinImprimo:
0008e5 9508                      ret
>>>>>>> Pruebas-finales
                                 
                                 
                                 
                                 
                                 	.org 0x200
                                  
                                 T1_B_ISR:
000200 e061                      	ldi CONTROL, 0x01
000201 9840                      	cbi portc,0
000202 9841                      	cbi portc,1
000203 9842                      	cbi portc,2
000204 e000                      	ldi TEMP,0b00000000	; STOP TIMER         0b00001001  ; CTC INTERNAL clock
000205 9300 0081                 	sts TCCR1B,TEMP


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :   0 z  :   3 r0 :   2 r1 :   1 r2 :   3 r3 :   7 r4 :  10 
<<<<<<< HEAD
r5 :   0 r6 :   5 r7 :   0 r8 :   0 r9 :   0 r10:   3 r11:   3 r12:   5 
r13:   0 r14:   0 r15:   0 r16: 256 r17:  38 r18:  21 r19:   9 r20:   7 
r21:   7 r22:   5 r23:   5 r24:  11 r25:   3 r26:   0 r27:   0 r28:   0 
=======
r5 :   0 r6 :   7 r7 :   0 r8 :   0 r9 :   0 r10:   2 r11:   2 r12:   4 
r13:   0 r14:   0 r15:   0 r16: 276 r17:  38 r18:  20 r19:  29 r20:   7 
r21:  10 r22:   5 r23:   6 r24:  12 r25:   3 r26:   0 r27:   0 r28:   0 
>>>>>>> Pruebas-finales
r29:   0 r30:  23 r31:  23 
Registers used: 22 out of 35 (62.9%)

"ATmega328P" instruction use summary:
<<<<<<< HEAD
.lds  :   0 .sts  :   0 adc   :   1 add   :   2 adiw  :   0 and   :   0 
andi  :  11 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   2 brcs  :   0 break :   0 breq  :   3 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  15 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  13 cbi   :   6 cbr   :   2 
clc   :   0 clh   :   0 cli   :   3 cln   :   0 clr   :   2 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :   6 cpse  :   0 dec   :  17 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   2 inc   :   7 jmp   :   3 
ld    :   0 ldd   :   0 ldi   : 138 lds   :  15 lpm   :   3 lsl   :   6 
lsr   :   0 mov   :  24 movw  :   1 mul   :   3 muls  :   0 mulsu :   0 
neg   :   0 nop   :   1 or    :   4 ori   :   5 out   :  11 pop   :  28 
push  :  31 rcall :  97 ret   :  50 reti  :   1 rjmp  :  23 rol   :   0 
ror   :   0 sbc   :   1 sbci  :   0 sbi   :   6 sbic  :   3 sbis  :   0 
sbiw  :   0 sbr   :   3 sbrc  :   4 sbrs  :   6 sec   :   0 seh   :   0 
sei   :   2 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :  70 
sub   :   2 subi  :   0 swap  :   4 tst   :   0 wdr   :   0 
=======
.lds  :   0 .sts  :   0 adc   :   1 add   :   3 adiw  :   0 and   :   0 
andi  :  12 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   2 brcs  :   0 break :   0 breq  :  14 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  17 brpl  :   0 brsh  :   3 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  12 cbi   :   3 cbr   :   2 
clc   :   0 clh   :   0 cli   :   2 cln   :   0 clr   :   2 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :  22 cpse  :   0 dec   :  17 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :   7 jmp   :   3 
ld    :   0 ldd   :   0 ldi   : 148 lds   :  16 lpm   :   3 lsl   :   6 
lsr   :   0 mov   :  22 movw  :   1 mul   :   3 muls  :   0 mulsu :   0 
neg   :   0 nop   :   1 or    :   2 ori   :   6 out   :   9 pop   :  31 
push  :  34 rcall : 137 ret   :  49 reti  :   1 rjmp  :  34 rol   :   0 
ror   :   0 sbc   :   1 sbci  :   0 sbi   :   6 sbic  :   3 sbis  :   0 
sbiw  :   0 sbr   :   3 sbrc  :   5 sbrs  :   6 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :  83 
sub   :   4 subi  :   0 swap  :   4 tst   :   0 wdr   :   0 
>>>>>>> Pruebas-finales
Instructions used: 43 out of 113 (38.1%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
<<<<<<< HEAD
[.cseg] 0x000000 0x0010e2   1476    308   1784   32768   5.4%
=======
[.cseg] 0x000000 0x0011cc   1710    308   2018   32768   6.2%
>>>>>>> Pruebas-finales
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 3 warnings
