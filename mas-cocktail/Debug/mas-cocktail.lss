
AVRASM ver. 2.2.6  D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm Sat Nov 26 20:41:17 2016

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.0.106\avrasm\inc\m328pdef.inc'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(250): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\kb_driver.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(251): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\disp_driver.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(252): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\delay.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(253): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(254): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\math.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(255): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\ultrasound_driver.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(256): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\caudal_driver.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.0.106\avrasm\inc\m328pdef.inc'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(250): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\kb_driver.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(251): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\disp_driver.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(252): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\delay.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(253): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(254): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\math.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(255): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\ultrasound_driver.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(256): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\caudal_driver.asm'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; mas-cocktail.asm
                                 ;
                                 ; Created: 01-Oct-16 1:40:18 PM
                                 ; Author : galca
                                 ;
                                 ; 
                                 
                                  .equ F_CPU = 18432000
                                  .equ SHIFTDELAY = 160
                                 
                                  .def TEMP = R16
                                  .DEF TEMP2 = R18
                                  .DEF TEMP3 = R6
                                  
                                  .def PRGFLAGS = R21
                                 
                                  ;----------------------------------------------------------
                                  ;----------------------------------------------------------
                                  ;----------------PARÁMETROS DE LAS BEBIDAS-----------------
                                  ;----------------------------------------------------------
                                  ;----------------------------------------------------------
                                 
                                  .EQU FERNET = 1
                                  .EQU WHISKY = 2
                                  .EQU COCA = 3
                                  .EQU PERC = 0
                                  .EQU PERC1 = $1400
                                  .EQU PERC2 = $1401
                                  .EQU DRINK1 = $1402
                                  .EQU DRINK2 = $1403
                                  .EQU CORDO = 1
                                  .EQU MEDIUM = 2
                                  .EQU INFANT = 3
                                 
                                 
                                 .CSEG
000000 c4ff                      		RJMP		BEGIN
                                 
                                 .org 0x0016
000016 940c 0200                 		jmp			T1_B_ISR
                                 
                                 
                                 .ORG	$500
                                 BEGIN:
                                 
                                 	
000500 e604                      	ldi temp,100
000501 e520                      	ldi temp2,80
                                 	
000502 9f02                      	mul temp,temp2
000503 e000                      	ldi temp,0
000504 2eb0                      	mov denominadorh,temp
000505 e708                      	ldi temp,MaxPulsos
000506 2ea0                      	mov denominadorL,temp
000507 940e 085f                 	call division ;En cociente tenemos la cantidad de pulsos 
                                 
000509 92cf                      	PUSH cociente
00050a d338                      	RCALL bin_to_bcd
00050b 910f                      	POP TEMP
00050c d32c                      	RCALL pack_bcd
00050d d31b                      	rcall bcd_to_ascii
00050e 910f                      	pop temp
00050f 912f                      	pop temp2
000510 2f82                      	mov dispvar,temp2
000511 d17e                      	rcall DisplayChar
000512 2f80                      	mov dispvar,temp
000513 d17c                      	rcall DisplayChar
                                 
                                 
000514 ef0f                      		LDI	R16, low(RAMEND)
000515 bf0d                      		OUT	SPL, R16
000516 e008                      		LDI	R16, high(RAMEND)
000517 bf0e                      		OUT	SPH, R16
000518 e000                      		ldi temp, 0x00
000519 b904                      		out ddrb,temp
00051a b90a                      		out ddrd,temp
00051b 9a38                      		sbi ddrc,0
00051c 9a39                      		sbi ddrc,1
00051d 9a3a                      		sbi ddrc,2
00051e 94f8                      		cli
00051f d09a                      		RCALL		KBINIT			; inicialización del teclado
000520 d0cd                      		RCALL		InicI2C			; esta funcion inicializa el display, si o si tiene que ir. no hace falta modificarle nada
000521 d0ef                      		RCALL		InicDisplay		; lo mismo que la anterior
000522 d343                      		RCALL		InitUsart		; inicialización del protocolo USART para el sensor de distancia
                                  MAIN:	
000523 d228                      		RCALL		DisplayWelcome					; muestra mensaje de bienvendia
                                 		;RCALL		retardo3s						; durante 3 segundos
000524 d1b2                      		RCALL		DisplayClear					; borra el display
000525 d22e                      		RCALL		DisplayMenu0					; empieza el programa en si
000526 ea00                      		LDI			TEMP,SHIFTDELAY					; settea el contador de velocidad de shifteo del display
                                 MenuModo:
000527 d1af                      		RCALL		DisplayClear
000528 d22b                      		RCALL		DisplayMenu0
000529 d0c2                      		RCALL		CLEARKEY
                                 getk0:
00052a d1d2                      		RCALL		Shift
00052b d095                      		RCALL		GETKEY
00052c 3031                      		CPI			KEY,0x01
00052d f019                      		BREQ		MenuTrago
00052e 3032                      		CPI			KEY,0x02
00052f f7d1                      		BRNE		getk0
000530 c041                      		RJMP		MenuBebida
                                 MenuTrago:
000531 d1a5                      		RCALL		DisplayClear
000532 d225                      		RCALL		DisplayMenu1a
000533 d0b8                      		RCALL		CLEARKEY
000534 d212                      		RCALL		retardo1s
                                 getk1a:
000535 d1c7                      		RCALL		Shift
000536 d08a                      		RCALL		GETKEY
000537 3030                      		CPI			KEY,0x00
000538 f3e1                      		BREQ		getk1a
000539 3034                      		CPI			KEY,0x04
00053a f7d0                      		BRSH		getk1a
00053b 3033                      		CPI			KEY,0x03
00053c f031                      		BREQ		PureCoke
00053d 9330 1402                 		STS			DRINK1,KEY
00053f e003                      		LDI			TEMP,COCA
000540 9300 1403                 		STS			DRINK2,TEMP
000542 c00c                      		RJMP		MenuPotencia
                                 PureCoke:
000543 e003                      		LDI			TEMP,COCA
000544 9300 1402                 		STS			DRINK1,TEMP
000546 9300 1403                 		STS			DRINK2,TEMP
000548 e604                      		LDI			TEMP,100
000549 9300 1400                 		STS			PERC1,TEMP
00054b e000                      		LDI			TEMP,00
00054c 9300 1401                 		STS			PERC2,TEMP
00054e c057                      		RJMP		END
                                 			
                                 MenuPotencia:
00054f d187                      		RCALL		DisplayClear
000550 d20b                      		RCALL		DisplayMenu2a
000551 d09a                      		RCALL		CLEARKEY
000552 d1f4                      		RCALL		retardo1s
                                 getk2a:		
000553 d1a9                      		RCALL		Shift
000554 d06c                      		RCALL		GETKEY
000555 3030                      		CPI			KEY,0x00
000556 f3e1                      		BREQ		getk2a
000557 3034                      		CPI			KEY,0x04
000558 f7d0                      		BRSH		getk2a
000559 3031                      		CPI			KEY,0x01
00055a f049                      		BREQ		PotCordobes
00055b 3032                      		CPI			KEY,0x02
00055c f071                      		BREQ		PotMediA
00055d e109                      		LDI			TEMP,25
00055e 9300 1400                 		STS			PERC1,TEMP
000560 e40b                      		LDI			TEMP,75
000561 9300 1401                 		STS			PERC2,TEMP
000563 c042                      		RJMP		END
                                 PotCordobes:
000564 e40b                      		LDI			TEMP,75
000565 9300 1400                 		STS			PERC1,TEMP
000567 e109                      		LDI			TEMP,25
000568 9300 1401                 		STS			PERC2,TEMP
00056a c03b                      		RJMP		END
                                 PotMedia:
00056b e302                      		LDI			TEMP,50
00056c 9300 1400                 		STS			PERC1,TEMP
00056e e302                      		LDI			TEMP,50
00056f 9300 1401                 		STS			PERC2,TEMP
000571 c034                      		RJMP		END
                                 MenuBebida:
000572 d164                      		RCALL		DisplayClear
000573 d1ec                      		RCALL		DisplayMenu1b
000574 d077                      		RCALL		CLEARKEY
000575 d1d1                      		RCALL		retardo1s
                                 getk1b:		
000576 d186                      		RCALL		Shift
000577 d049                      		RCALL		GETKEY
000578 3030                      		CPI			KEY,0x00
000579 f3e1                      		BREQ		getk1b
00057a 3033                      		CPI			KEY,0x03
00057b f7d0                      		BRSH		getk1b
00057c 9330 1402                 		STS			DRINK1,KEY
00057e e003                      		LDI			TEMP,COCA
00057f 9300 1403                 		STS			DRINK2,TEMP
                                 
                                 MenuPorc:
000581 d155                      		RCALL		DisplayClear
000582 d1e1                      		RCALL		DisplayMenu2b
000583 d068                      		RCALL		CLEARKEY
000584 d1c2                      		RCALL		retardo1s
                                 getk2b:	
000585 d066                      		RCALL		CLEARKEY	
000586 d03a                      		RCALL		GETKEY
000587 3030                      		CPI			KEY,0x00
000588 f3e1                      		BREQ		getk2b
000589 303b                      		CPI			KEY,11
00058a f409                      		BRNE		KeyNotZero
00058b e030                      		LDI			KEY,0x00
                                 KeyNotZero:
00058c e300                      		LDI			TEMP,48
00058d 0f30                      		ADD			KEY,TEMP
00058e 2f83                      		MOV			DISPVAR,KEY
00058f e300                      		LDI			TEMP,48
000590 1b30                      		SUB			KEY,TEMP
000591 d0fe                      		RCALL		DisplayChar
000592 d1b4                      		RCALL		retardo1s
000593 933f                      		PUSH		KEY
000594 fd50                      		SBRC		PRGFLAGS,PERC
000595 c002                      		RJMP		getPercentage
000596 6051                      		ORI			PRGFLAGS,(1<<PERC)
000597 cfed                      		RJMP		getk2b
                                 
                                 getPercentage:
000598 7f5e                      		ANDI		PRGFLAGS,(0xFE<<PERC)
000599 912f                      		POP			TEMP2
00059a 906f                      		POP			TEMP3
00059b 932f                      		PUSH		TEMP2
00059c 926f                      		PUSH		TEMP3
00059d d26c                      		RCALL		keyb_to_bcd
00059e d278                      		RCALL		bcd_to_bin
00059f 912f                      		POP			TEMP2
0005a0 9320 1400                 		STS			PERC1,TEMP2
0005a2 e604                      		LDI			TEMP,100
0005a3 1b02                      		SUB			TEMP,TEMP2
0005a4 9300 1401                 		STS			PERC2,TEMP
                                 
                                 		
                                 
                                 		
                                 
                                 
                                 
                                 END:	
                                 		
                                 		
0005a6 d130                      		RCALL		DisplayClear
0005a7 d1c0                      		RCALL		DisplayWait
0005a8 d2e5                      		RCALL		CreoTrago
0005a9 d19d                      		rcall		retardo1s
0005aa d12c                      		RCALL		DisplayClear
0005ab d1c0                      		RCALL		DisplayDone
0005ac d195                      		rcall		retardo3s
                                 		
0005ad cf75                      		rjmp		MAIN
                                 ;---------------------------PRueba----
0005ae e500                      		ldi temp, 80
0005af 9300 1400                 		sts perc1,temp
0005b1 e002                      		ldi temp,2
0005b2 9300 1402                 		sts drink1,temp
0005b4 e104                      		ldi temp, 20
0005b5 9300 1401                 		sts perc2,temp
0005b7 e001                      		ldi temp,1
0005b8 9300 1403                 		sts drink2,temp
                                 
                                  .include "kb_driver.asm"
                                 
                                  * kb_driver.asm
                                  *
                                  *  Created: 25-Oct-16 10:23:47 PM
                                  *   Author: galca
                                  */ 
                                 
                                 .EQU COL1 = PINB0
                                 .EQU COL2 = PINB1
                                 .EQU COL3 = PINB2
                                 
                                 .EQU ROW1 = PINB3
                                 .EQU ROW2 = PINC3
                                 .EQU ROW3 = PINB5
                                 .EQU ROW4 = PINB4
                                 
                                 .EQU ROW1VAL = 1
                                 .EQU ROW2VAL = 4
                                 .EQU ROW3VAL = 7
                                 .EQU ROW4VAL = 10
                                 
                                 .EQU KBPORT = PORTB
                                 .EQU PRESSED = 7
                                 .EQU KBCONF = 0xF8
                                 .EQU KBPULLUPS = 0x07
                                  
                                 
                                 .DEF KBTEMP = R17
                                 .DEF KEY = R19
                                  
                                 .CSEG
                                 
                                 KBINIT:
0005ba 931f                      		PUSH		KBTEMP
0005bb ef18                       		LDI			KBTEMP,KBCONF		;cols como input, filas como output
0005bc b914                      		OUT			DDRB,KBTEMP
                                 
0005bd e017                      		LDI			KBTEMP,KBPULLUPS		;habilitar pullups en el input
0005be b915                      		OUT			KBPORT,KBTEMP
0005bf 911f                      		POP			KBTEMP	
0005c0 9508                      		RET
                                 
                                  GETKEY:
                                 												;Esta sección lee la fila 1
0005c1 e031                      		LDI			KEY,ROW1VAL					;carga el valor de la primera tecla de la fila 1 en "key"
0005c2 ef17                      		LDI			KBTEMP,~(1<<ROW1)			;"apaga" fila 1 (carga un byte de unos con un único cero en la posición "ROW1")
0005c3 b915                      		OUT			KBPORT,KBTEMP				;y cargando el valor al puerto usado por el teclado
0005c4 d00d                      		RCALL		READ_COL					;se pasa a leer las columnas, esperando encontrar coincidencias
                                 		
                                  
0005c5 fd57                      		SBRC		PRGFLAGS,PRESSED				;si se registró una tecla presionada
0005c6 c00a                      		RJMP		DONE						;salir de la subrutina
                                  
                                 												;Esta sección lee la fila 2
                                 /*		LDI			KEY,ROW2VAL					;carga el valor de la primera tecla de la fila 2 en "key"
                                 		IN			KBTEMP,PORTC
                                 		ANDI		KBTEMP,(1<<PINC3)			;"apaga" fila 2 (carga un byte de unos con un único cero en la posición "ROW2")
                                 		OUT			PORTC,KBTEMP				;y cargando el valor al puerto usado por el teclado
                                 		RCALL		READ_COL					;se pasa a leer las columnas, esperando encontrar coincidencias
                                  
                                 		SBRC		PRGFLAGS,PRESSED				;si se registró una tecla presionada
                                 		RJMP		DONE						;salir de la subrutina*/
                                 												
                                 												;Esta sección lee la fila 3
0005c7 e037                      		LDI			KEY,ROW3VAL					;carga el valor de la primera tecla de la fila 3 en "key"
0005c8 ed1f                      		LDI			KBTEMP,~(1<<ROW3)			;"apaga" fila 3 (carga un byte de unos con un único cero en la posición "ROW3")
0005c9 b915                      		OUT			KBPORT,KBTEMP				;y cargando el valor al puerto usado por el teclado
0005ca d007                      		RCALL		READ_COL					;se pasa a leer las columnas, esperando encontrar coincidencias
                                 
0005cb fd57                      		SBRC		PRGFLAGS,PRESSED				;si se registró una tecla presionada
0005cc c004                      		RJMP		DONE						;salir de la subrutina
                                  
                                 												;Esta sección lee la fila 4
0005cd e03a                      		LDI			KEY,ROW4VAL					;carga el valor de la primera tecla de la fila 4 en "key"
0005ce ee1f                      		LDI			KBTEMP,~(1<<ROW4)			;"apaga" fila 4 (carga un byte de unos con un único cero en la posición "ROW4")
0005cf b915                      		OUT			KBPORT,KBTEMP				;y cargando el valor al puerto usado por el teclado
0005d0 d001                      		RCALL		READ_COL					;se pasa a leer las columnas, esperando encontrar coincidencias*/
                                  
                                 DONE:					
0005d1 9508                      		RET
                                  
                                 READ_COL:
0005d2 d015                      		RCALL		SETTLE
0005d3 775f                      		CBR			PRGFLAGS, (1<<PRESSED)		;estado = no presionado
                                  
0005d4 9918                      		SBIC		PINB, COL1					;lee columna 1
0005d5 c002                      		RJMP		NEXTCOL						;si no, pasar a columna 2
0005d6 6850                      		SBR			PRGFLAGS, (1<<PRESSED)		;estado = presionado
0005d7 9508                      		RET										;devolver el valor de la primer columna de la fila
                                 NEXTCOL:
0005d8 d00f                      		RCALL		SETTLE
0005d9 9919                      		SBIC		PINB,COL2					;lee columna 2
0005da c003                      		RJMP		NEXTCOL1					;si no, pasar a columna 3
0005db 9533                      		INC			KEY							
0005dc 6850                      		SBR			PRGFLAGS,(1<<PRESSED)		;estado = presionado
0005dd 9508                      		RET										;devolver el valor de la segunda columna de la fila
                                 NEXTCOL1:
0005de d009                      		RCALL		SETTLE
0005df 991a                      		SBIC		PINB,COL3					;lee columna 3
0005e0 c004                      		RJMP		EXIT						;si no, termina
0005e1 9533                      		INC			KEY							;estado = presionado
0005e2 9533                      		INC			KEY
0005e3 6850                      		SBR			PRGFLAGS, (1<<PRESSED)		;estado=presionado
0005e4 9508                      		RET										;devolver el valor de la tercer columna de la fila
                                 EXIT:
0005e5 2733                      		CLR			KEY							;vacía el valor de la tecla
0005e6 775f                      		CBR			PRGFLAGS, (1<<PRESSED)		;no se presionó ninguna tecla
0005e7 9508                      		RET										
                                 SETTLE:
0005e8 ef1f                      		LDI			KBTEMP,255
0005e9 951a                      TAGAIN: DEC			KBTEMP
0005ea f7f1                      		BRNE		TAGAIN
0005eb 9508                      		RET 
                                 
                                 CLEARKEY:
0005ec e030                      		LDI			KEY,0X00
                                  .include "disp_driver.asm"
0005ed 9508                      
                                  * disp_driver.asm
                                  *
                                  *  Created: 01-Nov-16 5:01:30 PM
                                  *   Author: galca
                                  */ 
                                  ;
                                 ; display.asm
                                 ;
                                 ; Created: 23/9/2016 2:16:36 p. m.
                                 ; Author : waral
                                 ;
                                 
                                 	.def CONTADOR = R20
                                 	.def DISPVAR = R24
                                 
                                 	.equ TWI_RATE = 0xF8
                                 	.equ STARTi = 0x08
                                 	.equ MT_SLA_ACK = 0x20
                                 	.equ MT_DATA_ACK= 0x28
                                 	.equ SL_ADD = 0b01001110
                                 
                                 
                                 ;para usar el i2c no hay que inicializar nada de los puertos... 
                                 ;lo que yo puse fue para encender un led que me diga que esta todo ok
                                 
                                 
                                 ;---------------------------------------------------------------------
                                 ;---------------------------------------------------------------------
                                 ;-----------------------------Fin start-------------------------------
                                 ;---------------------------------------------------------------------
                                 ;---------------------------------------------------------------------
                                 
                                 
                                 
                                 ;----------------------------SUBRUTINAS-------------------------------
                                 
                                 ;_____________________________________________________
                                 ;;;;;;;;;;;;;;;;;DISPLAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;|
                                 ;_____________________________________________________|
                                 
                                 ;------- inicializacion i2c-------
                                 InicI2C:	
                                 	
0005ee ef08                      	ldi TEMP, TWI_RATE
0005ef 9300 00b8                 	sts TWBR,TEMP
                                 
0005f1 ea04                      	ldi TEMP, (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)   
0005f2 9300 00bc                 	sts TWCR, TEMP								;envia condicion de start
                                 
                                 wait1:
0005f4 9100 00bc                 	lds TEMP,TWCR
0005f6 ff07                      	sbrs TEMP,TWINT								;espera flag de start ok
0005f7 cffc                      	rjmp wait1
                                 
0005f8 9100 00b9                 	lds TEMP,TWSR
0005fa 7f08                      	andi TEMP, 0xF8								;si el estado en el registro TWI es distinto de START se va a error
0005fb 3008                      	cpi TEMP, STARTi
0005fc f409                      	brne error_A
0005fd c001                      	rjmp continuo
                                 error_A:
0005fe d0d4                      	RCALL ERROR1
                                 	
                                 continuo:
0005ff e40e                      	ldi TEMP, SL_ADD								
000600 9300 00bb                 	sts TWDR, TEMP								;Carga direccion del esclavo en el registro TWDR, limpia bit TWINT para empezar la transmision de la direccion
000602 e804                      	ldi TEMP, (1<<TWINT) | (1<<TWEN)
000603 9300 00bc                 	sts TWCR, TEMP								;envio direccion del esclavo
                                 
                                 wait2:
000605 9100 00bc                 	lds TEMP,TWCR
000607 ff07                      	sbrs TEMP,TWINT								;espera seteo de TWINT para confirmar transmision ok
000608 cffc                      	rjmp wait2
                                 
000609 9100 00b9                 	lds TEMP,TWSR
00060b 7f08                      	andi TEMP, 0xF8								;chequea el registro TWI, salta a error si no se transmitio bien
00060c 3200                      	cpi TEMP, MT_SLA_ACK
00060d f009                      	breq error_B
00060e c001                      	rjmp continuo2
                                 error_B:
00060f d0c3                      	RCALL ERROR1
                                 continuo2:
000610 9508                      	ret
                                 	
                                 ;----------------------------------Fin inicializacion i2c----------------------------------------;
                                 
                                 ;.................................incialización display, envio de a 4bits........................;
                                 InicDisplay:	
                                 	
000611 d11d                      	RCALL retardo50ms
                                 	
000612 e300                      	ldi TEMP, 0x30
000613 e310                      	ldi r17,0x30
000614 9300 00bb                 	sts TWDR, TEMP								; Carga DATA en twdr, limpia twint para empezar la transmision
000616 e804                      	ldi TEMP, (1<<TWINT) |(1<<TWEN)
000617 9300 00bc                 	sts TWCR, TEMP								
000619 d06c                      	RCALL WaitDataI2c
                                 
00061a d0a7                      	RCALL DisplayEnable
                                 
00061b d121                      	RCALL retardo5ms
                                 
00061c d0a5                      	RCALL DisplayEnable
                                 
00061d d10a                      	RCALL retardo1ms
                                 												; todo esto te lo pide que hagas la hoja de datos del display
00061e d0a3                      	RCALL DisplayEnable
                                 
00061f d11d                      	RCALL retardo5ms
                                 
000620 e208                      	ldi r16, 0x28								;set 4bit mode
000621 e218                      	ldi r17,0x28
000622 9300 00bb                 	sts TWDR, r16								
000624 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
000625 9300 00bc                 	sts TWCR, r16								
000627 d05e                      	RCALL WaitDataI2c
                                 	
000628 d099                      	RCALL DisplayEnable
                                 
000629 d0fe                      	RCALL retardo1ms
                                 
00062a e208                      	ldi TEMP,0x28								;0x28_H
00062b e218                      	ldi r17,0x28
00062c 9300 00bb                 	sts TWDR, TEMP								
00062e e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
00062f 9300 00bc                 	sts TWCR, TEMP								
000631 d054                      	RCALL WaitDataI2c
                                 
000632 d08f                      	RCALL DisplayEnable
                                 
000633 e808                      	ldi TEMP,0x88								;0x28_L
000634 e818                      	ldi r17,0x88
000635 9300 00bb                 	sts TWDR, r16								
000637 e804                      	ldi TEMP, (1<<TWINT) |(1<<TWEN)
000638 9300 00bc                 	sts TWCR, TEMP								
00063a d04b                      	RCALL WaitDataI2c
                                 
00063b d086                      	RCALL DisplayEnable
                                 
00063c e008                      	ldi TEMP, 0x08								;0x08_H
00063d e018                      	ldi r17,0x08
00063e 9300 00bb                 	sts TWDR, TEMP								
000640 e804                      	ldi TEMP, (1<<TWINT) |(1<<TWEN)
000641 9300 00bc                 	sts TWCR, TEMP								
000643 d042                      	RCALL WaitDataI2c
                                 
000644 d07d                      	RCALL DisplayEnable							
                                 
000645 e808                      	ldi TEMP,0x88								;0x08_L				
000646 e818                      	ldi r17,0x88
                                 	
000647 9300 00bb                 	sts TWDR, TEMP								
000649 e804                      	ldi TEMP, (1<<TWINT) |(1<<TWEN)
00064a 9300 00bc                 	sts TWCR, TEMP								
00064c d039                      	RCALL WaitDataI2c
                                 
00064d d074                      	RCALL DisplayEnable
                                 
00064e e008                      	ldi r16,0x08								;0x01_H	
00064f e018                      	ldi r17,0x08
000650 9300 00bb                 	sts TWDR, r16								
000652 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
000653 9300 00bc                 	sts TWCR, r16								
000655 d030                      	RCALL WaitDataI2c
                                 
000656 d06b                      	RCALL DisplayEnable
                                 
000657 e108                      	ldi r16,0x18								;0x01_L	
000658 e118                      	ldi r17,0x18
                                 		
000659 9300 00bb                 	sts TWDR, r16								
00065b e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
00065c 9300 00bc                 	sts TWCR, r16								
00065e d027                      	RCALL WaitDataI2c
                                 
00065f d062                      	RCALL DisplayEnable
                                 
000660 e008                      	ldi r16,0x08								;0x0F_H		
000661 e018                      	ldi r17,0x08
                                 
000662 9300 00bb                 	sts TWDR, r16								
000664 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
000665 9300 00bc                 	sts TWCR, r16								
000667 d01e                      	RCALL WaitDataI2c
                                 
000668 d059                      	RCALL DisplayEnable
                                 	
000669 ef08                      	ldi r16,0xF8								;0x0F_L	
00066a ef18                      	ldi r17,0xF8
00066b 9300 00bb                 	sts TWDR, r16								
00066d e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
00066e 9300 00bc                 	sts TWCR, r16								
000670 d015                      	RCALL WaitDataI2c
                                 
000671 d050                      	RCALL DisplayEnable
                                 
000672 e008                      	ldi r16,0x08							;0x06_H
000673 e018                      	ldi r17,0x08
000674 9300 00bb                 	sts TWDR, r16								
000676 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
000677 9300 00bc                 	sts TWCR, r16
000679 d00c                      	RCALL WaitDataI2c
                                 
00067a d047                      	RCALL DisplayEnable
                                 
00067b d0c1                      	RCALL retardo5ms
                                 	
00067c e608                      	ldi r16, 0x68							;0x06_L
00067d e618                      	ldi r17, 0x68
00067e 9300 00bb                 	sts TWDR, r16								
000680 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
000681 9300 00bc                 	sts TWCR, r16
000683 d002                      	RCALL WaitDataI2c
                                 
000684 d03d                      	RCALL DisplayEnable
                                 
000685 9508                      	ret
                                 
                                 ;-----------Fin Inicialización display--------------
                                 
                                 ;--DISPLAY : DATA I2C OK---;
                                 
                                 WaitDataI2c:
                                 
                                 wait_twint:
000686 9100 00bc                 	lds r16,TWCR
000688 ff07                      	sbrs r16,TWINT								; Espera TWINT para confirmar que se envió ok
000689 cffc                      	rjmp wait_twint
                                 
00068a 9100 00b9                 	lds r16,TWSR
00068c 7f08                      	andi r16, 0xF8
00068d 3208                      	cpi r16, MT_DATA_ACK
00068e f591                      	brne error_data
00068f 9508                      	ret
                                 
                                 ;------DISPLAY : CHAR------;                  Con esta Funcion le enviamos un CHAR al display
                                 DisplayChar:
                                 
000690 2f08                      	mov r16,DISPVAR							  ;En DISPVAR tiene que estar el CHAR
000691 7f00                      	andi r16,0xF0							  ;Envio DISPVAR_H
000692 6009                      	ori r16,0x09
000693 2f10                      	mov r17,r16
000694 9300 00bb                 	sts TWDR, r16								; Carga DATA en twdr, limpia twint para empezar la transmision
000696 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
000697 9300 00bc                 	sts TWCR, r16
                                 
000699 dfec                      	RCALL WaitDataI2c
00069a d027                      	RCALL DisplayEnable
                                 
00069b 2f08                      	mov r16,DISPVAR							  ;Envio DISPVAR_L
00069c 0f00                      	lsl r16
00069d 0f00                      	lsl r16
00069e 0f00                      	lsl r16
00069f 0f00                      	lsl r16
0006a0 6009                      	ori r16,0x09
0006a1 2f10                      	mov r17,r16
0006a2 9300 00bb                 	sts TWDR, r16								
0006a4 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
0006a5 9300 00bc                 	sts TWCR, r16
0006a7 dfde                      	RCALL WaitDataI2c
                                 
0006a8 d019                      	RCALL DisplayEnable
                                 
0006a9 9508                      	ret
                                 
                                 ;------Display :ENTER----------
                                 
                                 DisplayEnter:
                                 
0006aa ec08                      	ldi r16,0xC8								;0x08_H
0006ab ec18                      	ldi r17,0xC8
0006ac 9300 00bb                 	sts TWDR, r16								
0006ae e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
0006af 9300 00bc                 	sts TWCR, r16								
0006b1 dfd4                      	RCALL WaitDataI2c
                                 
0006b2 d00f                      	RCALL DisplayEnable							
                                 
0006b3 e008                      	ldi r16,0x08								;0x08_L				
0006b4 e018                      	ldi r17,0x08
                                 	
0006b5 9300 00bb                 	sts TWDR, r16								
0006b7 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
0006b8 9300 00bc                 	sts TWCR, r16								
0006ba dfcb                      	RCALL WaitDataI2c
                                 
0006bb d006                      	RCALL DisplayEnable
0006bc 9508                      ret
                                 
                                 
                                 
                                 ;----DISPLAY : STOP------
                                 
                                 I2CStop:
0006bd e904                      	ldi r16, (1<<TWINT)|(1<<TWEN)| (1<<TWSTO)	;Transmite bit de STOP
0006be 9300 00bc                 	sts TWCR, r16
0006c0 9508                      			ret
                                 
                                 error_data:
0006c1 d011                      	RCALL ERROR1
                                 
                                 
                                 DisplayEnable:
0006c2 d065                      	RCALL retardo1ms
                                 	
0006c3 6014                      	ori r17, 0x04
0006c4 9310 00bb                 	sts TWDR, r17								
0006c6 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
0006c7 9300 00bc                 	sts TWCR, r16
0006c9 dfbc                      	RCALL WaitDataI2c
                                 ;	RCALL retardo1ms
                                 
0006ca 7f1b                      	andi r17, 0b11111011
0006cb 9310 00bb                 	sts TWDR, r17								
0006cd e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
0006ce 9300 00bc                 	sts TWCR, r16
0006d0 dfb5                      	RCALL WaitDataI2c
                                 
                                 	;RCALL retardo1ms
0006d1 9508                      	ret
                                 
                                 
                                 ;-----------Error----------------------------------
                                 
                                 ERROR:
                                 	
                                 	;ldi R16,0x02
                                 	;out PORTB,R16
0006d2 cfff                      	rjmp error
                                 
                                 ERROR1:
                                 	
                                 	;ldi R16,0x02
                                 	;out PORTB,R16
0006d3 e904                      	ldi r16, (1<<TWINT)|(1<<TWEN)| (1<<TWSTO)	;Transmite bit de STOP
0006d4 9300 00bc                 	sts TWCR, r16
0006d6 cffb                      	rjmp error
                                 
                                 ;------Display :CLEAR----------
                                 DisplayClear:
0006d7 e018                      	ldi r17, 0x08
0006d8 e008                      	ldi	r16, 0x08
0006d9 9300 00bb                 	sts TWDR, r16								; Carga DATA en twdr, limpia twint para empezar la transmision
0006db e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
0006dc 9300 00bc                 	sts TWCR, r16
                                 
0006de dfa7                      	RCALL WaitDataI2c
0006df dfe2                      	RCALL DisplayEnable
                                 
0006e0 e118                      	ldi r17, 0x18
0006e1 e108                      	ldi r16, 0x18
0006e2 9300 00bb                 	sts TWDR, r16								
0006e4 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
0006e5 9300 00bc                 	sts TWCR, r16
0006e7 df9e                      	RCALL WaitDataI2c
                                 
0006e8 dfd9                      	RCALL DisplayEnable
                                 
0006e9 9508                      	ret
                                 
                                 DisplayToggleShift:
0006ea e118                      	ldi r17, 0x18
0006eb e108                      	ldi	r16, 0x18
0006ec 9300 00bb                 	sts TWDR, r16								; Carga DATA en twdr, limpia twint para empezar la transmision
0006ee e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
0006ef 9300 00bc                 	sts TWCR, r16
                                 
0006f1 df94                      	RCALL WaitDataI2c
0006f2 dfcf                      	RCALL DisplayEnable
                                 
0006f3 e818                      	ldi r17, 0x88
0006f4 e808                      	ldi r16, 0x88
0006f5 9300 00bb                 	sts TWDR, r16								
0006f7 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
0006f8 9300 00bc                 	sts TWCR, r16
0006fa df8b                      	RCALL WaitDataI2c
                                 
0006fb dfc6                      	RCALL DisplayEnable
                                 
0006fc 9508                      	ret
                                 
                                 Shift:
0006fd 950a                      		DEC			TEMP
0006fe f411                      		BRNE		SkipShift0
0006ff dfea                      		RCALL		DisplayToggleShift
000700 ea00                      		LDI			TEMP,SHIFTDELAY		
                                 SkipShift0:
000701 d026                      		RCALL		retardo1ms
                                 
000702 9508                      		ret
                                 
                                 DisplayString:
000703 93ff                      	PUSH ZH
000704 93ef                      	PUSH ZL
000705 e040                      	LDI CONTADOR,0x00
                                 
                                 DisplayString_cont:
000706 9543                      	INC CONTADOR	
000707 9185                      	LPM DISPVAR, Z+
000708 3080                      	CPI DISPVAR,0x00
000709 f7e1                      	BRNE DisplayString_cont
00070a 9543                      	INC CONTADOR
00070b 9185                      	LPM DISPVAR, Z+
00070c 3080                      	CPI DISPVAR,0x00
00070d f7c1                      	BRNE DisplayString_cont
00070e 954a                      	DEC CONTADOR
00070f 954a                      	DEC CONTADOR
000710 91ef                      	POP ZL
000711 91ff                      	POP ZH
                                 
                                 DisplayString_next:
000712 9185                      	lpm DISPVAR, Z+
000713 3080                      	CPI DISPVAR,0x00
000714 f419                      	BRNE DisplayString_nextChar
000715 df94                      	RCALL DisplayEnter
000716 954a                      	DEC CONTADOR
000717 cffa                      	RJMP DisplayString_next
                                 DisplayString_nextChar:
000718 df77                      	RCALL DisplayChar
                                 
000719 954a                      	dec  CONTADOR
00071a f7b9                      	brne DisplayString_next
                                 	
00071b 9508                      	ret
                                 
                                 
                                 
                                 DispNum:
                                 	
                                 
00071c e300                      	ldi TEMP, 48
00071d 0f30                      	add KEY,TEMP
                                 	
                                 	
                                 DispNum_cont:
00071e 2f80                      	mov DISPVAR,TEMP
00071f df70                      	RCALL DisplayChar
                                 	
                                  .include "delay.asm"
000720 9508                      
                                  * delay.asm
                                  *
                                  *  Created: 05-Nov-16 5:35:06 PM
                                  *   Author: galca
                                  */ 
                                  retardo10us:
000721 930f                      	push TEMP
000722 e30a                      	ldi TEMP,58
                                 loop_ret_10:
000723 950a                      	dec TEMP
000724 0000                      	NOP
000725 f7e9                      	brne loop_ret_10
000726 910f                      	pop TEMP
000727 9508                      	ret
                                 
                                 retardo1ms:
000728 930f                      	push TEMP
000729 e604                      	ldi TEMP,100
                                 loop_ret_1m:
00072a dff6                      	RCALL retardo10us
00072b 950a                      	dec TEMP	
00072c f7e9                      	brne loop_ret_1m
00072d 910f                      	pop TEMP
00072e 9508                      	ret
                                 
                                 retardo50ms:
00072f 930f                      	push TEMP
000730 e302                      	ldi TEMP,50
                                 loop_ret_50m:
000731 dff6                      	RCALL retardo1ms
000732 950a                      	dec TEMP
000733 f7e9                      	brne loop_ret_50m
000734 910f                      	pop TEMP
000735 9508                      	ret
                                 
                                 retardo500ms:
000736 930f                      	push TEMP
000737 e00a                      	ldi TEMP,10
                                 loop_ret_500m:
000738 dff6                      	RCALL retardo50ms
000739 950a                      	dec TEMP
00073a f7e9                      	brne loop_ret_500m
00073b 910f                      	pop TEMP
00073c 9508                      	ret
                                 
                                 retardo5ms:
00073d e005                      	ldi TEMP,5
                                 loop_ret_5m:
00073e dfe9                      	RCALL retardo1ms
00073f 950a                      	dec TEMP
000740 f7e9                      	brne loop_ret_5m
000741 9508                      	ret
                                 
                                 retardo3s:
                                 
000742 e30c                      	ldi TEMP, 60
                                 loop_ret_3s:
000743 dfeb                      	RCALL retardo50ms
000744 950a                      	dec TEMP
000745 f7e9                      	brne loop_ret_3s
000746 9508                      	ret
                                 
                                 retardo1s:
                                 
000747 e104                      	ldi TEMP, 20
                                 loop_ret_1s:
000748 dfe6                      	RCALL retardo50ms
000749 950a                      	dec TEMP
00074a f7e9                      	brne loop_ret_1s
                                  .include "interface.asm"
00074b 9508                      
                                  * interface.asm
                                  *
                                  *  Created: 05-Nov-16 7:59:54 PM
                                  *   Author: galca
                                  */ 
                                 
                                  ;....................Display welcome............................
                                 DisplayWelcome:
                                 	
00074c e0fe                      	LDi ZH, High(2*T_Welcome)
00074d eee0                      	LDI ZL, LOW(2*T_Welcome)
                                 	
00074e dfb4                      	RCALL DisplayString
00074f df5a                      	RCALL DisplayEnter
                                 	
000750 e0fe                      	LDI ZH, High(2*T_Cocktail)
000751 eeee                      	LDI ZL, LOW(2*T_Cocktail)
                                 	
000752 dfb0                      	RCALL DisplayString
                                 		
000753 9508                      	ret
                                 
                                 DisplayMenu0:
                                 	
000754 e0fe                      	LDi ZH, High(2*T_Mode_Select)
000755 efee                      	LDI ZL, LOW(2*T_Mode_Select)
                                 	
000756 dfac                      	RCALL DisplayString
                                 	
                                 		
000757 9508                      	ret
                                 
                                 DisplayMenu1a:
                                 	
000758 e0ff                      	LDi ZH, High(2*T_Pred_Select)
000759 e3e2                      	LDI ZL, LOW(2*T_Pred_Select)
                                 	
00075a dfa8                      	RCALL DisplayString
                                 	
                                 		
00075b 9508                      	ret
                                 
                                 DisplayMenu2a:
                                 	
00075c e0ff                      	LDi ZH, High(2*T_Pot_Select)
00075d e6e6                      	LDI ZL, LOW(2*T_Pot_Select)
                                 	
00075e dfa4                      	RCALL DisplayString
                                 	
                                 		
00075f 9508                      	ret
                                 
                                 DisplayMenu1b:
                                 	
000760 e0ff                      	LDi ZH, High(2*T_Bebida1_Select)
000761 e9ea                      	LDI ZL, LOW(2*T_Bebida1_Select)
                                 	
000762 dfa0                      	RCALL DisplayString
                                 	
                                 		
000763 9508                      	ret
                                 
                                 DisplayMenu2b:
                                 	
000764 e0ff                      	LDi ZH, High(2*T_Porc_Select)
000765 ece0                      	LDI ZL, LOW(2*T_Porc_Select)
                                 	
000766 df9c                      	RCALL DisplayString
                                 	
                                 		
000767 9508                      	ret
                                 
                                 DisplayWait:
                                 	
000768 e0ff                      	LDi ZH, High(2*T_Espere)
000769 edea                      	LDI ZL, LOW(2*T_Espere)
                                 
00076a df98                      	RCALL DisplayString
00076b 9508                      	ret
                                 
                                 DisplayDone:
                                 	
00076c e0ff                      	LDi ZH, High(2*T_Listo)
00076d efe0                      	LDI ZL, LOW(2*T_Listo)
                                 
00076e df94                      	RCALL DisplayString
00076f 9508                      	ret
                                 
                                  ;....................TABLAS (display)...........................
                                 
                                 T_Welcome:
000770 4942
000771 4e45
000772 4556
000773 494e
000774 4f44
000775 2153
000776 0000                      	.Db 'B','I','E','N','V','E','N','I','D','O','S','!',0,0
                                 
                                 T_COCKTail:
000777 2a2a
000778 432a
000779 434f
00077a 2d4b
00077b 4154
00077c 4c49
00077d 2a2a
00077e 0000                      	.DB '*','*','*','C','O','C','K','-','T','A','I','L','*','*',0,0
                                 	
                                 T_Mode_Select:
00077f 6553
000780 656c
000781 6363
000782 6f69
000783 656e
000784 6d20
000785 646f
000786 206f
000787 6564
000788 6f20
000789 6570
00078a 6172
00078b 6963
00078c 6e6f
00078d 003a
00078e 2d31
00078f 6142
000790 6973
000791 6f63
000792 3220
000793 412d
000794 6176
000795 7a6e
000796 6461
000797 006f
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm(99): warning: .cseg .db misalignment - padding zero byte
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(253): 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm' included form here
000798 0000                      	.DB		"Seleccione modo de operacion:",0,"1-Basico 2-Avanzado",0,0 
                                 
                                 T_Pred_Select:
000799 6553
00079a 656c
00079b 6363
00079c 6f69
00079d 656e
00079e 6220
00079f 6265
0007a0 6469
0007a1 3a61
0007a2 3100
0007a3 462d
0007a4 7265
0007a5 656e
0007a6 2074
0007a7 2d32
0007a8 6857
0007a9 7369
0007aa 6f63
0007ab 616c
0007ac 3320
0007ad 432d
0007ae 636f
0007af 2d61
0007b0 6f43
0007b1 616c
0007b2 0000                      	.DB		"Seleccione bebida:",0,"1-Fernet 2-Whiscola 3-Coca-Cola",0,0
                                 
                                 T_Pot_Select:
0007b3 6553
0007b4 656c
0007b5 6363
0007b6 6f69
0007b7 656e
0007b8 7020
0007b9 746f
0007ba 6e65
0007bb 6963
0007bc 3a61
0007bd 3100
0007be 432d
0007bf 726f
0007c0 6f64
0007c1 6562
0007c2 2073
0007c3 2d32
0007c4 654d
0007c5 6964
0007c6 2061
0007c7 2d33
0007c8 6e49
0007c9 6166
0007ca 746e
0007cb 6c69
0007cc 0000                      	.DB		"Seleccione potencia:",0,"1-Cordobes 2-Media 3-Infantil",0,0
                                 
                                 T_Bebida1_Select:
0007cd 6553
0007ce 656c
0007cf 6363
0007d0 6f69
0007d1 656e
0007d2 6220
0007d3 6265
0007d4 6469
0007d5 3a61
0007d6 3100
0007d7 462d
0007d8 7265
0007d9 656e
0007da 2074
0007db 2d32
0007dc 6857
0007dd 7369
0007de 796b
0007df 0000                      	.DB		"Seleccione bebida:",0,"1-Fernet 2-Whisky",0,0
                                 
                                 T_Porc_Select:
0007e0 6e49
0007e1 7274
0007e2 646f
0007e3 7a75
0007e4 6163
0007e5 7000
0007e6 726f
0007e7 6563
0007e8 746e
0007e9 6a61
0007ea 3a65
0007eb 0020
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm(111): warning: .cseg .db misalignment - padding zero byte
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(253): 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm' included form here
0007ec 0000                      	.DB		"Introduzca",0,"porcentaje: ",0,0
                                 
                                 T_Espere:
0007ed 7345
0007ee 6570
0007ef 6572
0007f0 0020
0007f1 6f70
0007f2 2072
0007f3 6166
0007f4 6f76
0007f5 2e72
0007f6 2e2e
0007f7 0000                      	.DB		"Espere ",0,"por favor...",0,0
                                 
                                 T_Listo:
0007f8 694c
0007f9 7473
0007fa 216f
0007fb 5220
0007fc 7465
0007fd 7269
0007fe 2065
0007ff 7573
000800 6200
000801 6265
000802 6469
000803 2061
000804 6f70
000805 2072
000806 6166
000807 6f76                       .include "math.asm"
000808 0072
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\math.asm(1): warning: .cseg .db misalignment - padding zero byte
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(254): 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\math.asm' included form here
000809 0000                      
                                  * math.asm
                                  *
                                  *  Created: 18-Nov-16 11:18:15 AM
                                  *   Author: galca
                                  */ 
                                 
                                  .DEF	DENOMINATOR = R2
                                  .DEF	QUOTIENT = R3
                                  .DEF	NUM = R4
                                  .def	numeradorL = R0
                                  .def	numeradorH = R1
                                  .def	denominadorL = R10
                                  .def	denominadorH = R11
                                  .def cociente = r12
                                 
                                 keyb_to_bcd:
00080a 91ff                      		POP			ZH
00080b 91ef                      		POP			ZL
00080c 910f                      		POP			TEMP
00080d 700f                      		ANDI		TEMP,0x0F
00080e 9502                      		SWAP		TEMP
                                 
00080f 2f20                      		MOV			TEMP2,TEMP
000810 910f                      		POP			TEMP
000811 700f                      		ANDI		TEMP,0x0F
000812 2b02                      		OR			TEMP,TEMP2
000813 930f                      		PUSH		TEMP
000814 93ef                      		PUSH		ZL
000815 93ff                      		PUSH		ZH
                                 
000816 9508                      		RET
                                 
                                 bcd_to_bin:
000817 91ff                      		POP			ZH
000818 91ef                      		POP			ZL
000819 910f                      		POP			TEMP
00081a 930f                      		PUSH		TEMP
00081b 700f                      		ANDI		TEMP,0x0F
00081c 2f20                      		MOV			TEMP2,TEMP
00081d 910f                      		POP			TEMP
00081e 9502                      		SWAP		TEMP
00081f 700f                      		ANDI		TEMP,0x0F
000820 2e60                      		MOV			TEMP3,TEMP
000821 e00a                      		LDI			TEMP,10
000822 9e60                      		MUL			TEMP3,TEMP
000823 0130                      		MOVW		TEMP3,R0
000824 1e62                      		ADC			TEMP3,TEMP2
000825 926f                      		PUSH		TEMP3
000826 93ef                      		PUSH		ZL
000827 93ff                      		PUSH		ZH
                                 		
000828 9508                      		RET
                                 
                                 
                                 bcd_to_ascii:
000829 91ff                      		POP			ZH
00082a 91ef                      		POP			ZL
00082b 910f                      		POP			TEMP
00082c 930f                      		PUSH		TEMP
00082d 700f                      		ANDI		TEMP,0x0F
00082e 6300                      		ORI			TEMP,0x30
                                 
00082f 2f20                      		MOV			TEMP2,TEMP
000830 910f                      		POP			TEMP
000831 932f                      		PUSH		TEMP2
000832 9502                      		SWAP		TEMP
000833 700f                      		ANDI		TEMP,0x0F
000834 6300                      		ORI			TEMP,0x30
000835 930f                      		PUSH		TEMP
                                 
000836 93ef                      		PUSH		ZL
000837 93ff                      		PUSH		ZH
000838 9508                      		RET
                                 
                                 pack_bcd:
000839 91ff                      		POP			ZH
00083a 91ef                      		POP			ZL
00083b 912f                      		POP			TEMP2
00083c 910f                      		POP			TEMP
00083d 9522                      		SWAP		TEMP2
00083e 2b02                      		OR			TEMP,TEMP2
00083f 930f                      		PUSH		TEMP
000840 93ef                      		PUSH		ZL
000841 93ff                      		PUSH		ZH
000842 9508                      		RET
                                 
                                 bin_to_bcd:
000843 91ff                      		POP			ZH
000844 91ef                      		POP			ZL
000845 904f                      		POP			NUM
000846 e00a                      		LDI			TEMP,10
000847 2e20                      		MOV			DENOMINATOR,TEMP
000848 d00e                      		RCALL		DIVIDE
000849 2d04                      		MOV			TEMP,NUM
00084a 2e40                      		MOV			NUM,TEMP
00084b 924f                      		PUSH		NUM
00084c 2c43                      		MOV			NUM,QUOTIENT
00084d d009                      		RCALL		DIVIDE
00084e 2d04                      		MOV			TEMP,NUM
00084f 2e40                      		MOV			NUM,TEMP
000850 924f                      		PUSH		NUM
000851 2d03                      		MOV			TEMP,QUOTIENT
000852 2e30                      		MOV			QUOTIENT,TEMP
000853 923f                      		PUSH		QUOTIENT
000854 93ef                      		PUSH		ZL
000855 93ff                      		PUSH		ZH
000856 9508                      		RET
                                 
                                 DIVIDE:
000857 e000                      		LDI			TEMP,0
000858 2e30                      		MOV			QUOTIENT,TEMP
                                 DIVLOOP:
000859 9433                      		INC			QUOTIENT
00085a 1842                      		SUB			NUM,DENOMINATOR
00085b f7e8                      		BRCC		DIVLOOP
00085c 943a                      		DEC			QUOTIENT
00085d 0c42                      		ADD			NUM,DENOMINATOR
00085e 9508                      		RET
                                 
                                 
                                 ;----------------Operaciones matemáticas---------------
                                 
                                 ;---Division--
                                 division:
00085f 24cc                      	clr cociente
                                 
                                 div1:
000860 94c3                      	inc cociente
000861 180a                      	sub numeradorL, denominadorL
000862 081b                      	sbc numeradorH, denominadorH
000863 f7e0                      	brcc div1
000864 94ca                      	dec cociente
                                 	
                                  .include "ultrasound_driver.asm"
000865 9508                      
                                  * ultrasound_driver.asm
                                  *
                                  *  Created: 19-Nov-16 4:18:04 PM
                                  *   Author: galca
                                  */ 
                                 
                                 .EQU USART_BAUDRATE = 9600
                                 .EQU BAUD_PRESCALE = (((F_CPU / (USART_BAUDRATE * 16))) - 1)
                                 
                                 InitUsart:
000866 e108                      		LDI		TEMP,(1<<TXEN0)|(1<<RXEN0)
000867 9300 00c1                 		STS		UCSR0B,TEMP
000869 e006                      		LDI		TEMP,(3<<UCSZ00)
00086a 9300 00c2                 		STS		UCSR0C,R16
00086c e707                      		LDI		TEMP,0X77
00086d 9300 00c4                 		STS		UBRR0L,TEMP
00086f e000                      		LDI		TEMP,0x00
000870 9300 00c5                 		STS		UBRR0H,TEMP
                                 
000872 9508                      		RET
                                 
                                 measurement:
000873 91ff                      		POP		ZH
000874 91ef                      		POP		ZL
                                 
000875 e505                      		LDI		TEMP,0x55
000876 d009                      		RCALL	transmit
000877 deb7                      		RCALL	retardo50ms
000878 d00e                      		RCALL	receive
000879 930f                      		PUSH	TEMP
00087a d00c                      		RCALL	receive
00087b 930f                      		PUSH	TEMP
00087c d00a                      		RCALL receive
                                 
00087d 93ef                      		PUSH	ZL
00087e 93ff                      		PUSH	ZH
00087f 9508                      		RET
                                 
                                 
                                 transmit:		
000880 9120 00c0                 		LDS		TEMP2,UCSR0A
000882 ff25                      		SBRS	TEMP2,UDRE0
000883 cffc                      		RJMP	transmit
000884 9300 00c6                 		STS		UDR0,TEMP
000886 9508                      		RET
                                 
                                 receive:
000887 9120 00c0                 		LDS		TEMP2,UCSR0A
000889 ff25                      		SBRS	TEMP2,UDRE0
00088a cffc                      		RJMP	receive
00088b 9100 00c6                 		LDS		TEMP,UDR0
                                  .include "caudal_driver.asm"
00088d 9508                      
                                  * caudal_driver.asm
                                  *
                                  *  Created: 25-Nov-16 3:18:48 PM
                                  *   Author: galca
                                  */ 
                                 
                                  .equ MaxPulsos = 120
                                  .def CONTROL = R22
                                  .def TOTAL = R23
                                  .def IMPRIMO = R25
                                 
                                 
                                  ;________________________________________________--
                                 ;				 Caudalimetro
                                 ;__________________________________________________
                                 
                                 ;---Inicio Creacion de Trago------
                                 CreoTrago:
                                 
                                 
                                 
00088e 940e 08bd                 	call CargoTrago1
000890 e060                      	ldi CONTROL,0x00
                                 loop4:
                                 	
000891 fd60                      	sbrc CONTROL, 0
000892 940c 08a1                 	jmp ahora
000894 9170 0084                 	lds TOTAL,TCNT1L
000896 9100 0064                 	LDS TEMP, 100
000898 9f07                      	MUL TEMP,TOTAL
000899 e708                      	LDI TEMP, MaxPulsos
00089a 940e 085f                 	call division
                                 /*	PUSH cociente
                                 	RCALL bin_to_bcd
                                 	POP TEMP
                                 	RCALL pack_bcd
                                 	rcall bcd_to_ascii
                                 	pop temp
                                 	pop temp2
                                 	mov dispvar,temp2
                                 	rcall DisplayChar
                                 	mov dispvar,temp
                                 	rcall DisplayChar*/
00089c 940e 08e7                 	call imprimototal
00089e 940e 072f                 	call retardo50ms
0008a0 cff0                      	rjmp loop4
                                 ahora:	
0008a1 940e 0742                 	call retardo3s
0008a3 9100 1403                 	lds temp, drink2
0008a5 9300 1402                 	sts drink1,temp
0008a7 9100 1401                 	lds temp, perc2
                                 
0008a9 3000                      	cpi temp,0x00
0008aa f089                      	breq ahora2
                                 
0008ab 9300 1400                 	sts perc1, temp
0008ad de94                      	rcall retardo3s
0008ae de93                      	rcall retardo3s
0008af 940e 08bd                 	call CargoTrago1
0008b1 e060                      	ldi CONTROL,0x00
                                 loop5:
                                 	
0008b2 fd60                      	sbrc CONTROL, 0
0008b3 940c 08bc                 	jmp ahora2
0008b5 9170 0084                 	lds TOTAL,TCNT1L
0008b7 940e 08e7                 	call imprimototal
0008b9 940e 072f                 	call retardo50ms
0008bb cff6                      	rjmp loop5
                                 ahora2:	
0008bc 9508                      	ret
                                 
                                 CargoTrago1:
0008bd 94f8                      	cli
                                 	
0008be 9100 1400                 	lds TEMP,perc1
0008c0 e728                      	ldi TEMP2,MAxPulsos
                                 	
0008c1 9f02                      	mul temp,temp2
0008c2 e000                      	ldi temp,0
0008c3 2eb0                      	mov denominadorh,temp
0008c4 e604                      	ldi temp,100
0008c5 2ea0                      	mov denominadorL,temp
0008c6 940e 085f                 	call division ;En cociente tenemos la cantidad de pulsos 
                                 
0008c8 e000                      	ldi TEMP,0     
0008c9 9300 0089                 	sts OCR1AH,TEMP
0008cb 2d0c                      	mov TEMP,cociente			;Cantidad de pulsos hasta cortar electrovalvula
0008cc 9300 0088                 	sts OCR1AL,TEMP
                                 
0008ce e000                      	ldi TEMP,0x00			;Configuro timer para external clock, pt11
0008cf 9300 0080                 	sts TCCR1A,TEMP
0008d1 e00e                      	ldi TEMP,0b00001110		; CTC External clock  SART         0b00001001  ; CTC INTERNAL clock
0008d2 9300 0081                 	sts TCCR1B,TEMP
0008d4 e002                      	ldi TEMP,(1<<1)			 ; Interrupts enabled, compare match b
0008d5 9300 006f                 	sts TIMSK1, TEMP
0008d7 9100 1402                 	lds temp, Drink1
0008d9 3001                      	cpi temp, 0x01
0008da f031                      	breq StartEV1
0008db 3002                      	cpi temp, 0x02
0008dc f031                      	breq StartEV2
0008dd 3003                      	cpi temp, 0x03
0008de f031                      	breq StartEV3
                                 	
                                 
                                 EndCreoTrago:
0008df 9478                      	sei
0008e0 9508                      	ret
                                 
                                 StartEV1:
0008e1 9a40                      	sbi portc,0
0008e2 cffc                      	rjmp EndCreoTrago
                                 StartEV2:
0008e3 9a41                      	sbi portc,1
0008e4 cffa                      	rjmp EndCreoTrago
                                 StartEV3:
0008e5 9a42                      	sbi portc,2
0008e6 cff8                      	rjmp EndCreoTrago
                                 /*;------Cargo TRago 2----
                                 CargoTrago2:
                                 	cli
                                 	
                                 	lds TEMP,perc2
                                 	ldi TEMP2,MAxPulsos
                                 	
                                 	mul temp,temp2
                                 	ldi temp,0
                                 	mov denominadorh,temp
                                 	ldi temp,100
                                 	mov denominadorL,temp
                                 	call division ;En cociente tenemos la cantidad de pulsos 
                                 
                                 	ldi TEMP,0     
                                 	sts OCR1AH,TEMP
                                 	mov TEMP,cociente			;Cantidad de pulsos hasta cortar electrovalvula
                                 	sts OCR1AL,TEMP
                                 
                                 	ldi TEMP,0x00			;Configuro timer para external clock, pt11
                                 	sts TCCR1A,TEMP
                                 	ldi TEMP,0b00001110		; CTC External clock  SART         0b00001001  ; CTC INTERNAL clock
                                 	sts TCCR1B,TEMP
                                 	ldi TEMP,(1<<1)			 ; Interrupts enabled, compare match b
                                 	sts TIMSK1, TEMP
                                 	SBI PORTC,2
                                 	in temp2,portc
                                 	or temp,temp2
                                 	out portc,temp
                                 	sei
                                 	ret*/
                                 ;-----numero a string-----
                                 ImprimoTotal:
0008e7 940e 06d7                 		call DisplayClear
                                 
0008e9 e098                      		ldi IMPRIMO,8
                                 contimprtot:
0008ea ff77                      		sbrs TOTAL,7
0008eb c001                      		rjmp CeroTotal
0008ec c007                      		rjmp UnoTotal
                                 
                                 CeroTotal: 
0008ed e380                      		ldi DISPVAR,'0'
0008ee 940e 0690                 		call DisplayChar
0008f0 959a                      		dec IMPRIMO
0008f1 f049                      		breq finImprimo
0008f2 0f77                      		lsL TOTAL
0008f3 cff6                      		rjmp contimprtot
                                 UnoTotal:
0008f4 e381                      		ldi DISPVAR,'1'
0008f5 940e 0690                 		call DisplayChar
0008f7 959a                      		dec IMPRIMO
0008f8 f011                      		breq finImprimo
0008f9 0f77                      		lsL TOTAL
0008fa cfef                      		rjmp contimprtot
                                 FinImprimo:
0008fb 9508                      ret
                                 
                                 
                                 
                                 
                                 	.org 0x200
                                  
                                 T1_B_ISR:
000200 e061                      	ldi CONTROL, 0x01
000201 9840                      	cbi portc,0
000202 9841                      	cbi portc,1
000203 9842                      	cbi portc,2
000204 e000                      	ldi TEMP,0b00000000	; STOP TIMER         0b00001001  ; CTC INTERNAL clock
000205 9300 0081                 	sts TCCR1B,TEMP


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :   0 z  :   3 r0 :   2 r1 :   1 r2 :   3 r3 :   7 r4 :  10 
r5 :   0 r6 :   7 r7 :   0 r8 :   0 r9 :   0 r10:   3 r11:   3 r12:   5 
r13:   0 r14:   0 r15:   0 r16: 286 r17:  38 r18:  24 r19:  29 r20:   7 
r21:  10 r22:   5 r23:   6 r24:  14 r25:   3 r26:   0 r27:   0 r28:   0 
r29:   0 r30:  23 r31:  23 
Registers used: 22 out of 35 (62.9%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   1 add   :   3 adiw  :   0 and   :   0 
andi  :  12 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   2 brcs  :   0 break :   0 breq  :  15 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  17 brpl  :   0 brsh  :   3 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  13 cbi   :   3 cbr   :   2 
clc   :   0 clh   :   0 cli   :   2 cln   :   0 clr   :   2 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :  23 cpse  :   0 dec   :  17 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :   7 jmp   :   3 
ld    :   0 ldd   :   0 ldi   : 152 lds   :  16 lpm   :   3 lsl   :   6 
lsr   :   0 mov   :  26 movw  :   1 mul   :   4 muls  :   0 mulsu :   0 
neg   :   0 nop   :   1 or    :   2 ori   :   6 out   :   9 pop   :  34 
push  :  35 rcall : 142 ret   :  49 reti  :   1 rjmp  :  34 rol   :   0 
ror   :   0 sbc   :   1 sbci  :   0 sbi   :   6 sbic  :   3 sbis  :   0 
sbiw  :   0 sbr   :   3 sbrc  :   5 sbrs  :   6 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :  83 
sub   :   4 subi  :   0 swap  :   4 tst   :   0 wdr   :   0 
Instructions used: 43 out of 113 (38.1%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0011f8   1754    308   2062   32768   6.3%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 3 warnings
