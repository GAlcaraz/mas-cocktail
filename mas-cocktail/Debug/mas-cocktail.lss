
AVRASM ver. 2.2.6  D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm Thu Nov 24 00:23:23 2016

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.0.106\avrasm\inc\m328pdef.inc'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(15): warning: Register r6 already defined by the .DEF directive
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(207): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\kb_driver.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(208): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\disp_driver.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(209): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\delay.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(210): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(211): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\math.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(212): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\ultrasound_driver.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.0.106\avrasm\inc\m328pdef.inc'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(207): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\kb_driver.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(208): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\disp_driver.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(209): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\delay.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(210): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(211): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\math.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(212): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\ultrasound_driver.asm'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; mas-cocktail.asm
                                 ;
                                 ; Created: 01-Oct-16 1:40:18 PM
                                 ; Author : galca
                                 ;
                                 ; 
                                 
                                  .equ F_CPU = 18432000
                                  .equ SHIFTDELAY = 160
                                 
                                  .def TEMP = R16
                                  .DEF TEMP2 = R5
                                  .DEF TEMP3 = R6
                                  .DEF PERCENTREG = R6
                                 /* .DEF DRINK1 = R22
                                  .DEF DRINK2 = R23*/
                                  .def PRGFLAGS = R21
                                 
                                  ;----------------------------------------------------------
                                  ;----------------------------------------------------------
                                  ;----------------PARÁMETROS DE LAS BEBIDAS-----------------
                                  ;----------------------------------------------------------
                                  ;----------------------------------------------------------
                                 
                                  .EQU FERNET = 1
                                  .EQU WHISKY = 2
                                  .EQU COCA = 3
                                  .EQU PERC = 0
                                  .EQU PERC1 = $1400
                                  .EQU PERC2 = $1401
                                  .EQU DRINK1 = $1402
                                  .EQU DRINK2 = $1403
                                 
                                 .CSEG
000000 c4ff                      		RJMP		BEGIN
                                 
                                 
                                 
                                 .ORG	$500
                                 BEGIN:
000500 ef0f                      		LDI	R16, low(RAMEND)
000501 bf0d                      		OUT	SPL, R16
000502 e008                      		LDI	R16, high(RAMEND)
000503 bf0e                      		OUT	SPH, R16
                                 
                                 
                                 
                                 
                                 
                                 
000504 d085                      		RCALL		KBINIT			; inicialización del teclado
000505 d0bc                      		RCALL		InicI2C			; esta funcion inicializa el display, si o si tiene que ir. no hace falta modificarle nada
000506 d0de                      		RCALL		InicDisplay		; lo mismo que la anterior
000507 d333                      		RCALL		InitUsart		; inicialización del protocolo USART para el sensor de distancia
                                  MAIN:	
000508 d217                      		RCALL		DisplayWelcome					; muestra mensaje de bienvendia
000509 d20c                      		RCALL		retardo3s						; durante 3 segundos
00050a d1a0                      		RCALL		DisplayClear					; borra el display
00050b d21c                      		RCALL		DisplayMenu0					; empieza el programa en si
00050c ea00                      		LDI			TEMP,SHIFTDELAY					; settea el contador de velocidad de shifteo del display
                                 MenuModo:
00050d d19d                      		RCALL		DisplayClear
00050e d219                      		RCALL		DisplayMenu0
00050f d0b0                      		RCALL		CLEARKEY
                                 getk0:
000510 d1c0                      		RCALL		Shift
000511 d07f                      		RCALL		GETKEY
000512 3031                      		CPI			KEY,0x01
000513 f019                      		BREQ		MenuTrago
000514 3032                      		CPI			KEY,0x02
000515 f0b1                      		BREQ		MenuBebida
000516 cff9                      		RJMP		getk0
                                 MenuTrago:
000517 d193                      		RCALL		DisplayClear
000518 d213                      		RCALL		DisplayMenu1a
000519 d0a6                      		RCALL		CLEARKEY
00051a d200                      		RCALL		retardo1s
                                 getk1a:
00051b d1b5                      		RCALL		Shift
00051c d074                      		RCALL		GETKEY
00051d 3030                      		CPI			KEY,0x00
00051e f3e1                      		BREQ		getk1a
00051f 3033                      		CPI			KEY,0x03
000520 f7d0                      		BRSH		getk1a
                                 MenuPotencia:
000521 d189                      		RCALL		DisplayClear
000522 d20d                      		RCALL		DisplayMenu2a
000523 d09c                      		RCALL		CLEARKEY
000524 d1f6                      		RCALL		retardo1s
                                 getk2a:		
000525 d1ab                      		RCALL		Shift
000526 d06a                      		RCALL		GETKEY
000527 3030                      		CPI			KEY,0x00
000528 f3e1                      		BREQ		getk2a
000529 3034                      		CPI			KEY,0x04
00052a f7d0                      		BRSH		getk2a
00052b c048                      		RJMP		END
                                 MenuBebida:
00052c d17e                      		RCALL		DisplayClear
00052d d206                      		RCALL		DisplayMenu1b
00052e d091                      		RCALL		CLEARKEY
00052f d1eb                      		RCALL		retardo1s
                                 getk1b:		
000530 d1a0                      		RCALL		Shift
000531 d05f                      		RCALL		GETKEY
000532 3030                      		CPI			KEY,0x00
000533 f3e1                      		BREQ		getk1b
000534 3033                      		CPI			KEY,0x03
000535 f7d0                      		BRSH		getk1b
                                 MenuPorc:
000536 d174                      		RCALL		DisplayClear
000537 d200                      		RCALL		DisplayMenu2b
000538 d087                      		RCALL		CLEARKEY
000539 d1e1                      		RCALL		retardo1s
                                 getk2b:	
00053a d085                      		RCALL		CLEARKEY	
00053b d055                      		RCALL		GETKEY
00053c 3030                      		CPI			KEY,0x00
00053d f3e1                      		BREQ		getk2b
00053e 303b                      		CPI			KEY,11
00053f f409                      		BRNE		KeyNotZero
000540 e030                      		LDI			KEY,0x00
                                 KeyNotZero:
000541 e300                      		LDI			TEMP,48
000542 0f30                      		ADD			KEY,TEMP
000543 2f83                      		MOV			DISPVAR,KEY
000544 e300                      		LDI			TEMP,48
000545 1b30                      		SUB			KEY,TEMP
000546 d11d                      		RCALL		DisplayChar
000547 d1d3                      		RCALL		retardo1s
000548 933f                      		PUSH		KEY
000549 fd50                      		SBRC		PRGFLAGS,PERC
00054a c002                      		RJMP		getPercentage
00054b 6051                      		ORI			PRGFLAGS,(1<<PERC)
00054c cfed                      		RJMP		getk2b
                                 
                                 getPercentage:
00054d 7f5e                      		ANDI		PRGFLAGS,(0xFE<<PERC)
00054e d297                      		RCALL		keyb_to_bcd
00054f 905f                      		POP			TEMP2
000550 9250 1400                 		STS			PERC1,TEMP2
000552 925f                      		PUSH		TEMP2
000553 d29f                      		RCALL		bcd_to_bin
000554 905f                      		POP			TEMP2
000555 e604                      		LDI			TEMP,100
000556 1905                      		SUB			TEMP,TEMP2
000557 930f                      		PUSH		TEMP
000558 d2c6                      		RCALL		bin_to_bcd
000559 910f                      		POP			TEMP
00055a d2ba                      		RCALL		pack_bcd
00055b 910f                      		POP			TEMP
00055c 9300 1401                 		STS			PERC2,TEMP
                                 
00055e d14c                      		RCALL DisplayClear
                                 
00055f 9100 1400                 		lds TEMP,PERC1
000561 930f                      		PUSH TEMP
000562 d2a2                      		rcall bcd_to_ascii
000563 910f                      		pop temp
000564 2f80                      		mov dispvar,temp
000565 d0fe                      		rcall DisplayChar
000566 910f                      		pop temp
000567 2f80                      		mov dispvar,temp
000568 d0fb                      		rcall DisplayChar
                                 
000569 9100 1401                 		lds TEMP,PERC2
00056b 930f                      		PUSH TEMP
00056c d298                      		rcall bcd_to_ascii
00056d 910f                      		pop temp
00056e 2f80                      		mov dispvar,temp
00056f d0f4                      		rcall DisplayChar
000570 910f                      		pop temp
000571 2f80                      		mov dispvar,temp
000572 d0f1                      		rcall DisplayChar
                                 
                                 		here:
000573 cfff                      		rjmp here
                                 
                                 
                                 
                                 END:	
000574 d136                      		RCALL		DisplayClear
000575 d1c6                      		RCALL		DisplayWait
000576 d1a4                      		RCALL		retardo1s
000577 d133                      		RCALL		DisplayClear
000578 d1c7                      		RCALL		DisplayDone
000579 d1a1                      		RCALL		retardo1s
00057a d130                      		RCALL		DisplayClear
00057b d2cc                      		RCALL measurement
                                 
00057c d2a2                      		RCALL bin_to_bcd
00057d d287                      		RCALL bcd_to_ascii
00057e 910f                      		pop r16
00057f 2f80                      		mov DISPVAR,r16
000580 d0e3                      		RCALL DisplayChar
000581 910f                      		pop r16
000582 2f80                      		mov DISPVAR,r16
000583 d0e0                      		RCALL DisplayChar
000584 910f                      		pop r16
000585 2f80                      		mov DISPVAR,r16
000586 d0dd                      		RCALL DisplayChar
000587 d18e                      		RCALL retardo3s
000588 910f                      		pop r16
000589 cfe9                      		RJMP		here
                                 
                                  .include "kb_driver.asm"
                                 
                                  * kb_driver.asm
                                  *
                                  *  Created: 25-Oct-16 10:23:47 PM
                                  *   Author: galca
                                  */ 
                                 
                                 .EQU COL1 = PINB0
                                 .EQU COL2 = PINB1
                                 .EQU COL3 = PINB2
                                 
                                 .EQU ROW1 = PINB3
                                 .EQU ROW2 = PINB7
                                 .EQU ROW3 = PINB5
                                 .EQU ROW4 = PINB4
                                 
                                 .EQU ROW1VAL = 1
                                 .EQU ROW2VAL = 4
                                 .EQU ROW3VAL = 7
                                 .EQU ROW4VAL = 10
                                 
                                 .EQU KBPORT = PORTB
                                 .EQU PRESSED = 7
                                 .EQU KBCONF = 0xF8
                                 .EQU KBPULLUPS = 0x07
                                  
                                 
                                 .DEF KBTEMP = R17
                                 .DEF KEY = R19
                                  
                                 .CSEG
                                 
                                 KBINIT:
00058a 931f                      		PUSH		KBTEMP
00058b ef18                       		LDI			KBTEMP,KBCONF		;cols como input, filas como output
00058c b914                      		OUT			DDRB,KBTEMP	
00058d e017                      		LDI			KBTEMP,KBPULLUPS		;habilitar pullups en el input
00058e b915                      		OUT			KBPORT,KBTEMP
00058f 911f                      		POP			KBTEMP	
000590 9508                      		RET
                                 
                                  GETKEY:
                                 												;Esta sección lee la fila 1
000591 e031                      		LDI			KEY,ROW1VAL					;carga el valor de la primera tecla de la fila 1 en "key"
000592 ef17                      		LDI			KBTEMP,~(1<<ROW1)			;"apaga" fila 1 (carga un byte de unos con un único cero en la posición "ROW1")
000593 b915                      		OUT			KBPORT,KBTEMP				;y cargando el valor al puerto usado por el teclado
000594 d013                      		RCALL		READ_COL					;se pasa a leer las columnas, esperando encontrar coincidencias
                                  
000595 fd57                      		SBRC		PRGFLAGS,PRESSED				;si se registró una tecla presionada
000596 c010                      		RJMP		DONE						;salir de la subrutina
                                  
                                 												;Esta sección lee la fila 2
000597 e034                      		LDI			KEY,ROW2VAL					;carga el valor de la primera tecla de la fila 2 en "key"
000598 e71f                      		LDI			KBTEMP,~(1<<ROW2)			;"apaga" fila 2 (carga un byte de unos con un único cero en la posición "ROW2")
000599 b915                      		OUT			KBPORT,KBTEMP				;y cargando el valor al puerto usado por el teclado
00059a d00d                      		RCALL		READ_COL					;se pasa a leer las columnas, esperando encontrar coincidencias
                                  
00059b fd57                      		SBRC		PRGFLAGS,PRESSED				;si se registró una tecla presionada
00059c c00a                      		RJMP		DONE						;salir de la subrutina
                                 												
                                 												;Esta sección lee la fila 3
00059d e037                      		LDI			KEY,ROW3VAL					;carga el valor de la primera tecla de la fila 3 en "key"
00059e ed1f                      		LDI			KBTEMP,~(1<<ROW3)			;"apaga" fila 3 (carga un byte de unos con un único cero en la posición "ROW3")
00059f b915                      		OUT			KBPORT,KBTEMP				;y cargando el valor al puerto usado por el teclado
0005a0 d007                      		RCALL		READ_COL					;se pasa a leer las columnas, esperando encontrar coincidencias
                                 
0005a1 fd57                      		SBRC		PRGFLAGS,PRESSED				;si se registró una tecla presionada
0005a2 c004                      		RJMP		DONE						;salir de la subrutina
                                  
                                 												;Esta sección lee la fila 4
0005a3 e03a                      		LDI			KEY,ROW4VAL					;carga el valor de la primera tecla de la fila 4 en "key"
0005a4 ee1f                      		LDI			KBTEMP,~(1<<ROW4)			;"apaga" fila 4 (carga un byte de unos con un único cero en la posición "ROW4")
0005a5 b915                      		OUT			KBPORT,KBTEMP				;y cargando el valor al puerto usado por el teclado
0005a6 d001                      		RCALL		READ_COL					;se pasa a leer las columnas, esperando encontrar coincidencias
                                  
                                 DONE:					
0005a7 9508                      		RET
                                  
                                 READ_COL:
0005a8 d013                      		RCALL		SETTLE
0005a9 775f                      		CBR			PRGFLAGS, (1<<PRESSED)		;estado = no presionado
                                  
0005aa 9918                      		SBIC		PINB, COL1					;lee columna 1
0005ab c002                      		RJMP		NEXTCOL						;si no, pasar a columna 2
0005ac 6850                      		SBR			PRGFLAGS, (1<<PRESSED)		;estado = presionado
0005ad 9508                      		RET										;devolver el valor de la primer columna de la fila
                                 NEXTCOL:
0005ae 9919                      		SBIC		PINB,COL2					;lee columna 2
0005af c003                      		RJMP		NEXTCOL1					;si no, pasar a columna 3
0005b0 9533                      		INC			KEY							
0005b1 6850                      		SBR			PRGFLAGS,(1<<PRESSED)		;estado = presionado
0005b2 9508                      		RET										;devolver el valor de la segunda columna de la fila
                                 NEXTCOL1:
0005b3 991a                      		SBIC		PINB,COL3					;lee columna 3
0005b4 c004                      		RJMP		EXIT						;si no, termina
0005b5 9533                      		INC			KEY							;estado = presionado
0005b6 9533                      		INC			KEY
0005b7 6850                      		SBR			PRGFLAGS, (1<<PRESSED)		;estado=presionado
0005b8 9508                      		RET										;devolver el valor de la tercer columna de la fila
                                 EXIT:
0005b9 2733                      		CLR			KEY							;vacía el valor de la tecla
0005ba 775f                      		CBR			PRGFLAGS, (1<<PRESSED)		;no se presionó ninguna tecla
0005bb 9508                      		RET										
                                 SETTLE:
0005bc ef1f                      		LDI			KBTEMP,255
0005bd 951a                      TAGAIN: DEC			KBTEMP
0005be f7f1                      		BRNE		TAGAIN
0005bf 9508                      		RET 
                                 
                                 CLEARKEY:
0005c0 e030                      		LDI			KEY,0X00
                                  .include "disp_driver.asm"
0005c1 9508                      
                                  * disp_driver.asm
                                  *
                                  *  Created: 01-Nov-16 5:01:30 PM
                                  *   Author: galca
                                  */ 
                                  ;
                                 ; display.asm
                                 ;
                                 ; Created: 23/9/2016 2:16:36 p. m.
                                 ; Author : waral
                                 ;
                                 
                                 	.def CONTADOR = R20
                                 	.def DISPVAR = R24
                                 
                                 	.equ TWI_RATE = 0xF8
                                 	.equ STARTi = 0x08
                                 	.equ MT_SLA_ACK = 0x20
                                 	.equ MT_DATA_ACK= 0x28
                                 	.equ SL_ADD = 0b01001110
                                 
                                 
                                 ;para usar el i2c no hay que inicializar nada de los puertos... 
                                 ;lo que yo puse fue para encender un led que me diga que esta todo ok
                                 
                                 
                                 ;---------------------------------------------------------------------
                                 ;---------------------------------------------------------------------
                                 ;-----------------------------Fin start-------------------------------
                                 ;---------------------------------------------------------------------
                                 ;---------------------------------------------------------------------
                                 
                                 
                                 
                                 ;----------------------------SUBRUTINAS-------------------------------
                                 
                                 ;_____________________________________________________
                                 ;;;;;;;;;;;;;;;;;DISPLAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;|
                                 ;_____________________________________________________|
                                 
                                 ;------- inicializacion i2c-------
                                 InicI2C:	
                                 	
0005c2 ef08                      	ldi TEMP, TWI_RATE
0005c3 9300 00b8                 	sts TWBR,TEMP
                                 
0005c5 ea04                      	ldi TEMP, (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)   
0005c6 9300 00bc                 	sts TWCR, TEMP								;envia condicion de start
                                 
                                 wait1:
0005c8 9100 00bc                 	lds TEMP,TWCR
0005ca ff07                      	sbrs TEMP,TWINT								;espera flag de start ok
0005cb cffc                      	rjmp wait1
                                 
0005cc 9100 00b9                 	lds TEMP,TWSR
0005ce 7f08                      	andi TEMP, 0xF8								;si el estado en el registro TWI es distinto de START se va a error
0005cf 3008                      	cpi TEMP, STARTi
0005d0 f409                      	brne error_A
0005d1 c001                      	rjmp continuo
                                 error_A:
0005d2 d0d4                      	RCALL ERROR1
                                 	
                                 continuo:
0005d3 e40e                      	ldi TEMP, SL_ADD								
0005d4 9300 00bb                 	sts TWDR, TEMP								;Carga direccion del esclavo en el registro TWDR, limpia bit TWINT para empezar la transmision de la direccion
0005d6 e804                      	ldi TEMP, (1<<TWINT) | (1<<TWEN)
0005d7 9300 00bc                 	sts TWCR, TEMP								;envio direccion del esclavo
                                 
                                 wait2:
0005d9 9100 00bc                 	lds TEMP,TWCR
0005db ff07                      	sbrs TEMP,TWINT								;espera seteo de TWINT para confirmar transmision ok
0005dc cffc                      	rjmp wait2
                                 
0005dd 9100 00b9                 	lds TEMP,TWSR
0005df 7f08                      	andi TEMP, 0xF8								;chequea el registro TWI, salta a error si no se transmitio bien
0005e0 3200                      	cpi TEMP, MT_SLA_ACK
0005e1 f009                      	breq error_B
0005e2 c001                      	rjmp continuo2
                                 error_B:
0005e3 d0c3                      	RCALL ERROR1
                                 continuo2:
0005e4 9508                      	ret
                                 	
                                 ;----------------------------------Fin inicializacion i2c----------------------------------------;
                                 
                                 ;.................................incialización display, envio de a 4bits........................;
                                 InicDisplay:	
                                 	
0005e5 d11d                      	RCALL retardo50ms
                                 	
0005e6 e300                      	ldi TEMP, 0x30
0005e7 e310                      	ldi r17,0x30
0005e8 9300 00bb                 	sts TWDR, TEMP								; Carga DATA en twdr, limpia twint para empezar la transmision
0005ea e804                      	ldi TEMP, (1<<TWINT) |(1<<TWEN)
0005eb 9300 00bc                 	sts TWCR, TEMP								
0005ed d06c                      	RCALL WaitDataI2c
                                 
0005ee d0a7                      	RCALL DisplayEnable
                                 
0005ef d121                      	RCALL retardo5ms
                                 
0005f0 d0a5                      	RCALL DisplayEnable
                                 
0005f1 d10a                      	RCALL retardo1ms
                                 												; todo esto te lo pide que hagas la hoja de datos del display
0005f2 d0a3                      	RCALL DisplayEnable
                                 
0005f3 d11d                      	RCALL retardo5ms
                                 
0005f4 e208                      	ldi r16, 0x28								;set 4bit mode
0005f5 e218                      	ldi r17,0x28
0005f6 9300 00bb                 	sts TWDR, r16								
0005f8 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
0005f9 9300 00bc                 	sts TWCR, r16								
0005fb d05e                      	RCALL WaitDataI2c
                                 	
0005fc d099                      	RCALL DisplayEnable
                                 
0005fd d0fe                      	RCALL retardo1ms
                                 
0005fe e208                      	ldi TEMP,0x28								;0x28_H
0005ff e218                      	ldi r17,0x28
000600 9300 00bb                 	sts TWDR, TEMP								
000602 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
000603 9300 00bc                 	sts TWCR, TEMP								
000605 d054                      	RCALL WaitDataI2c
                                 
000606 d08f                      	RCALL DisplayEnable
                                 
000607 e808                      	ldi TEMP,0x88								;0x28_L
000608 e818                      	ldi r17,0x88
000609 9300 00bb                 	sts TWDR, r16								
00060b e804                      	ldi TEMP, (1<<TWINT) |(1<<TWEN)
00060c 9300 00bc                 	sts TWCR, TEMP								
00060e d04b                      	RCALL WaitDataI2c
                                 
00060f d086                      	RCALL DisplayEnable
                                 
000610 e008                      	ldi TEMP, 0x08								;0x08_H
000611 e018                      	ldi r17,0x08
000612 9300 00bb                 	sts TWDR, TEMP								
000614 e804                      	ldi TEMP, (1<<TWINT) |(1<<TWEN)
000615 9300 00bc                 	sts TWCR, TEMP								
000617 d042                      	RCALL WaitDataI2c
                                 
000618 d07d                      	RCALL DisplayEnable							
                                 
000619 e808                      	ldi TEMP,0x88								;0x08_L				
00061a e818                      	ldi r17,0x88
                                 	
00061b 9300 00bb                 	sts TWDR, TEMP								
00061d e804                      	ldi TEMP, (1<<TWINT) |(1<<TWEN)
00061e 9300 00bc                 	sts TWCR, TEMP								
000620 d039                      	RCALL WaitDataI2c
                                 
000621 d074                      	RCALL DisplayEnable
                                 
000622 e008                      	ldi r16,0x08								;0x01_H	
000623 e018                      	ldi r17,0x08
000624 9300 00bb                 	sts TWDR, r16								
000626 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
000627 9300 00bc                 	sts TWCR, r16								
000629 d030                      	RCALL WaitDataI2c
                                 
00062a d06b                      	RCALL DisplayEnable
                                 
00062b e108                      	ldi r16,0x18								;0x01_L	
00062c e118                      	ldi r17,0x18
                                 		
00062d 9300 00bb                 	sts TWDR, r16								
00062f e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
000630 9300 00bc                 	sts TWCR, r16								
000632 d027                      	RCALL WaitDataI2c
                                 
000633 d062                      	RCALL DisplayEnable
                                 
000634 e008                      	ldi r16,0x08								;0x0F_H		
000635 e018                      	ldi r17,0x08
                                 
000636 9300 00bb                 	sts TWDR, r16								
000638 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
000639 9300 00bc                 	sts TWCR, r16								
00063b d01e                      	RCALL WaitDataI2c
                                 
00063c d059                      	RCALL DisplayEnable
                                 	
00063d ef08                      	ldi r16,0xF8								;0x0F_L	
00063e ef18                      	ldi r17,0xF8
00063f 9300 00bb                 	sts TWDR, r16								
000641 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
000642 9300 00bc                 	sts TWCR, r16								
000644 d015                      	RCALL WaitDataI2c
                                 
000645 d050                      	RCALL DisplayEnable
                                 
000646 e008                      	ldi r16,0x08							;0x06_H
000647 e018                      	ldi r17,0x08
000648 9300 00bb                 	sts TWDR, r16								
00064a e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
00064b 9300 00bc                 	sts TWCR, r16
00064d d00c                      	RCALL WaitDataI2c
                                 
00064e d047                      	RCALL DisplayEnable
                                 
00064f d0c1                      	RCALL retardo5ms
                                 	
000650 e608                      	ldi r16, 0x68							;0x06_L
000651 e618                      	ldi r17, 0x68
000652 9300 00bb                 	sts TWDR, r16								
000654 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
000655 9300 00bc                 	sts TWCR, r16
000657 d002                      	RCALL WaitDataI2c
                                 
000658 d03d                      	RCALL DisplayEnable
                                 
000659 9508                      	ret
                                 
                                 ;-----------Fin Inicialización display--------------
                                 
                                 ;--DISPLAY : DATA I2C OK---;
                                 
                                 WaitDataI2c:
                                 
                                 wait_twint:
00065a 9100 00bc                 	lds r16,TWCR
00065c ff07                      	sbrs r16,TWINT								; Espera TWINT para confirmar que se envió ok
00065d cffc                      	rjmp wait_twint
                                 
00065e 9100 00b9                 	lds r16,TWSR
000660 7f08                      	andi r16, 0xF8
000661 3208                      	cpi r16, MT_DATA_ACK
000662 f591                      	brne error_data
000663 9508                      	ret
                                 
                                 ;------DISPLAY : CHAR------;                  Con esta Funcion le enviamos un CHAR al display
                                 DisplayChar:
                                 
000664 2f08                      	mov r16,DISPVAR							  ;En DISPVAR tiene que estar el CHAR
000665 7f00                      	andi r16,0xF0							  ;Envio DISPVAR_H
000666 6009                      	ori r16,0x09
000667 2f10                      	mov r17,r16
000668 9300 00bb                 	sts TWDR, r16								; Carga DATA en twdr, limpia twint para empezar la transmision
00066a e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
00066b 9300 00bc                 	sts TWCR, r16
                                 
00066d dfec                      	RCALL WaitDataI2c
00066e d027                      	RCALL DisplayEnable
                                 
00066f 2f08                      	mov r16,DISPVAR							  ;Envio DISPVAR_L
000670 0f00                      	lsl r16
000671 0f00                      	lsl r16
000672 0f00                      	lsl r16
000673 0f00                      	lsl r16
000674 6009                      	ori r16,0x09
000675 2f10                      	mov r17,r16
000676 9300 00bb                 	sts TWDR, r16								
000678 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
000679 9300 00bc                 	sts TWCR, r16
00067b dfde                      	RCALL WaitDataI2c
                                 
00067c d019                      	RCALL DisplayEnable
                                 
00067d 9508                      	ret
                                 
                                 ;------Display :ENTER----------
                                 
                                 DisplayEnter:
                                 
00067e ec08                      	ldi r16,0xC8								;0x08_H
00067f ec18                      	ldi r17,0xC8
000680 9300 00bb                 	sts TWDR, r16								
000682 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
000683 9300 00bc                 	sts TWCR, r16								
000685 dfd4                      	RCALL WaitDataI2c
                                 
000686 d00f                      	RCALL DisplayEnable							
                                 
000687 e008                      	ldi r16,0x08								;0x08_L				
000688 e018                      	ldi r17,0x08
                                 	
000689 9300 00bb                 	sts TWDR, r16								
00068b e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
00068c 9300 00bc                 	sts TWCR, r16								
00068e dfcb                      	RCALL WaitDataI2c
                                 
00068f d006                      	RCALL DisplayEnable
000690 9508                      ret
                                 
                                 
                                 
                                 ;----DISPLAY : STOP------
                                 
                                 I2CStop:
000691 e904                      	ldi r16, (1<<TWINT)|(1<<TWEN)| (1<<TWSTO)	;Transmite bit de STOP
000692 9300 00bc                 	sts TWCR, r16
000694 9508                      			ret
                                 
                                 error_data:
000695 d011                      	RCALL ERROR1
                                 
                                 
                                 DisplayEnable:
000696 d065                      	RCALL retardo1ms
                                 	
000697 6014                      	ori r17, 0x04
000698 9310 00bb                 	sts TWDR, r17								
00069a e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
00069b 9300 00bc                 	sts TWCR, r16
00069d dfbc                      	RCALL WaitDataI2c
                                 ;	RCALL retardo1ms
                                 
00069e 7f1b                      	andi r17, 0b11111011
00069f 9310 00bb                 	sts TWDR, r17								
0006a1 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
0006a2 9300 00bc                 	sts TWCR, r16
0006a4 dfb5                      	RCALL WaitDataI2c
                                 
                                 	;RCALL retardo1ms
0006a5 9508                      	ret
                                 
                                 
                                 ;-----------Error----------------------------------
                                 
                                 ERROR:
                                 	
                                 	;ldi R16,0x02
                                 	;out PORTB,R16
0006a6 cfff                      	rjmp error
                                 
                                 ERROR1:
                                 	
                                 	;ldi R16,0x02
                                 	;out PORTB,R16
0006a7 e904                      	ldi r16, (1<<TWINT)|(1<<TWEN)| (1<<TWSTO)	;Transmite bit de STOP
0006a8 9300 00bc                 	sts TWCR, r16
0006aa cffb                      	rjmp error
                                 
                                 ;------Display :CLEAR----------
                                 DisplayClear:
0006ab e018                      	ldi r17, 0x08
0006ac e008                      	ldi	r16, 0x08
0006ad 9300 00bb                 	sts TWDR, r16								; Carga DATA en twdr, limpia twint para empezar la transmision
0006af e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
0006b0 9300 00bc                 	sts TWCR, r16
                                 
0006b2 dfa7                      	RCALL WaitDataI2c
0006b3 dfe2                      	RCALL DisplayEnable
                                 
0006b4 e118                      	ldi r17, 0x18
0006b5 e108                      	ldi r16, 0x18
0006b6 9300 00bb                 	sts TWDR, r16								
0006b8 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
0006b9 9300 00bc                 	sts TWCR, r16
0006bb df9e                      	RCALL WaitDataI2c
                                 
0006bc dfd9                      	RCALL DisplayEnable
                                 
0006bd 9508                      	ret
                                 
                                 DisplayToggleShift:
0006be e118                      	ldi r17, 0x18
0006bf e108                      	ldi	r16, 0x18
0006c0 9300 00bb                 	sts TWDR, r16								; Carga DATA en twdr, limpia twint para empezar la transmision
0006c2 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
0006c3 9300 00bc                 	sts TWCR, r16
                                 
0006c5 df94                      	RCALL WaitDataI2c
0006c6 dfcf                      	RCALL DisplayEnable
                                 
0006c7 e818                      	ldi r17, 0x88
0006c8 e808                      	ldi r16, 0x88
0006c9 9300 00bb                 	sts TWDR, r16								
0006cb e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
0006cc 9300 00bc                 	sts TWCR, r16
0006ce df8b                      	RCALL WaitDataI2c
                                 
0006cf dfc6                      	RCALL DisplayEnable
                                 
0006d0 9508                      	ret
                                 
                                 Shift:
0006d1 950a                      		DEC			TEMP
0006d2 f411                      		BRNE		SkipShift0
0006d3 dfea                      		RCALL		DisplayToggleShift
0006d4 ea00                      		LDI			TEMP,SHIFTDELAY		
                                 SkipShift0:
0006d5 d026                      		RCALL		retardo1ms
                                 
0006d6 9508                      		ret
                                 
                                 DisplayString:
0006d7 93ff                      	PUSH ZH
0006d8 93ef                      	PUSH ZL
0006d9 e040                      	LDI CONTADOR,0x00
                                 
                                 DisplayString_cont:
0006da 9543                      	INC CONTADOR	
0006db 9185                      	LPM DISPVAR, Z+
0006dc 3080                      	CPI DISPVAR,0x00
0006dd f7e1                      	BRNE DisplayString_cont
0006de 9543                      	INC CONTADOR
0006df 9185                      	LPM DISPVAR, Z+
0006e0 3080                      	CPI DISPVAR,0x00
0006e1 f7c1                      	BRNE DisplayString_cont
0006e2 954a                      	DEC CONTADOR
0006e3 954a                      	DEC CONTADOR
0006e4 91ef                      	POP ZL
0006e5 91ff                      	POP ZH
                                 
                                 DisplayString_next:
0006e6 9185                      	lpm DISPVAR, Z+
0006e7 3080                      	CPI DISPVAR,0x00
0006e8 f419                      	BRNE DisplayString_nextChar
0006e9 df94                      	RCALL DisplayEnter
0006ea 954a                      	DEC CONTADOR
0006eb cffa                      	RJMP DisplayString_next
                                 DisplayString_nextChar:
0006ec df77                      	RCALL DisplayChar
                                 
0006ed 954a                      	dec  CONTADOR
0006ee f7b9                      	brne DisplayString_next
                                 	
0006ef 9508                      	ret
                                 
                                 
                                 
                                 DispNum:
                                 	
                                 
0006f0 e300                      	ldi TEMP, 48
0006f1 0f30                      	add KEY,TEMP
                                 	
                                 	
                                 DispNum_cont:
0006f2 2f80                      	mov DISPVAR,TEMP
0006f3 df70                      	RCALL DisplayChar
                                 	
                                  .include "delay.asm"
0006f4 9508                      
                                  * delay.asm
                                  *
                                  *  Created: 05-Nov-16 5:35:06 PM
                                  *   Author: galca
                                  */ 
                                  retardo10us:
0006f5 930f                      	push TEMP
0006f6 e30a                      	ldi TEMP,58
                                 loop_ret_10:
0006f7 950a                      	dec TEMP
0006f8 0000                      	NOP
0006f9 f7e9                      	brne loop_ret_10
0006fa 910f                      	pop TEMP
0006fb 9508                      	ret
                                 
                                 retardo1ms:
0006fc 930f                      	push TEMP
0006fd e604                      	ldi TEMP,100
                                 loop_ret_1m:
0006fe dff6                      	RCALL retardo10us
0006ff 950a                      	dec TEMP	
000700 f7e9                      	brne loop_ret_1m
000701 910f                      	pop TEMP
000702 9508                      	ret
                                 
                                 retardo50ms:
000703 930f                      	push TEMP
000704 e302                      	ldi TEMP,50
                                 loop_ret_50m:
000705 dff6                      	RCALL retardo1ms
000706 950a                      	dec TEMP
000707 f7e9                      	brne loop_ret_50m
000708 910f                      	pop TEMP
000709 9508                      	ret
                                 
                                 retardo500ms:
00070a 930f                      	push TEMP
00070b e00a                      	ldi TEMP,10
                                 loop_ret_500m:
00070c dff6                      	RCALL retardo50ms
00070d 950a                      	dec TEMP
00070e f7e9                      	brne loop_ret_500m
00070f 910f                      	pop TEMP
000710 9508                      	ret
                                 
                                 retardo5ms:
000711 e005                      	ldi TEMP,5
                                 loop_ret_5m:
000712 dfe9                      	RCALL retardo1ms
000713 950a                      	dec TEMP
000714 f7e9                      	brne loop_ret_5m
000715 9508                      	ret
                                 
                                 retardo3s:
                                 
000716 e30c                      	ldi TEMP, 60
                                 loop_ret_3s:
000717 dfeb                      	RCALL retardo50ms
000718 950a                      	dec TEMP
000719 f7e9                      	brne loop_ret_3s
00071a 9508                      	ret
                                 
                                 retardo1s:
                                 
00071b e104                      	ldi TEMP, 20
                                 loop_ret_1s:
00071c dfe6                      	RCALL retardo50ms
00071d 950a                      	dec TEMP
00071e f7e9                      	brne loop_ret_1s
                                  .include "interface.asm"
00071f 9508                      
                                  * interface.asm
                                  *
                                  *  Created: 05-Nov-16 7:59:54 PM
                                  *   Author: galca
                                  */ 
                                 
                                  ;....................Display welcome............................
                                 DisplayWelcome:
                                 	
000720 e0fe                      	LDi ZH, High(2*T_Welcome)
000721 e8e8                      	LDI ZL, LOW(2*T_Welcome)
                                 	
000722 dfb4                      	RCALL DisplayString
000723 df5a                      	RCALL DisplayEnter
                                 	
000724 e0fe                      	LDI ZH, High(2*T_Cocktail)
000725 e9e6                      	LDI ZL, LOW(2*T_Cocktail)
                                 	
000726 dfb0                      	RCALL DisplayString
                                 		
000727 9508                      	ret
                                 
                                 DisplayMenu0:
                                 	
000728 e0fe                      	LDi ZH, High(2*T_Mode_Select)
000729 eae6                      	LDI ZL, LOW(2*T_Mode_Select)
                                 	
00072a dfac                      	RCALL DisplayString
                                 	
                                 		
00072b 9508                      	ret
                                 
                                 DisplayMenu1a:
                                 	
00072c e0fe                      	LDi ZH, High(2*T_Pred_Select)
00072d edea                      	LDI ZL, LOW(2*T_Pred_Select)
                                 	
00072e dfa8                      	RCALL DisplayString
                                 	
                                 		
00072f 9508                      	ret
                                 
                                 DisplayMenu2a:
                                 	
000730 e0ff                      	LDi ZH, High(2*T_Pot_Select)
000731 e0ee                      	LDI ZL, LOW(2*T_Pot_Select)
                                 	
000732 dfa4                      	RCALL DisplayString
                                 	
                                 		
000733 9508                      	ret
                                 
                                 DisplayMenu1b:
                                 	
000734 e0ff                      	LDi ZH, High(2*T_Bebida1_Select)
000735 e4e2                      	LDI ZL, LOW(2*T_Bebida1_Select)
                                 	
000736 dfa0                      	RCALL DisplayString
                                 	
                                 		
000737 9508                      	ret
                                 
                                 DisplayMenu2b:
                                 	
000738 e0ff                      	LDi ZH, High(2*T_Porc_Select)
000739 e7e8                      	LDI ZL, LOW(2*T_Porc_Select)
                                 	
00073a df9c                      	RCALL DisplayString
                                 	
                                 		
00073b 9508                      	ret
                                 
                                 DisplayWait:
                                 	
00073c e0ff                      	LDi ZH, High(2*T_Espere)
00073d e9e2                      	LDI ZL, LOW(2*T_Espere)
                                 
00073e df98                      	RCALL DisplayString
00073f 9508                      	ret
                                 
                                 DisplayDone:
                                 	
000740 e0ff                      	LDi ZH, High(2*T_Listo)
000741 eae8                      	LDI ZL, LOW(2*T_Listo)
                                 
000742 df94                      	RCALL DisplayString
000743 9508                      	ret
                                 
                                  ;....................TABLAS (display)...........................
                                 
                                 T_Welcome:
000744 4942
000745 4e45
000746 4556
000747 494e
000748 4f44
000749 2153
00074a 0000                      	.Db 'B','I','E','N','V','E','N','I','D','O','S','!',0,0
                                 
                                 T_COCKTail:
00074b 2a2a
00074c 432a
00074d 434f
00074e 2d4b
00074f 4154
000750 4c49
000751 2a2a
000752 0000                      	.DB '*','*','*','C','O','C','K','-','T','A','I','L','*','*',0,0
                                 	
                                 T_Mode_Select:
000753 6553
000754 656c
000755 6363
000756 6f69
000757 656e
000758 6d20
000759 646f
00075a 206f
00075b 6564
00075c 6f20
00075d 6570
00075e 6172
00075f 6963
000760 6e6f
000761 003a
000762 2d31
000763 6142
000764 6973
000765 6f63
000766 3220
000767 412d
000768 6176
000769 7a6e
00076a 6461
00076b 006f
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm(99): warning: .cseg .db misalignment - padding zero byte
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(210): 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm' included form here
00076c 0000                      	.DB		"Seleccione modo de operacion:",0,"1-Basico 2-Avanzado",0,0 
                                 
                                 T_Pred_Select:
00076d 6553
00076e 656c
00076f 6363
000770 6f69
000771 656e
000772 6220
000773 6265
000774 6469
000775 3a61
000776 3100
000777 462d
000778 7265
000779 656e
00077a 2074
00077b 2d32
00077c 6857
00077d 7369
00077e 6f63
00077f 616c
000780 3320
000781 432d
000782 636f
000783 2d61
000784 6f43
000785 616c
000786 0000                      	.DB		"Seleccione bebida:",0,"1-Fernet 2-Whiscola 3-Coca-Cola",0,0
                                 
                                 T_Pot_Select:
000787 6553
000788 656c
000789 6363
00078a 6f69
00078b 656e
00078c 7020
00078d 746f
00078e 6e65
00078f 6963
000790 3a61
000791 3100
000792 432d
000793 726f
000794 6f64
000795 6562
000796 2073
000797 2d32
000798 654d
000799 6964
00079a 2061
00079b 2d33
00079c 6e49
00079d 6166
00079e 746e
00079f 6c69
0007a0 0000                      	.DB		"Seleccione potencia:",0,"1-Cordobes 2-Media 3-Infantil",0,0
                                 
                                 T_Bebida1_Select:
0007a1 6553
0007a2 656c
0007a3 6363
0007a4 6f69
0007a5 656e
0007a6 7020
0007a7 6972
0007a8 656d
0007a9 6172
0007aa 6220
0007ab 6265
0007ac 6469
0007ad 3a61
0007ae 3100
0007af 462d
0007b0 7265
0007b1 656e
0007b2 2074
0007b3 2d32
0007b4 6857
0007b5 7369
0007b6 796b
0007b7 3320
0007b8 432d
0007b9 636f
0007ba 0061
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm(108): warning: .cseg .db misalignment - padding zero byte
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(210): 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm' included form here
0007bb 0000                      	.DB		"Seleccione primera bebida:",0,"1-Fernet 2-Whisky 3-Coca",0,0
                                 
                                 T_Porc_Select:
0007bc 6e49
0007bd 7274
0007be 646f
0007bf 7a75
0007c0 6163
0007c1 7000
0007c2 726f
0007c3 6563
0007c4 746e
0007c5 6a61
0007c6 3a65
0007c7 0020
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm(111): warning: .cseg .db misalignment - padding zero byte
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(210): 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm' included form here
0007c8 0000                      	.DB		"Introduzca",0,"porcentaje: ",0,0
                                 
                                 T_Espere:
0007c9 7345
0007ca 6570
0007cb 6572
0007cc 0020
0007cd 6f70
0007ce 2072
0007cf 6166
0007d0 6f76
0007d1 2e72
0007d2 2e2e
0007d3 0000                      	.DB		"Espere ",0,"por favor...",0,0
                                 
                                 T_Listo:
0007d4 694c
0007d5 7473
0007d6 216f
0007d7 5220
0007d8 7465
0007d9 7269
0007da 2065
0007db 7573
0007dc 6200
0007dd 6265
0007de 6469
0007df 2061
0007e0 6f70
0007e1 2072
0007e2 6166
0007e3 6f76                       .include "math.asm"
0007e4 0072
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\math.asm(1): warning: .cseg .db misalignment - padding zero byte
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(211): 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\math.asm' included form here
0007e5 0000                      
                                  * math.asm
                                  *
                                  *  Created: 18-Nov-16 11:18:15 AM
                                  *   Author: galca
                                  */ 
                                 
                                  .DEF	DENOMINATOR = R2
                                  .DEF	QUOTIENT = R3
                                  .DEF	NUM = R4
                                 
                                 keyb_to_bcd:
0007e6 91ff                      		POP			ZH
0007e7 91ef                      		POP			ZL
0007e8 910f                      		POP			TEMP
0007e9 700f                      		ANDI		TEMP,0x0F
0007ea 9502                      		SWAP		TEMP
                                 
0007eb 2e50                      		MOV			TEMP2,TEMP
0007ec 910f                      		POP			TEMP
0007ed 700f                      		ANDI		TEMP,0x0F
0007ee 2905                      		OR			TEMP,TEMP2
0007ef 930f                      		PUSH		TEMP
0007f0 93ef                      		PUSH		ZL
0007f1 93ff                      		PUSH		ZH
                                 
0007f2 9508                      		RET
                                 
                                 bcd_to_bin:
0007f3 91ff                      		POP			ZH
0007f4 91ef                      		POP			ZL
0007f5 910f                      		POP			TEMP
0007f6 930f                      		PUSH		TEMP
0007f7 700f                      		ANDI		TEMP,0x0F
0007f8 2e50                      		MOV			TEMP2,TEMP
0007f9 910f                      		POP			TEMP
0007fa 9502                      		SWAP		TEMP
0007fb 700f                      		ANDI		TEMP,0x0F
0007fc 2e60                      		MOV			TEMP3,TEMP
0007fd e00a                      		LDI			TEMP,10
0007fe 9e60                      		MUL			TEMP3,TEMP
0007ff 0130                      		MOVW		TEMP3,R0
000800 1c65                      		ADC			TEMP3,TEMP2
000801 926f                      		PUSH		TEMP3
000802 93ef                      		PUSH		ZL
000803 93ff                      		PUSH		ZH
                                 		
000804 9508                      		RET
                                 
                                 
                                 bcd_to_ascii:
000805 91ff                      		POP			ZH
000806 91ef                      		POP			ZL
000807 910f                      		POP			TEMP
000808 930f                      		PUSH		TEMP
000809 700f                      		ANDI		TEMP,0x0F
00080a 6300                      		ORI			TEMP,0x30
                                 
00080b 2e50                      		MOV			TEMP2,TEMP
00080c 910f                      		POP			TEMP
00080d 925f                      		PUSH		TEMP2
00080e 9502                      		SWAP		TEMP
00080f 700f                      		ANDI		TEMP,0x0F
000810 6300                      		ORI			TEMP,0x30
000811 930f                      		PUSH		TEMP
                                 
000812 93ef                      		PUSH		ZL
000813 93ff                      		PUSH		ZH
000814 9508                      		RET
                                 
                                 pack_bcd:
000815 91ff                      		POP			ZH
000816 91ef                      		POP			ZL
000817 905f                      		POP			TEMP2
000818 910f                      		POP			TEMP
000819 9452                      		SWAP		TEMP2
00081a 2905                      		OR			TEMP,TEMP2
00081b 930f                      		PUSH		TEMP
00081c 93ef                      		PUSH		ZL
00081d 93ff                      		PUSH		ZH
00081e 9508                      		RET
                                 
                                 bin_to_bcd:
00081f 91ff                      		POP			ZH
000820 91ef                      		POP			ZL
000821 904f                      		POP			NUM
000822 e00a                      		LDI			TEMP,10
000823 2e20                      		MOV			DENOMINATOR,TEMP
000824 d00e                      		RCALL		DIVIDE
000825 2d04                      		MOV			TEMP,NUM
000826 2e40                      		MOV			NUM,TEMP
000827 924f                      		PUSH		NUM
000828 2c43                      		MOV			NUM,QUOTIENT
000829 d009                      		RCALL		DIVIDE
00082a 2d04                      		MOV			TEMP,NUM
00082b 2e40                      		MOV			NUM,TEMP
00082c 924f                      		PUSH		NUM
00082d 2d03                      		MOV			TEMP,QUOTIENT
00082e 2e30                      		MOV			QUOTIENT,TEMP
00082f 923f                      		PUSH		QUOTIENT
000830 93ef                      		PUSH		ZL
000831 93ff                      		PUSH		ZH
000832 9508                      		RET
                                 
                                 DIVIDE:
000833 e000                      		LDI			TEMP,0
000834 2e30                      		MOV			QUOTIENT,TEMP
                                 DIVLOOP:
000835 9433                      		INC			QUOTIENT
000836 1842                      		SUB			NUM,DENOMINATOR
000837 f7e8                      		BRCC		DIVLOOP
000838 943a                      		DEC			QUOTIENT
000839 0c42                      		ADD			NUM,DENOMINATOR
                                  .include "ultrasound_driver.asm"
00083a 9508                      
                                  * ultrasound_driver.asm
                                  *
                                  *  Created: 19-Nov-16 4:18:04 PM
                                  *   Author: galca
                                  */ 
                                 
                                 .EQU USART_BAUDRATE = 9600
                                 .EQU BAUD_PRESCALE = (((F_CPU / (USART_BAUDRATE * 16))) - 1)
                                 
                                 InitUsart:
00083b e108                      		LDI		TEMP,(1<<TXEN0)|(1<<RXEN0)
00083c 9300 00c1                 		STS		UCSR0B,TEMP
00083e e006                      		LDI		TEMP,(3<<UCSZ00)
00083f 9300 00c2                 		STS		UCSR0C,R16
000841 e707                      		LDI		TEMP,0X77
000842 9300 00c4                 		STS		UBRR0L,TEMP
000844 e000                      		LDI		TEMP,0x00
000845 9300 00c5                 		STS		UBRR0H,TEMP
                                 
000847 9508                      		RET
                                 
                                 measurement:
000848 91ff                      		POP		ZH
000849 91ef                      		POP		ZL
                                 
00084a e505                      		LDI		TEMP,0x55
00084b d009                      		RCALL	transmit
00084c deb6                      		RCALL	retardo50ms
00084d d00e                      		RCALL	receive
00084e 930f                      		PUSH	TEMP
00084f d00c                      		RCALL	receive
000850 930f                      		PUSH	TEMP
000851 d00a                      		RCALL receive
                                 
000852 93ef                      		PUSH	ZL
000853 93ff                      		PUSH	ZH
000854 9508                      		RET
                                 
                                 
                                 transmit:		
000855 9050 00c0                 		LDS		TEMP2,UCSR0A
000857 fe55                      		SBRS	TEMP2,UDRE0
000858 cffc                      		RJMP	transmit
000859 9300 00c6                 		STS		UDR0,TEMP
00085b 9508                      		RET
                                 
                                 receive:
00085c 9050 00c0                 		LDS		TEMP2,UCSR0A
00085e fe55                      		SBRS	TEMP2,UDRE0
00085f cffc                      		RJMP	receive
000860 9100 00c6                 		LDS		TEMP,UDR0
000862 9508                      
                                 
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :   0 z  :   3 r0 :   1 r1 :   0 r2 :   3 r3 :   7 r4 :  10 
r5 :  18 r6 :   5 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 235 r17:  40 r18:   0 r19:  25 r20:   7 
r21:  11 r22:   0 r23:   0 r24:  17 r25:   0 r26:   0 r27:   0 r28:   0 
r29:   0 r30:  23 r31:  23 
Registers used: 15 out of 35 (42.9%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   1 add   :   3 adiw  :   0 and   :   0 
andi  :  12 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   1 brcs  :   0 break :   0 breq  :   7 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  16 brpl  :   0 brsh  :   3 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   0 cbr   :   2 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   1 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :  16 cpse  :   0 dec   :  14 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :   6 jmp   :   0 
ld    :   0 ldd   :   0 ldi   : 119 lds   :  11 lpm   :   3 lsl   :   4 
lsr   :   0 mov   :  26 movw  :   1 mul   :   1 muls  :   0 mulsu :   0 
neg   :   0 nop   :   1 or    :   2 ori   :   6 out   :   8 pop   :  40 
push  :  36 rcall : 151 ret   :  45 reti  :   0 rjmp  :  23 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   0 sbic  :   3 sbis  :   0 
sbiw  :   0 sbr   :   3 sbrc  :   4 sbrs  :   5 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :  57 
sub   :   3 subi  :   0 swap  :   4 tst   :   0 wdr   :   0 
Instructions used: 35 out of 113 (31.0%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0010c6   1412    324   1736   32768   5.3%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 5 warnings
