
AVRASM ver. 2.2.6  D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm Sun Nov 13 19:38:26 2016

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.0.106\avrasm\inc\m328pdef.inc'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(86): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\kb_driver.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(87): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\disp_driver.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(88): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\delay.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(89): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.0.106\avrasm\inc\m328pdef.inc'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(86): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\kb_driver.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(87): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\disp_driver.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(88): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\delay.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(89): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; mas-cocktail.asm
                                 ;
                                 ; Created: 01-Oct-16 1:40:18 PM
                                 ; Author : galca
                                 ;
                                 ; LEDs verdes: PORTD 4 y 7
                                 ; LEDs rojos: PORTC 2 y 3
                                  .equ CRYSTAL = 8000000
                                 
                                 .CSEG
000000 c000                      		RJMP		BEGIN
                                 
                                 
                                 
                                 
                                 BEGIN:
000001 ef4f                      		LDI			R20,0XFF
000002 b947                      		OUT			DDRC,R20
000003 b94a                      		OUT			DDRD,R20
000004 d02b                      		RCALL		KBINIT
000005 d060                      		RCALL		InicI2C			; esta funcion inicializa el display, si o si tiene que ir. no hace falta modificarle nada
000006 d082                      		RCALL		InicDisplay		; lo mismo que la anterior
                                 
                                  MAIN:	
                                 /*		RCALL		GETKEY
                                 		ldi			TEMP,48
                                 		ADD			KEY,TEMP
                                 		MOV			DISPVAR,KEY
                                 		RCALL		DisplayChar*/
000007 d1a0                      		RCALL		DisplayWelcome
000008 d19a                      		RCALL		retardo3s
000009 d145                      		RCALL		DisplayClear
00000a d1a5                      		RCALL		DisplayMenu0
                                 
                                 KeyMenu0:		
00000b d02b                      		RCALL		GETKEY
00000c 3031                      		CPI			KEY,0x01
00000d f019                      		BREQ		KeyMenu1a
00000e 3032                      		CPI			KEY,0x02
00000f f071                      		BREQ		KeyMenu1b
000010 cffa                      		RJMP		KeyMenu0
                                 KeyMenu1a:
000011 d13d                      		RCALL		DisplayClear
000012 d1a1                      		RCALL		DisplayMenu1a
                                 getk1a:
000013 d023                      		RCALL		GETKEY
000014 3034                      		CPI			KEY,0x04
000015 f7e8                      		BRSH		getk1a
                                 KeyMenu2a:
000016 d138                      		RCALL		DisplayClear
000017 d1a0                      		RCALL		DisplayMenu2a
                                 getk2a:		
000018 d01e                      		RCALL		GETKEY
000019 3030                      		CPI			KEY,0x00
00001a f3e9                      		BREQ		getk2a
00001b 3033                      		CPI			KEY,0x03
00001c f7d8                      		BRSH		getk2a
00001d c011                      		RJMP		END
                                 KeyMenu1b:
00001e d130                      		RCALL		DisplayClear
00001f d19c                      		RCALL		DisplayMenu1b
                                 getk1b:		
000020 d016                      		RCALL		GETKEY
000021 3030                      		CPI			KEY,0x00
000022 f3e9                      		BREQ		getk1b
000023 3033                      		CPI			KEY,0x03
000024 f7d8                      		BRSH		getk1b
                                 KeyMenu2b:
000025 d129                      		RCALL		DisplayClear
000026 d199                      		RCALL		DisplayMenu2b
                                 getk2b:		
000027 d00f                      		RCALL		GETKEY
000028 3030                      		CPI			KEY,0x00
000029 f3e9                      		BREQ		getk2b
00002a 3033                      		CPI			KEY,0x03
00002b f7d8                      		BRSH		getk2b
                                 KeyMenu3b:
00002c d122                      		RCALL		DisplayClear
00002d d196                      		RCALL		DisplayMenu3b
00002e d008                      		RCALL		GETKEY
                                 
                                 END:
00002f cfdb                      		RJMP		KeyMenu0
                                 
                                  .include "kb_driver.asm"
                                 
                                  * kb_driver.asm
                                  *
                                  *  Created: 25-Oct-16 10:23:47 PM
                                  *   Author: galca
                                  */ 
                                 
                                 .EQU COL1 = PINB0
                                 .EQU COL2 = PINB1
                                 .EQU COL3 = PINB2
                                 
                                 .EQU ROW1 = PINB3
                                 .EQU ROW2 = PINB7
                                 .EQU ROW3 = PINB5
                                 .EQU ROW4 = PINB4
                                 
                                 .EQU ROW1VAL = 1
                                 .EQU ROW2VAL = 4
                                 .EQU ROW3VAL = 7
                                 .EQU ROW4VAL = 10
                                 
                                 .EQU KBPORT = PORTB
                                 .EQU PRESSED = 0
                                 .EQU KBCONF = 0xF8
                                 .EQU KBPULLUPS = 0x07
                                  
                                 
                                 .DEF KBTEMP = R17
                                 .DEF KBFLAGS = R18
                                 .DEF KEY = R19
                                  
                                 .CSEG
                                 
                                 KBINIT:
000030 931f                      		PUSH		KBTEMP
000031 ef18                       		LDI			KBTEMP,KBCONF		;cols como input, filas como output
000032 b914                      		OUT			DDRB,KBTEMP	
000033 e017                      		LDI			KBTEMP,KBPULLUPS		;habilitar pullups en el input
000034 b915                      		OUT			KBPORT,KBTEMP
000035 911f                      		POP			KBTEMP	
000036 9508                      		RET
                                 
                                  GETKEY:
                                 												;Esta sección lee la fila 1
000037 e031                      		LDI			KEY,ROW1VAL					;carga el valor de la primera tecla de la fila 1 en "key"
000038 ef17                      		LDI			KBTEMP,~(1<<ROW1)			;"apaga" fila 1 (carga un byte de unos con un único cero en la posición "ROW1")
000039 b915                      		OUT			KBPORT,KBTEMP				;y cargando el valor al puerto usado por el teclado
00003a d013                      		RCALL		READ_COL					;se pasa a leer las columnas, esperando encontrar coincidencias
                                  
00003b fd20                      		SBRC		KBFLAGS,PRESSED				;si se registró una tecla presionada
00003c c010                      		RJMP		DONE						;salir de la subrutina
                                  
                                 												;Esta sección lee la fila 2
00003d e034                      		LDI			KEY,ROW2VAL					;carga el valor de la primera tecla de la fila 2 en "key"
00003e e71f                      		LDI			KBTEMP,~(1<<ROW2)			;"apaga" fila 2 (carga un byte de unos con un único cero en la posición "ROW2")
00003f b915                      		OUT			KBPORT,KBTEMP				;y cargando el valor al puerto usado por el teclado
000040 d00d                      		RCALL		READ_COL					;se pasa a leer las columnas, esperando encontrar coincidencias
                                  
000041 fd20                      		SBRC		KBFLAGS,PRESSED				;si se registró una tecla presionada
000042 c00a                      		RJMP		DONE						;salir de la subrutina
                                 												
                                 												;Esta sección lee la fila 3
000043 e037                      		LDI			KEY,ROW3VAL					;carga el valor de la primera tecla de la fila 3 en "key"
000044 ed1f                      		LDI			KBTEMP,~(1<<ROW3)			;"apaga" fila 3 (carga un byte de unos con un único cero en la posición "ROW3")
000045 b915                      		OUT			KBPORT,KBTEMP				;y cargando el valor al puerto usado por el teclado
000046 d007                      		RCALL		READ_COL					;se pasa a leer las columnas, esperando encontrar coincidencias
                                 
000047 fd20                      		SBRC		KBFLAGS,PRESSED				;si se registró una tecla presionada
000048 c004                      		RJMP		DONE						;salir de la subrutina
                                  
                                 												;Esta sección lee la fila 4
000049 e03a                      		LDI			KEY,ROW4VAL					;carga el valor de la primera tecla de la fila 4 en "key"
00004a ee1f                      		LDI			KBTEMP,~(1<<ROW4)			;"apaga" fila 4 (carga un byte de unos con un único cero en la posición "ROW4")
00004b b915                      		OUT			KBPORT,KBTEMP				;y cargando el valor al puerto usado por el teclado
00004c d001                      		RCALL		READ_COL					;se pasa a leer las columnas, esperando encontrar coincidencias
                                  
                                 DONE:					
00004d 9508                      		RET
                                  
                                 READ_COL:
00004e d013                      		RCALL		SETTLE
00004f 7f2e                      		CBR			KBFLAGS, (1<<PRESSED)		;estado = no presionado
                                  
000050 9918                      		SBIC		PINB, COL1					;lee columna 1
000051 c002                      		RJMP		NEXTCOL						;si no, pasar a columna 2
000052 6021                      		SBR			KBFLAGS, (1<<PRESSED)		;estado = presionado
000053 9508                      		RET										;devolver el valor de la primer columna de la fila
                                 NEXTCOL:
000054 9919                      		SBIC		PINB,COL2					;lee columna 2
000055 c003                      		RJMP		NEXTCOL1					;si no, pasar a columna 3
000056 9533                      		INC			KEY							
000057 6021                      		SBR			KBFLAGS,(1<<PRESSED)		;estado = presionado
000058 9508                      		RET										;devolver el valor de la segunda columna de la fila
                                 NEXTCOL1:
000059 991a                      		SBIC		PINB,COL3					;lee columna 3
00005a c004                      		RJMP		EXIT						;si no, termina
00005b 9533                      		INC			KEY							;estado = presionado
00005c 9533                      		INC			KEY
00005d 6021                      		SBR			KBFLAGS, (1<<PRESSED)		;estado=presionado
00005e 9508                      		RET										;devolver el valor de la tercer columna de la fila
                                 EXIT:
00005f 2733                      		CLR			KEY							;vacía el valor de la tecla
000060 7f2e                      		CBR			KBFLAGS, (1<<PRESSED)		;no se presionó ninguna tecla
000061 9508                      		RET										
                                 SETTLE:
000062 ef1f                      		LDI			KBTEMP,255
000063 951a                      TAGAIN: DEC			KBTEMP
000064 f7f1                      		BRNE		TAGAIN
                                  .include "disp_driver.asm"
000065 9508                      
                                  * disp_driver.asm
                                  *
                                  *  Created: 01-Nov-16 5:01:30 PM
                                  *   Author: galca
                                  */ 
                                  ;
                                 ; display.asm
                                 ;
                                 ; Created: 23/9/2016 2:16:36 p. m.
                                 ; Author : waral
                                 ;
                                 	.def TEMP = R16
                                 	.def CONTADOR = R20
                                 	.def DISPVAR = R24
                                 
                                 	.equ TWI_RATE = 0xF8
                                 	.equ STARTi = 0x08
                                 	.equ MT_SLA_ACK = 0x20
                                 	.equ MT_DATA_ACK= 0x28
                                 	.equ SL_ADD = 0b01001110
                                 
                                 
                                 ;para usar el i2c no hay que inicializar nada de los puertos... 
                                 ;lo que yo puse fue para encender un led que me diga que esta todo ok
                                 
                                 
                                 /*start:
                                 	ldi TEMP , 0x02		; inicializacion led de error
                                 	out ddrb , TEMP
                                 	ldi TEMP , 0x00			
                                 	out portb , TEMP	;esto tranquilamente se puede borrar
                                 	
                                 	RCALL InicI2C			; esta funcion inicializa el display, si o si tiene que ir. no hace falta modificarle nada
                                 	RCALL InicDisplay		; lo mismo que la anterior
                                 	RCALL DisplayCocktail	; Mando "Cocktail" al display
                                 	RCALL DisplayEnter		; Mando "Enter" al display
                                 	RCALL DisplayWelcome	; Mando "Welcome" al display
                                 	
                                 
                                 
                                 	RCALL I2CStop			; cuando finaliza el programa hay que ponerle stop al i2c
                                 	
                                 	ldi R16,0x02	;LED INDICADOR DE FINALIZACION OK DE PROGRAMA
                                 	out PORTB,R16
                                 
                                 loop:
                                 	rjmp loop			;loop infinito
                                 
                                     rjmp start			;vuelve al inicio*/
                                 
                                 ;---------------------------------------------------------------------
                                 ;---------------------------------------------------------------------
                                 ;-----------------------------Fin start-------------------------------
                                 ;---------------------------------------------------------------------
                                 ;---------------------------------------------------------------------
                                 
                                 
                                 
                                 ;----------------------------SUBRUTINAS-------------------------------
                                 
                                 ;_____________________________________________________
                                 ;;;;;;;;;;;;;;;;;DISPLAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;|
                                 ;_____________________________________________________|
                                 
                                 ;------- inicializacion i2c-------
                                 InicI2C:	
                                 	
000066 ef08                      	ldi TEMP, TWI_RATE
000067 9300 00b8                 	sts TWBR,TEMP
                                 
000069 ea04                      	ldi TEMP, (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)   
00006a 9300 00bc                 	sts TWCR, TEMP								;envia condicion de start
                                 
                                 wait1:
00006c 9100 00bc                 	lds TEMP,TWCR
00006e ff07                      	sbrs TEMP,TWINT								;espera flag de start ok
00006f cffc                      	rjmp wait1
                                 
000070 9100 00b9                 	lds TEMP,TWSR
000072 7f08                      	andi TEMP, 0xF8								;si el estado en el registro TWI es distinto de START se va a error
000073 3008                      	cpi TEMP, STARTi
000074 f409                      	brne error_A
000075 c001                      	rjmp continuo
                                 error_A:
000076 d0d4                      	RCALL ERROR1
                                 	
                                 continuo:
000077 e40e                      	ldi TEMP, SL_ADD								
000078 9300 00bb                 	sts TWDR, TEMP								;Carga direccion del esclavo en el registro TWDR, limpia bit TWINT para empezar la transmision de la direccion
00007a e804                      	ldi TEMP, (1<<TWINT) | (1<<TWEN)
00007b 9300 00bc                 	sts TWCR, TEMP								;envio direccion del esclavo
                                 
                                 wait2:
00007d 9100 00bc                 	lds TEMP,TWCR
00007f ff07                      	sbrs TEMP,TWINT								;espera seteo de TWINT para confirmar transmision ok
000080 cffc                      	rjmp wait2
                                 
000081 9100 00b9                 	lds TEMP,TWSR
000083 7f08                      	andi TEMP, 0xF8								;chequea el registro TWI, salta a error si no se transmitio bien
000084 3200                      	cpi TEMP, MT_SLA_ACK
000085 f009                      	breq error_B
000086 c001                      	rjmp continuo2
                                 error_B:
000087 d0c3                      	RCALL ERROR1
                                 continuo2:
000088 9508                      	ret
                                 	
                                 ;----------------------------------Fin inicializacion i2c----------------------------------------;
                                 
                                 ;.................................incialización display, envio de a 4bits........................;
                                 InicDisplay:	
                                 	
000089 d10d                      	RCALL retardo50ms
                                 	
00008a e300                      	ldi TEMP, 0x30
00008b e310                      	ldi r17,0x30
00008c 9300 00bb                 	sts TWDR, TEMP								; Carga DATA en twdr, limpia twint para empezar la transmision
00008e e804                      	ldi TEMP, (1<<TWINT) |(1<<TWEN)
00008f 9300 00bc                 	sts TWCR, TEMP								
000091 d06c                      	RCALL WaitDataI2c
                                 
000092 d0a7                      	RCALL DisplayEnable
                                 
000093 d10a                      	RCALL retardo5ms
                                 
000094 d0a5                      	RCALL DisplayEnable
                                 
000095 d0fa                      	RCALL retardo1ms
                                 												; todo esto te lo pide que hagas la hoja de datos del display
000096 d0a3                      	RCALL DisplayEnable
                                 
000097 d106                      	RCALL retardo5ms
                                 
000098 e208                      	ldi r16, 0x28								;set 4bit mode
000099 e218                      	ldi r17,0x28
00009a 9300 00bb                 	sts TWDR, r16								
00009c e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
00009d 9300 00bc                 	sts TWCR, r16								
00009f d05e                      	RCALL WaitDataI2c
                                 	
0000a0 d099                      	RCALL DisplayEnable
                                 
0000a1 d0ee                      	RCALL retardo1ms
                                 
0000a2 e208                      	ldi TEMP,0x28								;0x28_H
0000a3 e218                      	ldi r17,0x28
0000a4 9300 00bb                 	sts TWDR, TEMP								
0000a6 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
0000a7 9300 00bc                 	sts TWCR, TEMP								
0000a9 d054                      	RCALL WaitDataI2c
                                 
0000aa d08f                      	RCALL DisplayEnable
                                 
0000ab e808                      	ldi TEMP,0x88								;0x28_L
0000ac e818                      	ldi r17,0x88
0000ad 9300 00bb                 	sts TWDR, r16								
0000af e804                      	ldi TEMP, (1<<TWINT) |(1<<TWEN)
0000b0 9300 00bc                 	sts TWCR, TEMP								
0000b2 d04b                      	RCALL WaitDataI2c
                                 
0000b3 d086                      	RCALL DisplayEnable
                                 
0000b4 e008                      	ldi TEMP, 0x08								;0x08_H
0000b5 e018                      	ldi r17,0x08
0000b6 9300 00bb                 	sts TWDR, TEMP								
0000b8 e804                      	ldi TEMP, (1<<TWINT) |(1<<TWEN)
0000b9 9300 00bc                 	sts TWCR, TEMP								
0000bb d042                      	RCALL WaitDataI2c
                                 
0000bc d07d                      	RCALL DisplayEnable							
                                 
0000bd e808                      	ldi TEMP,0x88								;0x08_L				
0000be e818                      	ldi r17,0x88
                                 	
0000bf 9300 00bb                 	sts TWDR, TEMP								
0000c1 e804                      	ldi TEMP, (1<<TWINT) |(1<<TWEN)
0000c2 9300 00bc                 	sts TWCR, TEMP								
0000c4 d039                      	RCALL WaitDataI2c
                                 
0000c5 d074                      	RCALL DisplayEnable
                                 
0000c6 e008                      	ldi r16,0x08								;0x01_H	
0000c7 e018                      	ldi r17,0x08
0000c8 9300 00bb                 	sts TWDR, r16								
0000ca e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
0000cb 9300 00bc                 	sts TWCR, r16								
0000cd d030                      	RCALL WaitDataI2c
                                 
0000ce d06b                      	RCALL DisplayEnable
                                 
0000cf e108                      	ldi r16,0x18								;0x01_L	
0000d0 e118                      	ldi r17,0x18
                                 		
0000d1 9300 00bb                 	sts TWDR, r16								
0000d3 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
0000d4 9300 00bc                 	sts TWCR, r16								
0000d6 d027                      	RCALL WaitDataI2c
                                 
0000d7 d062                      	RCALL DisplayEnable
                                 
0000d8 e008                      	ldi r16,0x08								;0x0F_H		
0000d9 e018                      	ldi r17,0x08
                                 
0000da 9300 00bb                 	sts TWDR, r16								
0000dc e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
0000dd 9300 00bc                 	sts TWCR, r16								
0000df d01e                      	RCALL WaitDataI2c
                                 
0000e0 d059                      	RCALL DisplayEnable
                                 	
0000e1 ef08                      	ldi r16,0xF8								;0x0F_L	
0000e2 ef18                      	ldi r17,0xF8
0000e3 9300 00bb                 	sts TWDR, r16								
0000e5 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
0000e6 9300 00bc                 	sts TWCR, r16								
0000e8 d015                      	RCALL WaitDataI2c
                                 
0000e9 d050                      	RCALL DisplayEnable
                                 
0000ea e008                      	ldi r16,0x08							;0x06_H
0000eb e018                      	ldi r17,0x08
0000ec 9300 00bb                 	sts TWDR, r16								
0000ee e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
0000ef 9300 00bc                 	sts TWCR, r16
0000f1 d00c                      	RCALL WaitDataI2c
                                 
0000f2 d047                      	RCALL DisplayEnable
                                 
0000f3 d0aa                      	RCALL retardo5ms
                                 	
0000f4 e608                      	ldi r16, 0x68							;0x06_L
0000f5 e618                      	ldi r17, 0x68
0000f6 9300 00bb                 	sts TWDR, r16								
0000f8 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
0000f9 9300 00bc                 	sts TWCR, r16
0000fb d002                      	RCALL WaitDataI2c
                                 
0000fc d03d                      	RCALL DisplayEnable
                                 
0000fd 9508                      	ret
                                 
                                 ;-----------Fin Inicialización display--------------
                                 
                                 ;--DISPLAY : DATA I2C OK---;
                                 
                                 WaitDataI2c:
                                 
                                 wait_twint:
0000fe 9100 00bc                 	lds r16,TWCR
000100 ff07                      	sbrs r16,TWINT								; Espera TWINT para confirmar que se envió ok
000101 cffc                      	rjmp wait_twint
                                 
000102 9100 00b9                 	lds r16,TWSR
000104 7f08                      	andi r16, 0xF8
000105 3208                      	cpi r16, MT_DATA_ACK
000106 f591                      	brne error_data
000107 9508                      	ret
                                 
                                 ;------DISPLAY : CHAR------;                  Con esta Funcion le enviamos un CHAR al display
                                 DisplayChar:
                                 
000108 2f08                      	mov r16,DISPVAR							  ;En DISPVAR tiene que estar el CHAR
000109 7f00                      	andi r16,0xF0							  ;Envio DISPVAR_H
00010a 6009                      	ori r16,0x09
00010b 2f10                      	mov r17,r16
00010c 9300 00bb                 	sts TWDR, r16								; Carga DATA en twdr, limpia twint para empezar la transmision
00010e e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
00010f 9300 00bc                 	sts TWCR, r16
                                 
000111 dfec                      	RCALL WaitDataI2c
000112 d027                      	RCALL DisplayEnable
                                 
000113 2f08                      	mov r16,DISPVAR							  ;Envio DISPVAR_L
000114 0f00                      	lsl r16
000115 0f00                      	lsl r16
000116 0f00                      	lsl r16
000117 0f00                      	lsl r16
000118 6009                      	ori r16,0x09
000119 2f10                      	mov r17,r16
00011a 9300 00bb                 	sts TWDR, r16								
00011c e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
00011d 9300 00bc                 	sts TWCR, r16
00011f dfde                      	RCALL WaitDataI2c
                                 
000120 d019                      	RCALL DisplayEnable
                                 
000121 9508                      	ret
                                 
                                 ;------Display :ENTER----------
                                 
                                 DisplayEnter:
                                 
000122 ec08                      	ldi r16,0xC8								;0x08_H
000123 ec18                      	ldi r17,0xC8
000124 9300 00bb                 	sts TWDR, r16								
000126 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
000127 9300 00bc                 	sts TWCR, r16								
000129 dfd4                      	RCALL WaitDataI2c
                                 
00012a d00f                      	RCALL DisplayEnable							
                                 
00012b e008                      	ldi r16,0x08								;0x08_L				
00012c e018                      	ldi r17,0x08
                                 	
00012d 9300 00bb                 	sts TWDR, r16								
00012f e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
000130 9300 00bc                 	sts TWCR, r16								
000132 dfcb                      	RCALL WaitDataI2c
                                 
000133 d006                      	RCALL DisplayEnable
000134 9508                      ret
                                 
                                 
                                 
                                 ;----DISPLAY : STOP------
                                 
                                 I2CStop:
000135 e904                      	ldi r16, (1<<TWINT)|(1<<TWEN)| (1<<TWSTO)	;Transmite bit de STOP
000136 9300 00bc                 	sts TWCR, r16
000138 9508                      			ret
                                 
                                 error_data:
000139 d011                      	RCALL ERROR1
                                 
                                 
                                 DisplayEnable:
00013a d055                      	RCALL retardo1ms
                                 	
00013b 6014                      	ori r17, 0x04
00013c 9310 00bb                 	sts TWDR, r17								
00013e e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
00013f 9300 00bc                 	sts TWCR, r16
000141 dfbc                      	RCALL WaitDataI2c
                                 ;	RCALL retardo1ms
                                 
000142 7f1b                      	andi r17, 0b11111011
000143 9310 00bb                 	sts TWDR, r17								
000145 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
000146 9300 00bc                 	sts TWCR, r16
000148 dfb5                      	RCALL WaitDataI2c
                                 
                                 	;RCALL retardo1ms
000149 9508                      	ret
                                 
                                 
                                 ;-----------Error----------------------------------
                                 
                                 ERROR:
                                 	
                                 	;ldi R16,0x02
                                 	;out PORTB,R16
00014a cfff                      	rjmp error
                                 
                                 ERROR1:
                                 	
                                 	;ldi R16,0x02
                                 	;out PORTB,R16
00014b e904                      	ldi r16, (1<<TWINT)|(1<<TWEN)| (1<<TWSTO)	;Transmite bit de STOP
00014c 9300 00bc                 	sts TWCR, r16
00014e cffb                      	rjmp error
                                 
                                 ;------Display :CLEAR----------
                                 DisplayClear:
00014f e018                      	ldi r17, 0x08
000150 e008                      	ldi	r16, 0x08
000151 9300 00bb                 	sts TWDR, r16								; Carga DATA en twdr, limpia twint para empezar la transmision
000153 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
000154 9300 00bc                 	sts TWCR, r16
                                 
000156 dfa7                      	RCALL WaitDataI2c
000157 dfe2                      	RCALL DisplayEnable
                                 
000158 e118                      	ldi r17, 0x18
000159 e108                      	ldi r16, 0x18
00015a 9300 00bb                 	sts TWDR, r16								
00015c e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
00015d 9300 00bc                 	sts TWCR, r16
00015f df9e                      	RCALL WaitDataI2c
                                 
000160 dfd9                      	RCALL DisplayEnable
                                 
000161 9508                      	ret
                                 
                                 DisplayToggleShift:
000162 e118                      	ldi r17, 0x18
000163 e108                      	ldi	r16, 0x18
000164 9300 00bb                 	sts TWDR, r16								; Carga DATA en twdr, limpia twint para empezar la transmision
000166 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
000167 9300 00bc                 	sts TWCR, r16
                                 
000169 df94                      	RCALL WaitDataI2c
00016a dfcf                      	RCALL DisplayEnable
                                 
00016b e818                      	ldi r17, 0x88
00016c e808                      	ldi r16, 0x88
00016d 9300 00bb                 	sts TWDR, r16								
00016f e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
000170 9300 00bc                 	sts TWCR, r16
000172 df8b                      	RCALL WaitDataI2c
                                 
000173 dfc6                      	RCALL DisplayEnable
                                 
000174 9508                      	ret
                                 
                                 DisplayString:
000175 93ff                      	PUSH ZH
000176 93ef                      	PUSH ZL
000177 e040                      	LDI CONTADOR,0x00
                                 
                                 DisplayString_cont:
000178 9543                      	INC CONTADOR	
000179 9185                      	LPM DISPVAR, Z+
00017a 3080                      	CPI DISPVAR,0x00
00017b f7e1                      	BRNE DisplayString_cont
00017c 954a                      	DEC CONTADOR
00017d 91ef                      	POP ZL
00017e 91ff                      	POP ZH
                                 
                                 DisplayString_next:
00017f 9185                      	lpm DISPVAR, Z+
000180 df87                      	RCALL DisplayChar
                                 
000181 954a                      	dec  CONTADOR
000182 f7e1                      	brne DisplayString_next
                                 	
000183 9508                      	ret
                                 
                                 
                                 
                                 DispNum:
                                 	
                                 
000184 e300                      	ldi TEMP, 48
000185 0f30                      	add KEY,TEMP
                                 	
                                 	
                                 DispNum_cont:
000186 2f80                      	mov DISPVAR,TEMP
000187 df80                      	RCALL DisplayChar
                                 	
                                  .include "delay.asm"
000188 9508                      
                                  * delay.asm
                                  *
                                  *  Created: 05-Nov-16 5:35:06 PM
                                  *   Author: galca
                                  */ 
                                  .def RETARDO = R21
                                 
                                 
                                  retardo10us:
000189 935f                      	push RETARDO
00018a e35a                      	ldi RETARDO,58
                                 loop_ret_10:
00018b 955a                      	dec RETARDO
00018c 0000                      	NOP
00018d f7e9                      	brne loop_ret_10
00018e 915f                      	pop RETARDO
00018f 9508                      	ret
                                 
                                 retardo1ms:
000190 935f                      	push RETARDO
000191 e654                      	ldi RETARDO,100
                                 loop_ret_1m:
000192 dff6                      	RCALL retardo10us
000193 955a                      	dec RETARDO	
000194 f7e9                      	brne loop_ret_1m
000195 915f                      	pop RETARDO
000196 9508                      	ret
                                 
                                 retardo50ms:
000197 935f                      	push RETARDO
000198 e352                      	ldi RETARDO,50
                                 loop_ret_50m:
000199 dff6                      	RCALL retardo1ms
00019a 955a                      	dec RETARDO
00019b f7e9                      	brne loop_ret_50m
00019c 915f                      	pop RETARDO
00019d 9508                      	ret
                                 
                                 retardo5ms:
00019e e055                      	ldi RETARDO,5
                                 loop_ret_5m:
00019f dff0                      	RCALL retardo1ms
0001a0 955a                      	dec RETARDO
0001a1 f7e9                      	brne loop_ret_5m
0001a2 9508                      	ret
                                 
                                 retardo3s:
                                 
0001a3 e35c                      	ldi RETARDO, 60
                                 loop_ret_3s:
0001a4 dff2                      	RCALL retardo50ms
0001a5 955a                      	dec RETARDO
0001a6 f7e9                      	brne loop_ret_3s
                                  .include "interface.asm"
0001a7 9508                      
                                  * interface.asm
                                  *
                                  *  Created: 05-Nov-16 7:59:54 PM
                                  *   Author: galca
                                  */ 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                  ;....................Display welcome............................
                                 DisplayWelcome:
                                 	
0001a8 e0f3                      	LDi ZH, High(2*T_Welcome)
0001a9 e9e0                      	LDI ZL, LOW(2*T_Welcome)
                                 	
0001aa dfca                      	RCALL DisplayString
0001ab df76                      	RCALL DisplayEnter
                                 	
0001ac e0f3                      	LDI ZH, High(2*T_Cocktail)
0001ad e9ee                      	LDI ZL, LOW(2*T_Cocktail)
                                 	
0001ae dfc6                      	RCALL DisplayString
                                 		
0001af 9508                      	ret
                                 
                                 DisplayMenu0:
                                 	
0001b0 e0f3                      	LDi ZH, High(2*T_Mode_Select)
0001b1 eaee                      	LDI ZL, LOW(2*T_Mode_Select)
                                 	
0001b2 dfc2                      	RCALL DisplayString
                                 	
                                 		
0001b3 9508                      	ret
                                 
                                 DisplayMenu1a:
                                 	
0001b4 e0f3                      	LDi ZH, High(2*T_Pred_Select)
0001b5 eeec                      	LDI ZL, LOW(2*T_Pred_Select)
                                 	
0001b6 dfbe                      	RCALL DisplayString
                                 	
                                 		
0001b7 9508                      	ret
                                 
                                 DisplayMenu2a:
                                 	
0001b8 e0f4                      	LDi ZH, High(2*T_Pot_Select)
0001b9 e2e2                      	LDI ZL, LOW(2*T_Pot_Select)
                                 	
0001ba dfba                      	RCALL DisplayString
                                 	
                                 		
0001bb 9508                      	ret
                                 
                                 DisplayMenu1b:
                                 	
0001bc e0f4                      	LDi ZH, High(2*T_Bebida1_Select)
0001bd e5e8                      	LDI ZL, LOW(2*T_Bebida1_Select)
                                 	
0001be dfb6                      	RCALL DisplayString
                                 	
                                 		
0001bf 9508                      	ret
                                 
                                 DisplayMenu2b:
                                 	
0001c0 e0f4                      	LDi ZH, High(2*T_Porc_Select)
0001c1 ece8                      	LDI ZL, LOW(2*T_Porc_Select)
                                 	
0001c2 dfb2                      	RCALL DisplayString
                                 	
                                 		
0001c3 9508                      	ret
                                 
                                 DisplayMenu3b:
                                 	
0001c4 e0f4                      	LDi ZH, High(2*T_Bebida2_Select)
0001c5 e9e0                      	LDI ZL, LOW(2*T_Bebida2_Select)
                                 	
0001c6 dfae                      	RCALL DisplayString
                                 	
                                 		
0001c7 9508                      	ret
                                 
                                  ;....................TABLAS (display)...........................
                                 
                                 T_Welcome:
0001c8 4942
0001c9 4e45
0001ca 4556
0001cb 494e
0001cc 4f44
0001cd 2153
0001ce 0021                      	.Db 'B','I','E','N','V','E','N','I','D','O','S','!','!',0
                                 
                                 T_COCKTail:
0001cf 2a2a
0001d0 432a
0001d1 434f
0001d2 2d4b
0001d3 4154
0001d4 4c49
0001d5 2a2a
0001d6 002a                      	.DB '*','*','*','C','O','C','K','-','T','A','I','L','*','*','*',0
                                 	
                                 T_Mode_Select:
0001d7 6553
0001d8 656c
0001d9 6363
0001da 6f69
0001db 656e
0001dc 6d20
0001dd 646f
0001de 206f
0001df 6564
0001e0 6f20
0001e1 6570
0001e2 6172
0001e3 6963
0001e4 6ef3
0001e5 5c3a
0001e6 316e
0001e7 502d
0001e8 6572
0001e9 6564
0001ea 6574
0001eb 6d72
0001ec 6e69
0001ed 6461
0001ee 5c6f
0001ef 3274
0001f0 502d
0001f1 6572
0001f2 6963
0001f3 6973
0001f4 6ef3
0001f5 0020                      	.DB		"Seleccione modo de operación:\n1-Predeterminado\t2-Precisión ",0 
                                 
                                 T_Pred_Select:
0001f6 6553
0001f7 656c
0001f8 6363
0001f9 6f69
0001fa 656e
0001fb 6220
0001fc 6265
0001fd 6469
0001fe 3a61
0001ff 6e5c
000200 2d31
000201 6546
000202 6e72
000203 7465
000204 745c
000205 2d32
000206 6857
000207 7369
000208 6f63
000209 616c
00020a 745c
00020b 2d33
00020c 6f43
00020d 6163
00020e 432d
00020f 6c6f
000210 0061                      	.DB		"Seleccione bebida:\n1-Fernet\t2-Whiscola\t3-Coca-Cola",0
                                 
                                 T_Pot_Select:
000211 6553
000212 656c
000213 6363
000214 6f69
000215 656e
000216 7020
000217 746f
000218 6e65
000219 6963
00021a 3a61
00021b 6e5c
00021c 2d31
00021d 7546
00021e 7265
00021f 6574
000220 745c
000221 2d32
000222 654d
000223 6964
000224 5c61
000225 3374
000226 4d2d
000227 2065
000228 616c
000229 6320
00022a 6d6f
00022b 006f                      	.DB		"Seleccione potencia:\n1-Fuerte\t2-Media\t3-Me la como",0
                                 
                                 T_Bebida1_Select:
00022c 6553
00022d 656c
00022e 6363
00022f 6f69
000230 656e
000231 7020
000232 6972
000233 656d
000234 6172
000235 6220
000236 6265
000237 6469
000238 3a61
000239 6e5c
00023a 2d31
00023b 6546
00023c 6e72
00023d 7465
00023e 745c
00023f 2d32
000240 6857
000241 7369
000242 796b
000243 745c
000244 2d33
000245 6f43
000246 6163
000247 0020                      	.DB		"Seleccione primera bebida:\n1-Fernet\t2-Whisky\t3-Coca ",0
                                 
                                 T_Bebida2_Select:
000248 6553
000249 656c
00024a 6363
00024b 6f69
00024c 656e
00024d 7320
00024e 6765
00024f 6e75
000250 6164
000251 6220
000252 6265
000253 6469
000254 3a61
000255 6e5c
000256 2d31
000257 6546
000258 6e72
000259 7465
00025a 745c
00025b 2d32
00025c 6857
00025d 7369
00025e 796b
00025f 745c
000260 2d33
000261 6f43
000262 6163
000263 0020                      	.DB		"Seleccione segunda bebida:\n1-Fernet\t2-Whisky\t3-Coca ",0
                                 
                                 T_Porc_Select:
000264 6e49
000265 7274
000266 646f
000267 7a75
000268 6163
000269 7020
00026a 726f
00026b 6563
00026c 746e
00026d 6a61
00026e 3a65


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :   0 z  :   2 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 123 r17:  40 r18:   8 r19:  18 r20:   7 
r21:  16 r22:   0 r23:   0 r24:   6 r25:   0 r26:   0 r27:   0 r28:   0 
r29:   0 r30:  10 r31:  10 
Registers used: 10 out of 35 (28.6%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   1 adiw  :   0 and   :   0 
andi  :   5 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   6 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  10 brpl  :   0 brsh  :   4 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   0 cbr   :   2 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   1 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :  13 cpse  :   0 dec   :   8 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :   4 jmp   :   0 
ld    :   0 ldd   :   0 ldi   :  99 lds   :   6 lpm   :   2 lsl   :   4 
lsr   :   0 mov   :   5 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   1 or    :   0 ori   :   3 out   :   8 pop   :   6 
push  :   6 rcall :  97 ret   :  30 reti  :   0 rjmp  :  17 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   0 sbic  :   3 sbis  :   0 
sbiw  :   0 sbr   :   3 sbrc  :   3 sbrs  :   3 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :  50 
sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 28 out of 113 (24.8%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0004e0    912    336   1248   32768   3.8%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
