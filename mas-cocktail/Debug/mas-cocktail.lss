
AVRASM ver. 2.2.6  D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm Sat Nov 19 16:03:32 2016

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.0.106\avrasm\inc\m328pdef.inc'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(163): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\kb_driver.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(164): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\disp_driver.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(165): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\delay.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(166): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(167): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\math.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.0.106\avrasm\inc\m328pdef.inc'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(163): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\kb_driver.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(164): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\disp_driver.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(165): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\delay.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(166): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(167): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\math.asm'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; mas-cocktail.asm
                                 ;
                                 ; Created: 01-Oct-16 1:40:18 PM
                                 ; Author : galca
                                 ;
                                 ; LEDs verdes: PORTD 4 y 7
                                 ; LEDs rojos: PORTC 2 y 3
                                  .equ CRYSTAL = 8000000
                                  .equ SHIFTDELAY = 160
                                  .EQU FERNET = 1
                                  .EQU WHISKY = 2
                                  .EQU COCA = 3
                                  .EQU PERC = 0
                                 
                                  .def TEMP = R16
                                  .DEF TEMP2 = R4
                                  .def SHIFTREGISTER = R25
                                  .DEF PERCENTREG = R6
                                  .DEF DRINK1 = R22
                                  .DEF DRINK2 = R23
                                  .def PRGFLAGS = R21
                                  
                                 
                                 .CSEG
000000 c000                      		RJMP		BEGIN
                                 
                                 
                                 
                                 
                                 BEGIN:
000001 ef0f                      		LDI	R16, low(RAMEND)
000002 bf0d                      		OUT	SPL, R16
000003 e008                      		LDI	R16, high(RAMEND)
000004 bf0e                      		OUT	SPH, R16
                                 /*		LDI			R21,'4'
                                 		LDI			R22,'7'
                                 		PUSH		R22
                                 		PUSH		R21
                                 		RCALL		keyb_to_bcd
                                 		POP			R21
                                 		RJMP		BEGIN*/
                                 
000005 ef4f                      		LDI			R20,0XFF
000006 b947                      		OUT			DDRC,R20
000007 b94a                      		OUT			DDRD,R20
000008 d059                      		RCALL		KBINIT
000009 d090                      		RCALL		InicI2C			; esta funcion inicializa el display, si o si tiene que ir. no hace falta modificarle nada
00000a d0b2                      		RCALL		InicDisplay		; lo mismo que la anterior
                                 
                                  MAIN:	
                                 /*		RCALL		GETKEY
                                 		ldi			TEMP,48
                                 		ADD			KEY,TEMP
                                 		MOV			DISPVAR,KEY
                                 		RCALL		DisplayChar*/
00000b d1e5                      		RCALL		DisplayWelcome
00000c d1da                      		RCALL		retardo3s
00000d d175                      		RCALL		DisplayClear
00000e d1ea                      		RCALL		DisplayMenu0
00000f ea90                      		LDI			SHIFTREGISTER,SHIFTDELAY
                                 KeyMenu0:
000010 d172                      		RCALL		DisplayClear
000011 d1e7                      		RCALL		DisplayMenu0
000012 d085                      		RCALL		CLEARKEY
                                 getk0:
000013 d195                      		RCALL		Shift
000014 d054                      		RCALL		GETKEY
000015 3031                      		CPI			KEY,0x01
000016 f019                      		BREQ		KeyMenu1a
000017 3032                      		CPI			KEY,0x02
000018 f0b1                      		BREQ		KeyMenu1b
000019 cff9                      		RJMP		getk0
                                 KeyMenu1a:
00001a d168                      		RCALL		DisplayClear
00001b d1e1                      		RCALL		DisplayMenu1a
00001c d07b                      		RCALL		CLEARKEY
00001d d1ce                      		RCALL		retardo1s
                                 getk1a:
00001e d18a                      		RCALL		Shift
00001f d049                      		RCALL		GETKEY
000020 3030                      		CPI			KEY,0x00
000021 f3e1                      		BREQ		getk1a
000022 3033                      		CPI			KEY,0x03
000023 f7d0                      		BRSH		getk1a
                                 KeyMenu2a:
000024 d15e                      		RCALL		DisplayClear
000025 d1db                      		RCALL		DisplayMenu2a
000026 d071                      		RCALL		CLEARKEY
000027 d1c4                      		RCALL		retardo1s
                                 getk2a:		
000028 d180                      		RCALL		Shift
000029 d03f                      		RCALL		GETKEY
00002a 3030                      		CPI			KEY,0x00
00002b f3e1                      		BREQ		getk2a
00002c 3034                      		CPI			KEY,0x04
00002d f7d0                      		BRSH		getk2a
00002e c02c                      		RJMP		END
                                 KeyMenu1b:
00002f d153                      		RCALL		DisplayClear
000030 d1d4                      		RCALL		DisplayMenu1b
000031 d066                      		RCALL		CLEARKEY
000032 d1b9                      		RCALL		retardo1s
                                 getk1b:		
000033 d175                      		RCALL		Shift
000034 d034                      		RCALL		GETKEY
000035 3030                      		CPI			KEY,0x00
000036 f3e1                      		BREQ		getk1b
000037 3033                      		CPI			KEY,0x03
000038 f7d0                      		BRSH		getk1b
                                 KeyMenu2b:
000039 d149                      		RCALL		DisplayClear
00003a d1ce                      		RCALL		DisplayMenu2b
00003b d05c                      		RCALL		CLEARKEY
00003c d1af                      		RCALL		retardo1s
                                 getk2b:	
00003d d05a                      		RCALL		CLEARKEY	
00003e d02a                      		RCALL		GETKEY
00003f 3030                      		CPI			KEY,0x00
000040 f3e1                      		BREQ		getk2b
000041 e300                      		LDI			TEMP,48
000042 303b                      		CPI			KEY,11
000043 f409                      		BRNE		KeyNotZero
000044 e030                      		LDI			KEY,0x00
                                 KeyNotZero:
000045 0f30                      		ADD			KEY,TEMP
000046 2f83                      		MOV			DISPVAR,KEY
000047 d0f4                      		RCALL		DisplayChar
000048 d1a3                      		RCALL		retardo1s
000049 933f                      		PUSH		KEY
00004a fd50                      		SBRC		PRGFLAGS,PERC
00004b c002                      		RJMP		getPercentage
00004c 6051                      		ORI			PRGFLAGS,(1<<PERC)
00004d cfef                      		RJMP		getk2b
                                 
                                 getPercentage:
00004e 7f5e                      		ANDI		PRGFLAGS,(0xFE<<PERC)
00004f d287                      		RCALL		keyb_to_bcd
000050 906f                      		POP			PERCENTREG
                                 
                                 KeyMenu3b:
000051 d131                      		RCALL		DisplayClear
000052 d1ba                      		RCALL		DisplayMenu3b
000053 d044                      		RCALL		CLEARKEY
000054 d197                      		RCALL		retardo1s
                                 getk3b:
000055 d153                      		RCALL		Shift
000056 d012                      		RCALL		GETKEY
000057 3030                      		CPI			KEY,0x00
000058 f3e1                      		BREQ		getk3b
000059 3034                      		CPI			KEY,0x04
00005a f7d0                      		BRSH		getk3b
                                 
                                 END:	
00005b d127                      		RCALL		DisplayClear
00005c d1b4                      		RCALL		DisplayWait
00005d d189                      		RCALL		retardo3s
00005e d124                      		RCALL		DisplayClear
00005f d1b5                      		RCALL		DisplayDone
000060 d186                      		RCALL		retardo3s
000061 cfae                      		RJMP		KeyMenu0
                                 
                                  .include "kb_driver.asm"
                                 
                                  * kb_driver.asm
                                  *
                                  *  Created: 25-Oct-16 10:23:47 PM
                                  *   Author: galca
                                  */ 
                                 
                                 .EQU COL1 = PINB0
                                 .EQU COL2 = PINB1
                                 .EQU COL3 = PINB2
                                 
                                 .EQU ROW1 = PINB3
                                 .EQU ROW2 = PINB7
                                 .EQU ROW3 = PINB5
                                 .EQU ROW4 = PINB4
                                 
                                 .EQU ROW1VAL = 1
                                 .EQU ROW2VAL = 4
                                 .EQU ROW3VAL = 7
                                 .EQU ROW4VAL = 10
                                 
                                 .EQU KBPORT = PORTB
                                 .EQU PRESSED = 0
                                 .EQU KBCONF = 0xF8
                                 .EQU KBPULLUPS = 0x07
                                  
                                 
                                 .DEF KBTEMP = R17
                                 .DEF KBFLAGS = R18
                                 .DEF KEY = R19
                                  
                                 .CSEG
                                 
                                 KBINIT:
000062 931f                      		PUSH		KBTEMP
000063 ef18                       		LDI			KBTEMP,KBCONF		;cols como input, filas como output
000064 b914                      		OUT			DDRB,KBTEMP	
000065 e017                      		LDI			KBTEMP,KBPULLUPS		;habilitar pullups en el input
000066 b915                      		OUT			KBPORT,KBTEMP
000067 911f                      		POP			KBTEMP	
000068 9508                      		RET
                                 
                                  GETKEY:
                                 												;Esta sección lee la fila 1
000069 e031                      		LDI			KEY,ROW1VAL					;carga el valor de la primera tecla de la fila 1 en "key"
00006a ef17                      		LDI			KBTEMP,~(1<<ROW1)			;"apaga" fila 1 (carga un byte de unos con un único cero en la posición "ROW1")
00006b b915                      		OUT			KBPORT,KBTEMP				;y cargando el valor al puerto usado por el teclado
00006c d013                      		RCALL		READ_COL					;se pasa a leer las columnas, esperando encontrar coincidencias
                                  
00006d fd20                      		SBRC		KBFLAGS,PRESSED				;si se registró una tecla presionada
00006e c010                      		RJMP		DONE						;salir de la subrutina
                                  
                                 												;Esta sección lee la fila 2
00006f e034                      		LDI			KEY,ROW2VAL					;carga el valor de la primera tecla de la fila 2 en "key"
000070 e71f                      		LDI			KBTEMP,~(1<<ROW2)			;"apaga" fila 2 (carga un byte de unos con un único cero en la posición "ROW2")
000071 b915                      		OUT			KBPORT,KBTEMP				;y cargando el valor al puerto usado por el teclado
000072 d00d                      		RCALL		READ_COL					;se pasa a leer las columnas, esperando encontrar coincidencias
                                  
000073 fd20                      		SBRC		KBFLAGS,PRESSED				;si se registró una tecla presionada
000074 c00a                      		RJMP		DONE						;salir de la subrutina
                                 												
                                 												;Esta sección lee la fila 3
000075 e037                      		LDI			KEY,ROW3VAL					;carga el valor de la primera tecla de la fila 3 en "key"
000076 ed1f                      		LDI			KBTEMP,~(1<<ROW3)			;"apaga" fila 3 (carga un byte de unos con un único cero en la posición "ROW3")
000077 b915                      		OUT			KBPORT,KBTEMP				;y cargando el valor al puerto usado por el teclado
000078 d007                      		RCALL		READ_COL					;se pasa a leer las columnas, esperando encontrar coincidencias
                                 
000079 fd20                      		SBRC		KBFLAGS,PRESSED				;si se registró una tecla presionada
00007a c004                      		RJMP		DONE						;salir de la subrutina
                                  
                                 												;Esta sección lee la fila 4
00007b e03a                      		LDI			KEY,ROW4VAL					;carga el valor de la primera tecla de la fila 4 en "key"
00007c ee1f                      		LDI			KBTEMP,~(1<<ROW4)			;"apaga" fila 4 (carga un byte de unos con un único cero en la posición "ROW4")
00007d b915                      		OUT			KBPORT,KBTEMP				;y cargando el valor al puerto usado por el teclado
00007e d001                      		RCALL		READ_COL					;se pasa a leer las columnas, esperando encontrar coincidencias
                                  
                                 DONE:					
00007f 9508                      		RET
                                  
                                 READ_COL:
000080 d013                      		RCALL		SETTLE
000081 7f2e                      		CBR			KBFLAGS, (1<<PRESSED)		;estado = no presionado
                                  
000082 9918                      		SBIC		PINB, COL1					;lee columna 1
000083 c002                      		RJMP		NEXTCOL						;si no, pasar a columna 2
000084 6021                      		SBR			KBFLAGS, (1<<PRESSED)		;estado = presionado
000085 9508                      		RET										;devolver el valor de la primer columna de la fila
                                 NEXTCOL:
000086 9919                      		SBIC		PINB,COL2					;lee columna 2
000087 c003                      		RJMP		NEXTCOL1					;si no, pasar a columna 3
000088 9533                      		INC			KEY							
000089 6021                      		SBR			KBFLAGS,(1<<PRESSED)		;estado = presionado
00008a 9508                      		RET										;devolver el valor de la segunda columna de la fila
                                 NEXTCOL1:
00008b 991a                      		SBIC		PINB,COL3					;lee columna 3
00008c c004                      		RJMP		EXIT						;si no, termina
00008d 9533                      		INC			KEY							;estado = presionado
00008e 9533                      		INC			KEY
00008f 6021                      		SBR			KBFLAGS, (1<<PRESSED)		;estado=presionado
000090 9508                      		RET										;devolver el valor de la tercer columna de la fila
                                 EXIT:
000091 2733                      		CLR			KEY							;vacía el valor de la tecla
000092 7f2e                      		CBR			KBFLAGS, (1<<PRESSED)		;no se presionó ninguna tecla
000093 9508                      		RET										
                                 SETTLE:
000094 ef1f                      		LDI			KBTEMP,255
000095 951a                      TAGAIN: DEC			KBTEMP
000096 f7f1                      		BRNE		TAGAIN
000097 9508                      		RET 
                                 
                                 CLEARKEY:
000098 e030                      		LDI			KEY,0X00
                                  .include "disp_driver.asm"
000099 9508                      
                                  * disp_driver.asm
                                  *
                                  *  Created: 01-Nov-16 5:01:30 PM
                                  *   Author: galca
                                  */ 
                                  ;
                                 ; display.asm
                                 ;
                                 ; Created: 23/9/2016 2:16:36 p. m.
                                 ; Author : waral
                                 ;
                                 
                                 	.def CONTADOR = R20
                                 	.def DISPVAR = R24
                                 
                                 	.equ TWI_RATE = 0xF8
                                 	.equ STARTi = 0x08
                                 	.equ MT_SLA_ACK = 0x20
                                 	.equ MT_DATA_ACK= 0x28
                                 	.equ SL_ADD = 0b01001110
                                 
                                 
                                 ;para usar el i2c no hay que inicializar nada de los puertos... 
                                 ;lo que yo puse fue para encender un led que me diga que esta todo ok
                                 
                                 
                                 /*start:
                                 	ldi TEMP , 0x02		; inicializacion led de error
                                 	out ddrb , TEMP
                                 	ldi TEMP , 0x00			
                                 	out portb , TEMP	;esto tranquilamente se puede borrar
                                 	
                                 	RCALL InicI2C			; esta funcion inicializa el display, si o si tiene que ir. no hace falta modificarle nada
                                 	RCALL InicDisplay		; lo mismo que la anterior
                                 	RCALL DisplayCocktail	; Mando "Cocktail" al display
                                 	RCALL DisplayEnter		; Mando "Enter" al display
                                 	RCALL DisplayWelcome	; Mando "Welcome" al display
                                 	
                                 
                                 
                                 	RCALL I2CStop			; cuando finaliza el programa hay que ponerle stop al i2c
                                 	
                                 	ldi R16,0x02	;LED INDICADOR DE FINALIZACION OK DE PROGRAMA
                                 	out PORTB,R16
                                 
                                 loop:
                                 	rjmp loop			;loop infinito
                                 
                                     rjmp start			;vuelve al inicio*/
                                 
                                 ;---------------------------------------------------------------------
                                 ;---------------------------------------------------------------------
                                 ;-----------------------------Fin start-------------------------------
                                 ;---------------------------------------------------------------------
                                 ;---------------------------------------------------------------------
                                 
                                 
                                 
                                 ;----------------------------SUBRUTINAS-------------------------------
                                 
                                 ;_____________________________________________________
                                 ;;;;;;;;;;;;;;;;;DISPLAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;|
                                 ;_____________________________________________________|
                                 
                                 ;------- inicializacion i2c-------
                                 InicI2C:	
                                 	
00009a ef08                      	ldi TEMP, TWI_RATE
00009b 9300 00b8                 	sts TWBR,TEMP
                                 
00009d ea04                      	ldi TEMP, (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)   
00009e 9300 00bc                 	sts TWCR, TEMP								;envia condicion de start
                                 
                                 wait1:
0000a0 9100 00bc                 	lds TEMP,TWCR
0000a2 ff07                      	sbrs TEMP,TWINT								;espera flag de start ok
0000a3 cffc                      	rjmp wait1
                                 
0000a4 9100 00b9                 	lds TEMP,TWSR
0000a6 7f08                      	andi TEMP, 0xF8								;si el estado en el registro TWI es distinto de START se va a error
0000a7 3008                      	cpi TEMP, STARTi
0000a8 f409                      	brne error_A
0000a9 c001                      	rjmp continuo
                                 error_A:
0000aa d0d4                      	RCALL ERROR1
                                 	
                                 continuo:
0000ab e40e                      	ldi TEMP, SL_ADD								
0000ac 9300 00bb                 	sts TWDR, TEMP								;Carga direccion del esclavo en el registro TWDR, limpia bit TWINT para empezar la transmision de la direccion
0000ae e804                      	ldi TEMP, (1<<TWINT) | (1<<TWEN)
0000af 9300 00bc                 	sts TWCR, TEMP								;envio direccion del esclavo
                                 
                                 wait2:
0000b1 9100 00bc                 	lds TEMP,TWCR
0000b3 ff07                      	sbrs TEMP,TWINT								;espera seteo de TWINT para confirmar transmision ok
0000b4 cffc                      	rjmp wait2
                                 
0000b5 9100 00b9                 	lds TEMP,TWSR
0000b7 7f08                      	andi TEMP, 0xF8								;chequea el registro TWI, salta a error si no se transmitio bien
0000b8 3200                      	cpi TEMP, MT_SLA_ACK
0000b9 f009                      	breq error_B
0000ba c001                      	rjmp continuo2
                                 error_B:
0000bb d0c3                      	RCALL ERROR1
                                 continuo2:
0000bc 9508                      	ret
                                 	
                                 ;----------------------------------Fin inicializacion i2c----------------------------------------;
                                 
                                 ;.................................incialización display, envio de a 4bits........................;
                                 InicDisplay:	
                                 	
0000bd d11d                      	RCALL retardo50ms
                                 	
0000be e300                      	ldi TEMP, 0x30
0000bf e310                      	ldi r17,0x30
0000c0 9300 00bb                 	sts TWDR, TEMP								; Carga DATA en twdr, limpia twint para empezar la transmision
0000c2 e804                      	ldi TEMP, (1<<TWINT) |(1<<TWEN)
0000c3 9300 00bc                 	sts TWCR, TEMP								
0000c5 d06c                      	RCALL WaitDataI2c
                                 
0000c6 d0a7                      	RCALL DisplayEnable
                                 
0000c7 d11a                      	RCALL retardo5ms
                                 
0000c8 d0a5                      	RCALL DisplayEnable
                                 
0000c9 d10a                      	RCALL retardo1ms
                                 												; todo esto te lo pide que hagas la hoja de datos del display
0000ca d0a3                      	RCALL DisplayEnable
                                 
0000cb d116                      	RCALL retardo5ms
                                 
0000cc e208                      	ldi r16, 0x28								;set 4bit mode
0000cd e218                      	ldi r17,0x28
0000ce 9300 00bb                 	sts TWDR, r16								
0000d0 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
0000d1 9300 00bc                 	sts TWCR, r16								
0000d3 d05e                      	RCALL WaitDataI2c
                                 	
0000d4 d099                      	RCALL DisplayEnable
                                 
0000d5 d0fe                      	RCALL retardo1ms
                                 
0000d6 e208                      	ldi TEMP,0x28								;0x28_H
0000d7 e218                      	ldi r17,0x28
0000d8 9300 00bb                 	sts TWDR, TEMP								
0000da e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
0000db 9300 00bc                 	sts TWCR, TEMP								
0000dd d054                      	RCALL WaitDataI2c
                                 
0000de d08f                      	RCALL DisplayEnable
                                 
0000df e808                      	ldi TEMP,0x88								;0x28_L
0000e0 e818                      	ldi r17,0x88
0000e1 9300 00bb                 	sts TWDR, r16								
0000e3 e804                      	ldi TEMP, (1<<TWINT) |(1<<TWEN)
0000e4 9300 00bc                 	sts TWCR, TEMP								
0000e6 d04b                      	RCALL WaitDataI2c
                                 
0000e7 d086                      	RCALL DisplayEnable
                                 
0000e8 e008                      	ldi TEMP, 0x08								;0x08_H
0000e9 e018                      	ldi r17,0x08
0000ea 9300 00bb                 	sts TWDR, TEMP								
0000ec e804                      	ldi TEMP, (1<<TWINT) |(1<<TWEN)
0000ed 9300 00bc                 	sts TWCR, TEMP								
0000ef d042                      	RCALL WaitDataI2c
                                 
0000f0 d07d                      	RCALL DisplayEnable							
                                 
0000f1 e808                      	ldi TEMP,0x88								;0x08_L				
0000f2 e818                      	ldi r17,0x88
                                 	
0000f3 9300 00bb                 	sts TWDR, TEMP								
0000f5 e804                      	ldi TEMP, (1<<TWINT) |(1<<TWEN)
0000f6 9300 00bc                 	sts TWCR, TEMP								
0000f8 d039                      	RCALL WaitDataI2c
                                 
0000f9 d074                      	RCALL DisplayEnable
                                 
0000fa e008                      	ldi r16,0x08								;0x01_H	
0000fb e018                      	ldi r17,0x08
0000fc 9300 00bb                 	sts TWDR, r16								
0000fe e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
0000ff 9300 00bc                 	sts TWCR, r16								
000101 d030                      	RCALL WaitDataI2c
                                 
000102 d06b                      	RCALL DisplayEnable
                                 
000103 e108                      	ldi r16,0x18								;0x01_L	
000104 e118                      	ldi r17,0x18
                                 		
000105 9300 00bb                 	sts TWDR, r16								
000107 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
000108 9300 00bc                 	sts TWCR, r16								
00010a d027                      	RCALL WaitDataI2c
                                 
00010b d062                      	RCALL DisplayEnable
                                 
00010c e008                      	ldi r16,0x08								;0x0F_H		
00010d e018                      	ldi r17,0x08
                                 
00010e 9300 00bb                 	sts TWDR, r16								
000110 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
000111 9300 00bc                 	sts TWCR, r16								
000113 d01e                      	RCALL WaitDataI2c
                                 
000114 d059                      	RCALL DisplayEnable
                                 	
000115 ef08                      	ldi r16,0xF8								;0x0F_L	
000116 ef18                      	ldi r17,0xF8
000117 9300 00bb                 	sts TWDR, r16								
000119 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
00011a 9300 00bc                 	sts TWCR, r16								
00011c d015                      	RCALL WaitDataI2c
                                 
00011d d050                      	RCALL DisplayEnable
                                 
00011e e008                      	ldi r16,0x08							;0x06_H
00011f e018                      	ldi r17,0x08
000120 9300 00bb                 	sts TWDR, r16								
000122 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
000123 9300 00bc                 	sts TWCR, r16
000125 d00c                      	RCALL WaitDataI2c
                                 
000126 d047                      	RCALL DisplayEnable
                                 
000127 d0ba                      	RCALL retardo5ms
                                 	
000128 e608                      	ldi r16, 0x68							;0x06_L
000129 e618                      	ldi r17, 0x68
00012a 9300 00bb                 	sts TWDR, r16								
00012c e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
00012d 9300 00bc                 	sts TWCR, r16
00012f d002                      	RCALL WaitDataI2c
                                 
000130 d03d                      	RCALL DisplayEnable
                                 
000131 9508                      	ret
                                 
                                 ;-----------Fin Inicialización display--------------
                                 
                                 ;--DISPLAY : DATA I2C OK---;
                                 
                                 WaitDataI2c:
                                 
                                 wait_twint:
000132 9100 00bc                 	lds r16,TWCR
000134 ff07                      	sbrs r16,TWINT								; Espera TWINT para confirmar que se envió ok
000135 cffc                      	rjmp wait_twint
                                 
000136 9100 00b9                 	lds r16,TWSR
000138 7f08                      	andi r16, 0xF8
000139 3208                      	cpi r16, MT_DATA_ACK
00013a f591                      	brne error_data
00013b 9508                      	ret
                                 
                                 ;------DISPLAY : CHAR------;                  Con esta Funcion le enviamos un CHAR al display
                                 DisplayChar:
                                 
00013c 2f08                      	mov r16,DISPVAR							  ;En DISPVAR tiene que estar el CHAR
00013d 7f00                      	andi r16,0xF0							  ;Envio DISPVAR_H
00013e 6009                      	ori r16,0x09
00013f 2f10                      	mov r17,r16
000140 9300 00bb                 	sts TWDR, r16								; Carga DATA en twdr, limpia twint para empezar la transmision
000142 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
000143 9300 00bc                 	sts TWCR, r16
                                 
000145 dfec                      	RCALL WaitDataI2c
000146 d027                      	RCALL DisplayEnable
                                 
000147 2f08                      	mov r16,DISPVAR							  ;Envio DISPVAR_L
000148 0f00                      	lsl r16
000149 0f00                      	lsl r16
00014a 0f00                      	lsl r16
00014b 0f00                      	lsl r16
00014c 6009                      	ori r16,0x09
00014d 2f10                      	mov r17,r16
00014e 9300 00bb                 	sts TWDR, r16								
000150 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
000151 9300 00bc                 	sts TWCR, r16
000153 dfde                      	RCALL WaitDataI2c
                                 
000154 d019                      	RCALL DisplayEnable
                                 
000155 9508                      	ret
                                 
                                 ;------Display :ENTER----------
                                 
                                 DisplayEnter:
                                 
000156 ec08                      	ldi r16,0xC8								;0x08_H
000157 ec18                      	ldi r17,0xC8
000158 9300 00bb                 	sts TWDR, r16								
00015a e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
00015b 9300 00bc                 	sts TWCR, r16								
00015d dfd4                      	RCALL WaitDataI2c
                                 
00015e d00f                      	RCALL DisplayEnable							
                                 
00015f e008                      	ldi r16,0x08								;0x08_L				
000160 e018                      	ldi r17,0x08
                                 	
000161 9300 00bb                 	sts TWDR, r16								
000163 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
000164 9300 00bc                 	sts TWCR, r16								
000166 dfcb                      	RCALL WaitDataI2c
                                 
000167 d006                      	RCALL DisplayEnable
000168 9508                      ret
                                 
                                 
                                 
                                 ;----DISPLAY : STOP------
                                 
                                 I2CStop:
000169 e904                      	ldi r16, (1<<TWINT)|(1<<TWEN)| (1<<TWSTO)	;Transmite bit de STOP
00016a 9300 00bc                 	sts TWCR, r16
00016c 9508                      			ret
                                 
                                 error_data:
00016d d011                      	RCALL ERROR1
                                 
                                 
                                 DisplayEnable:
00016e d065                      	RCALL retardo1ms
                                 	
00016f 6014                      	ori r17, 0x04
000170 9310 00bb                 	sts TWDR, r17								
000172 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
000173 9300 00bc                 	sts TWCR, r16
000175 dfbc                      	RCALL WaitDataI2c
                                 ;	RCALL retardo1ms
                                 
000176 7f1b                      	andi r17, 0b11111011
000177 9310 00bb                 	sts TWDR, r17								
000179 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
00017a 9300 00bc                 	sts TWCR, r16
00017c dfb5                      	RCALL WaitDataI2c
                                 
                                 	;RCALL retardo1ms
00017d 9508                      	ret
                                 
                                 
                                 ;-----------Error----------------------------------
                                 
                                 ERROR:
                                 	
                                 	;ldi R16,0x02
                                 	;out PORTB,R16
00017e cfff                      	rjmp error
                                 
                                 ERROR1:
                                 	
                                 	;ldi R16,0x02
                                 	;out PORTB,R16
00017f e904                      	ldi r16, (1<<TWINT)|(1<<TWEN)| (1<<TWSTO)	;Transmite bit de STOP
000180 9300 00bc                 	sts TWCR, r16
000182 cffb                      	rjmp error
                                 
                                 ;------Display :CLEAR----------
                                 DisplayClear:
000183 e018                      	ldi r17, 0x08
000184 e008                      	ldi	r16, 0x08
000185 9300 00bb                 	sts TWDR, r16								; Carga DATA en twdr, limpia twint para empezar la transmision
000187 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
000188 9300 00bc                 	sts TWCR, r16
                                 
00018a dfa7                      	RCALL WaitDataI2c
00018b dfe2                      	RCALL DisplayEnable
                                 
00018c e118                      	ldi r17, 0x18
00018d e108                      	ldi r16, 0x18
00018e 9300 00bb                 	sts TWDR, r16								
000190 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
000191 9300 00bc                 	sts TWCR, r16
000193 df9e                      	RCALL WaitDataI2c
                                 
000194 dfd9                      	RCALL DisplayEnable
                                 
000195 9508                      	ret
                                 
                                 DisplayToggleShift:
000196 e118                      	ldi r17, 0x18
000197 e108                      	ldi	r16, 0x18
000198 9300 00bb                 	sts TWDR, r16								; Carga DATA en twdr, limpia twint para empezar la transmision
00019a e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
00019b 9300 00bc                 	sts TWCR, r16
                                 
00019d df94                      	RCALL WaitDataI2c
00019e dfcf                      	RCALL DisplayEnable
                                 
00019f e818                      	ldi r17, 0x88
0001a0 e808                      	ldi r16, 0x88
0001a1 9300 00bb                 	sts TWDR, r16								
0001a3 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
0001a4 9300 00bc                 	sts TWCR, r16
0001a6 df8b                      	RCALL WaitDataI2c
                                 
0001a7 dfc6                      	RCALL DisplayEnable
                                 
0001a8 9508                      	ret
                                 
                                 Shift:
0001a9 959a                      		DEC			SHIFTREGISTER
0001aa f411                      		BRNE		SkipShift0
0001ab dfea                      		RCALL		DisplayToggleShift
0001ac ea90                      		LDI			SHIFTREGISTER,SHIFTDELAY		
                                 SkipShift0:
0001ad d026                      		RCALL		retardo1ms
                                 
0001ae 9508                      		ret
                                 
                                 DisplayString:
0001af 93ff                      	PUSH ZH
0001b0 93ef                      	PUSH ZL
0001b1 e040                      	LDI CONTADOR,0x00
                                 
                                 DisplayString_cont:
0001b2 9543                      	INC CONTADOR	
0001b3 9185                      	LPM DISPVAR, Z+
0001b4 3080                      	CPI DISPVAR,0x00
0001b5 f7e1                      	BRNE DisplayString_cont
0001b6 9543                      	INC CONTADOR
0001b7 9185                      	LPM DISPVAR, Z+
0001b8 3080                      	CPI DISPVAR,0x00
0001b9 f7c1                      	BRNE DisplayString_cont
0001ba 954a                      	DEC CONTADOR
0001bb 954a                      	DEC CONTADOR
0001bc 91ef                      	POP ZL
0001bd 91ff                      	POP ZH
                                 
                                 DisplayString_next:
0001be 9185                      	lpm DISPVAR, Z+
0001bf 3080                      	CPI DISPVAR,0x00
0001c0 f419                      	BRNE DisplayString_nextChar
0001c1 df94                      	RCALL DisplayEnter
0001c2 954a                      	DEC CONTADOR
0001c3 cffa                      	RJMP DisplayString_next
                                 DisplayString_nextChar:
0001c4 df77                      	RCALL DisplayChar
                                 
0001c5 954a                      	dec  CONTADOR
0001c6 f7b9                      	brne DisplayString_next
                                 	
0001c7 9508                      	ret
                                 
                                 
                                 
                                 DispNum:
                                 	
                                 
0001c8 e300                      	ldi TEMP, 48
0001c9 0f30                      	add KEY,TEMP
                                 	
                                 	
                                 DispNum_cont:
0001ca 2f80                      	mov DISPVAR,TEMP
0001cb df70                      	RCALL DisplayChar
                                 	
                                  .include "delay.asm"
0001cc 9508                      
                                  * delay.asm
                                  *
                                  *  Created: 05-Nov-16 5:35:06 PM
                                  *   Author: galca
                                  */ 
                                  retardo10us:
0001cd 930f                      	push TEMP
0001ce e30a                      	ldi TEMP,58
                                 loop_ret_10:
0001cf 950a                      	dec TEMP
0001d0 0000                      	NOP
0001d1 f7e9                      	brne loop_ret_10
0001d2 910f                      	pop TEMP
0001d3 9508                      	ret
                                 
                                 retardo1ms:
0001d4 930f                      	push TEMP
0001d5 e604                      	ldi TEMP,100
                                 loop_ret_1m:
0001d6 dff6                      	RCALL retardo10us
0001d7 950a                      	dec TEMP	
0001d8 f7e9                      	brne loop_ret_1m
0001d9 910f                      	pop TEMP
0001da 9508                      	ret
                                 
                                 retardo50ms:
0001db 930f                      	push TEMP
0001dc e302                      	ldi TEMP,50
                                 loop_ret_50m:
0001dd dff6                      	RCALL retardo1ms
0001de 950a                      	dec TEMP
0001df f7e9                      	brne loop_ret_50m
0001e0 910f                      	pop TEMP
0001e1 9508                      	ret
                                 
                                 retardo5ms:
0001e2 e005                      	ldi TEMP,5
                                 loop_ret_5m:
0001e3 dff0                      	RCALL retardo1ms
0001e4 950a                      	dec TEMP
0001e5 f7e9                      	brne loop_ret_5m
0001e6 9508                      	ret
                                 
                                 retardo3s:
                                 
0001e7 e30c                      	ldi TEMP, 60
                                 loop_ret_3s:
0001e8 dff2                      	RCALL retardo50ms
0001e9 950a                      	dec TEMP
0001ea f7e9                      	brne loop_ret_3s
0001eb 9508                      	ret
                                 
                                 retardo1s:
                                 
0001ec e104                      	ldi TEMP, 20
                                 loop_ret_1s:
0001ed dfed                      	RCALL retardo50ms
0001ee 950a                      	dec TEMP
0001ef f7e9                      	brne loop_ret_1s
                                  .include "interface.asm"
0001f0 9508                      
                                  * interface.asm
                                  *
                                  *  Created: 05-Nov-16 7:59:54 PM
                                  *   Author: galca
                                  */ 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                  ;....................Display welcome............................
                                 DisplayWelcome:
                                 	
0001f1 e0f4                      	LDi ZH, High(2*T_Welcome)
0001f2 e3e2                      	LDI ZL, LOW(2*T_Welcome)
                                 	
0001f3 dfbb                      	RCALL DisplayString
0001f4 df61                      	RCALL DisplayEnter
                                 	
0001f5 e0f4                      	LDI ZH, High(2*T_Cocktail)
0001f6 e4e0                      	LDI ZL, LOW(2*T_Cocktail)
                                 	
0001f7 dfb7                      	RCALL DisplayString
                                 		
0001f8 9508                      	ret
                                 
                                 DisplayMenu0:
                                 	
0001f9 e0f4                      	LDi ZH, High(2*T_Mode_Select)
0001fa e5e0                      	LDI ZL, LOW(2*T_Mode_Select)
                                 	
0001fb dfb3                      	RCALL DisplayString
                                 	
                                 		
0001fc 9508                      	ret
                                 
                                 DisplayMenu1a:
                                 	
0001fd e0f4                      	LDi ZH, High(2*T_Pred_Select)
0001fe e8e4                      	LDI ZL, LOW(2*T_Pred_Select)
                                 	
0001ff dfaf                      	RCALL DisplayString
                                 	
                                 		
000200 9508                      	ret
                                 
                                 DisplayMenu2a:
                                 	
000201 e0f4                      	LDi ZH, High(2*T_Pot_Select)
000202 ebe8                      	LDI ZL, LOW(2*T_Pot_Select)
                                 	
000203 dfab                      	RCALL DisplayString
                                 	
                                 		
000204 9508                      	ret
                                 
                                 DisplayMenu1b:
                                 	
000205 e0f4                      	LDi ZH, High(2*T_Bebida1_Select)
000206 eeec                      	LDI ZL, LOW(2*T_Bebida1_Select)
                                 	
000207 dfa7                      	RCALL DisplayString
                                 	
                                 		
000208 9508                      	ret
                                 
                                 DisplayMenu2b:
                                 	
000209 e0f5                      	LDi ZH, High(2*T_Porc_Select)
00020a e5ea                      	LDI ZL, LOW(2*T_Porc_Select)
                                 	
00020b dfa3                      	RCALL DisplayString
                                 	
                                 		
00020c 9508                      	ret
                                 
                                 DisplayMenu3b:
                                 	
00020d e0f5                      	LDi ZH, High(2*T_Bebida2_Select)
00020e e2e2                      	LDI ZL, LOW(2*T_Bebida2_Select)
                                 	
00020f df9f                      	RCALL DisplayString
000210 9508                      	ret
                                 
                                 DisplayWait:
                                 	
000211 e0f5                      	LDi ZH, High(2*T_Espere)
000212 e7e4                      	LDI ZL, LOW(2*T_Espere)
                                 
000213 df9b                      	RCALL DisplayString
000214 9508                      	ret
                                 
                                 DisplayDone:
                                 	
000215 e0f5                      	LDi ZH, High(2*T_Listo)
000216 e8ea                      	LDI ZL, LOW(2*T_Listo)
                                 
000217 df97                      	RCALL DisplayString
000218 9508                      	ret
                                 
                                  ;....................TABLAS (display)...........................
                                 
                                 T_Welcome:
000219 4942
00021a 4e45
00021b 4556
00021c 494e
00021d 4f44
00021e 2153
00021f 0000                      	.Db 'B','I','E','N','V','E','N','I','D','O','S','!',0,0
                                 
                                 T_COCKTail:
000220 2a2a
000221 432a
000222 434f
000223 2d4b
000224 4154
000225 4c49
000226 2a2a
000227 0000                      	.DB '*','*','*','C','O','C','K','-','T','A','I','L','*','*',0,0
                                 	
                                 T_Mode_Select:
000228 6553
000229 656c
00022a 6363
00022b 6f69
00022c 656e
00022d 6d20
00022e 646f
00022f 206f
000230 6564
000231 6f20
000232 6570
000233 6172
000234 6963
000235 6e6f
000236 003a
000237 2d31
000238 6142
000239 6973
00023a 6f63
00023b 3220
00023c 412d
00023d 6176
00023e 7a6e
00023f 6461
000240 006f
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm(113): warning: .cseg .db misalignment - padding zero byte
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(166): 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm' included form here
000241 0000                      	.DB		"Seleccione modo de operacion:",0,"1-Basico 2-Avanzado",0,0 
                                 
                                 T_Pred_Select:
000242 6553
000243 656c
000244 6363
000245 6f69
000246 656e
000247 6220
000248 6265
000249 6469
00024a 3a61
00024b 3100
00024c 462d
00024d 7265
00024e 656e
00024f 2074
000250 2d32
000251 6857
000252 7369
000253 6f63
000254 616c
000255 3320
000256 432d
000257 636f
000258 2d61
000259 6f43
00025a 616c
00025b 0000                      	.DB		"Seleccione bebida:",0,"1-Fernet 2-Whiscola 3-Coca-Cola",0,0
                                 
                                 T_Pot_Select:
00025c 6553
00025d 656c
00025e 6363
00025f 6f69
000260 656e
000261 7020
000262 746f
000263 6e65
000264 6963
000265 3a61
000266 3100
000267 432d
000268 726f
000269 6f64
00026a 6562
00026b 2073
00026c 2d32
00026d 654d
00026e 6964
00026f 2061
000270 2d33
000271 6e49
000272 6166
000273 746e
000274 6c69
000275 0000                      	.DB		"Seleccione potencia:",0,"1-Cordobes 2-Media 3-Infantil",0,0
                                 
                                 T_Bebida1_Select:
000276 6553
000277 656c
000278 6363
000279 6f69
00027a 656e
00027b 7020
00027c 6972
00027d 656d
00027e 6172
00027f 6220
000280 6265
000281 6469
000282 3a61
000283 3100
000284 462d
000285 7265
000286 656e
000287 2074
000288 2d32
000289 6857
00028a 7369
00028b 796b
00028c 3320
00028d 432d
00028e 636f
00028f 0061
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm(122): warning: .cseg .db misalignment - padding zero byte
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(166): 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm' included form here
000290 0000                      	.DB		"Seleccione primera bebida:",0,"1-Fernet 2-Whisky 3-Coca",0,0
                                 
                                 T_Bebida2_Select:
000291 6553
000292 656c
000293 6363
000294 6f69
000295 656e
000296 7320
000297 6765
000298 6e75
000299 6164
00029a 6220
00029b 6265
00029c 6469
00029d 3a61
00029e 2000
00029f 2d31
0002a0 6546
0002a1 6e72
0002a2 7465
0002a3 3220
0002a4 572d
0002a5 6968
0002a6 6b73
0002a7 2079
0002a8 2d33
0002a9 6f43
0002aa 6163
0002ab 0020
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm(125): warning: .cseg .db misalignment - padding zero byte
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(166): 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm' included form here
0002ac 0000                      	.DB		"Seleccione segunda bebida:",0," 1-Fernet 2-Whisky 3-Coca ",0,0
                                 
                                 T_Porc_Select:
0002ad 6e49
0002ae 7274
0002af 646f
0002b0 7a75
0002b1 6163
0002b2 7000
0002b3 726f
0002b4 6563
0002b5 746e
0002b6 6a61
0002b7 3a65
0002b8 0020
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm(128): warning: .cseg .db misalignment - padding zero byte
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(166): 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm' included form here
0002b9 0000                      	.DB		"Introduzca",0,"porcentaje: ",0,0
                                 
                                 T_Espere:
0002ba 7345
0002bb 6570
0002bc 6572
0002bd 0020
0002be 6f70
0002bf 2072
0002c0 6166
0002c1 6f76
0002c2 2e72
0002c3 2e2e
0002c4 0000                      	.DB		"Espere ",0,"por favor...",0,0
                                 
                                 T_Listo:
0002c5 694c
0002c6 7473
0002c7 216f
0002c8 5220
0002c9 7465
0002ca 7269
0002cb 2065
0002cc 7573
0002cd 6200
0002ce 6265
0002cf 6469
0002d0 2061
0002d1 6f70
0002d2 2072
0002d3 6166
0002d4 6f76                       .include "math.asm"
0002d5 0072
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\math.asm(1): warning: .cseg .db misalignment - padding zero byte
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(167): 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\math.asm' included form here
0002d6 0000                      
                                  * math.asm
                                  *
                                  *  Created: 18-Nov-16 11:18:15 AM
                                  *   Author: galca
                                  */ 
                                 
                                 keyb_to_bcd:
0002d7 91ff                      		POP			ZH
0002d8 91ef                      		POP			ZL
0002d9 910f                      		POP			TEMP
0002da 700f                      		ANDI		TEMP,0x0F
0002db 9502                      		SWAP		TEMP
                                 
0002dc 2e40                      		MOV			TEMP2,TEMP
0002dd 910f                      		POP			TEMP
0002de 700f                      		ANDI		TEMP,0x0F
0002df 2904                      		OR			TEMP,TEMP2
0002e0 930f                      		PUSH		TEMP
0002e1 93ef                      		PUSH		ZL
0002e2 93ff                      		PUSH		ZH
                                 
0002e3 9508                      		RET


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :   0 z  :   3 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   2 
r5 :   0 r6 :   1 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 155 r17:  40 r18:   8 r19:  26 r20:  10 
r21:   3 r22:   0 r23:   0 r24:  10 r25:   3 r26:   0 r27:   0 r28:   0 
r29:   0 r30:  14 r31:  14 
Registers used: 13 out of 35 (37.1%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   2 adiw  :   0 and   :   0 
andi  :   8 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   8 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  15 brpl  :   0 brsh  :   4 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   0 cbr   :   2 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   1 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :  18 cpse  :   0 dec   :  12 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :   5 jmp   :   0 
ld    :   0 ldd   :   0 ldi   : 111 lds   :   6 lpm   :   3 lsl   :   4 
lsr   :   0 mov   :   7 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   1 or    :   1 ori   :   4 out   :  10 pop   :  11 
push  :  10 rcall : 131 ret   :  36 reti  :   0 rjmp  :  20 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   0 sbic  :   3 sbis  :   0 
sbiw  :   0 sbr   :   3 sbrc  :   4 sbrs  :   3 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :  50 
sub   :   0 subi  :   0 swap  :   1 tst   :   0 wdr   :   0 
Instructions used: 30 out of 113 (26.5%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0005c8   1100    380   1480   32768   4.5%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 5 warnings
