
AVRASM ver. 2.2.6  D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm Tue Nov 22 19:45:49 2016

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.0.106\avrasm\inc\m328pdef.inc'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(27): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\ultrasound_driver.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(236): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\kb_driver.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(237): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\disp_driver.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(238): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\delay.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(239): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(240): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\math.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.0.106\avrasm\inc\m328pdef.inc'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(27): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\ultrasound_driver.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(236): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\kb_driver.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(237): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\disp_driver.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(238): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\delay.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(239): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm'
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(240): Including file 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\math.asm'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; mas-cocktail.asm
                                 ;
                                 ; Created: 01-Oct-16 1:40:18 PM
                                 ; Author : galca
                                 ;
                                 ; LEDs verdes: PORTD 4 y 7
                                 ; LEDs rojos: PORTC 2 y 3
                                  .equ CRYSTAL = 8000000
                                  .equ SHIFTDELAY = 160
                                  .EQU FERNET = 1
                                  .EQU WHISKY = 2
                                  .EQU COCA = 3
                                  .EQU PERC = 0
                                 
                                  .def TEMP = R16
                                  .DEF TEMP2 = R4
                                  .def SHIFTREGISTER = R25
                                  .DEF PERCENTREG = R6
                                  .DEF DRINK1 = R22
                                  .DEF DRINK2 = R23
                                  .def PRGFLAGS = R21
                                  
                                 
                                 .CSEG
000000 c028                      		RJMP		BEGIN
                                  .include "ultrasound_driver.asm"
                                 
                                  * ultrasound_driver.asm
                                  *
                                  *  Created: 19-Nov-16 4:18:04 PM
                                  *   Author: galca
                                  */ 
                                 
                                 InitUsart:
000001 e108                      		LDI		TEMP,(1<<TXEN0)|(1<<RXEN0)
000002 9300 00c1                 		STS		UCSR0B,TEMP
000004 e006                      		LDI		TEMP,(3<<UCSZ00)
000005 9300 00c2                 		STS		UCSR0C,R16
000007 e707                      		LDI		TEMP,0X77
000008 9300 00c4                 		STS		UBRR0L,TEMP
00000a e000                      		LDI		TEMP,0x00
00000b 9300 00c5                 		STS		UBRR0H,TEMP
                                 
00000d 9508                      		RET
                                 
                                 measurement:
00000e 91ff                      		POP		ZH
00000f 91ef                      		POP		ZL
000010 e505                      		LDI		TEMP,0x55
000011 d009                      		RCALL	transmit
000012 d1fc                      		RCALL	retardo50ms
000013 d00e                      		RCALL	receive
000014 930f                      		PUSH	TEMP
000015 d00c                      		RCALL	receive
000016 930f                      		PUSH	TEMP
000017 d00a                      		RCALL receive
                                 
                                 
000018 93ef                      		PUSH	ZL
000019 93ff                      		PUSH	ZH
00001a 9508                      		RET
                                 
                                 
                                 transmit:		
00001b 9040 00c0                 		LDS		TEMP2,UCSR0A
00001d fe45                      		SBRS	TEMP2,UDRE0
00001e cffc                      		RJMP	transmit
00001f 9300 00c6                 		STS		UDR0,TEMP
000021 9508                      		RET
                                 
                                 receive:
000022 9040 00c0                 		LDS		TEMP2,UCSR0A
000024 fe45                      		SBRS	TEMP2,UDRE0
000025 cffc                      		RJMP	receive
000026 9100 00c6                 		LDS		TEMP,UDR0
000028 9508                      
                                 
                                 
                                 BEGIN:
000029 ef0f                      		LDI	R16, low(RAMEND)
00002a bf0d                      		OUT	SPL, R16
00002b e008                      		LDI	R16, high(RAMEND)
00002c bf0e                      		OUT	SPH, R16
                                 
                                 /*		RCALL		InicI2C			; esta funcion inicializa el display, si o si tiene que ir. no hace falta modificarle nada
                                 		RCALL		InicDisplay	
                                 		RCALL		CLEARKEY
                                 		RCALL init_usound
                                 		RCALL us_trigger
                                 		RCALL measure_pulse
                                 
                                 		PUSH R22
                                 		RCALL bcd_to_ascii
                                 		POP R22
                                 		MOV DISPVAR,R22
                                 		RCALL DisplayChar
                                 		POP R22
                                 		MOV DISPVAR,R22
                                 		RCALL DisplayChar
                                 
                                 
                                 HERE:
                                 		RCALL		InicI2C			; esta funcion inicializa el display, si o si tiene que ir. no hace falta modificarle nada
                                 		RCALL		InicDisplay	
                                 		RCALL		CLEARKEY
                                 		LDI	R16, low(RAMEND)
                                 		OUT	SPL, R16
                                 		LDI	R16, high(RAMEND)
                                 		OUT	SPH, R16
                                 
                                 		RCALL measurement
                                 		pop r16
                                 		pop r17
                                 		push r16
                                 		push r17
                                 		RCALL bin_to_ascii
                                 		pop r16
                                 		mov DISPVAR,r16
                                 		RCALL DisplayChar
                                 		pop r16
                                 		mov DISPVAR,r16
                                 		RCALL DisplayChar
                                 		pop r16
                                 		mov DISPVAR,r16
                                 		RCALL DisplayChar
                                 		RCALL bin_to_ascii
                                 		pop r16
                                 		mov DISPVAR,r16
                                 		RCALL DisplayChar
                                 		pop r16
                                 		mov DISPVAR,r16
                                 		RCALL DisplayChar
                                 		pop r16
                                 		mov DISPVAR,r16
                                 		RCALL DisplayChar
                                 
                                 here2:		
                                 		RJMP here2
                                 		
                                 */
                                 
                                 
                                 /*		LDI			R21,'4'
                                 		LDI			R22,'7'
                                 		PUSH		R22
                                 		PUSH		R21
                                 		RCALL		keyb_to_bcd
                                 		POP			R21
                                 		RJMP		BEGIN*/
                                 
                                 
00002d d068                      		RCALL		KBINIT
00002e d09f                      		RCALL		InicI2C			; esta funcion inicializa el display, si o si tiene que ir. no hace falta modificarle nada
00002f d0c1                      		RCALL		InicDisplay		; lo mismo que la anterior
000030 dfd0                      		RCALL		InitUsart
                                 
                                  MAIN:	
                                 /*		RCALL		GETKEY
                                 		ldi			TEMP,48
                                 		ADD			KEY,TEMP
                                 		MOV			DISPVAR,KEY
                                 		RCALL		DisplayChar*/
000031 d1fa                      		RCALL		DisplayWelcome
000032 d1ef                      		RCALL		retardo3s
000033 d183                      		RCALL		DisplayClear
000034 d1ff                      		RCALL		DisplayMenu0
000035 ea90                      		LDI			SHIFTREGISTER,SHIFTDELAY
                                 KeyMenu0:
000036 d180                      		RCALL		DisplayClear
000037 d1fc                      		RCALL		DisplayMenu0
000038 d093                      		RCALL		CLEARKEY
                                 getk0:
000039 d1a3                      		RCALL		Shift
00003a d062                      		RCALL		GETKEY
00003b 3031                      		CPI			KEY,0x01
00003c f019                      		BREQ		KeyMenu1a
00003d 3032                      		CPI			KEY,0x02
00003e f0b1                      		BREQ		KeyMenu1b
00003f cff9                      		RJMP		getk0
                                 KeyMenu1a:
000040 d176                      		RCALL		DisplayClear
000041 d1f6                      		RCALL		DisplayMenu1a
000042 d089                      		RCALL		CLEARKEY
000043 d1e3                      		RCALL		retardo1s
                                 getk1a:
000044 d198                      		RCALL		Shift
000045 d057                      		RCALL		GETKEY
000046 3030                      		CPI			KEY,0x00
000047 f3e1                      		BREQ		getk1a
000048 3033                      		CPI			KEY,0x03
000049 f7d0                      		BRSH		getk1a
                                 KeyMenu2a:
00004a d16c                      		RCALL		DisplayClear
00004b d1f0                      		RCALL		DisplayMenu2a
00004c d07f                      		RCALL		CLEARKEY
00004d d1d9                      		RCALL		retardo1s
                                 getk2a:		
00004e d18e                      		RCALL		Shift
00004f d04d                      		RCALL		GETKEY
000050 3030                      		CPI			KEY,0x00
000051 f3e1                      		BREQ		getk2a
000052 3034                      		CPI			KEY,0x04
000053 f7d0                      		BRSH		getk2a
000054 c02c                      		RJMP		END
                                 KeyMenu1b:
000055 d161                      		RCALL		DisplayClear
000056 d1e9                      		RCALL		DisplayMenu1b
000057 d074                      		RCALL		CLEARKEY
000058 d1ce                      		RCALL		retardo1s
                                 getk1b:		
000059 d183                      		RCALL		Shift
00005a d042                      		RCALL		GETKEY
00005b 3030                      		CPI			KEY,0x00
00005c f3e1                      		BREQ		getk1b
00005d 3033                      		CPI			KEY,0x03
00005e f7d0                      		BRSH		getk1b
                                 KeyMenu2b:
00005f d157                      		RCALL		DisplayClear
000060 d1e3                      		RCALL		DisplayMenu2b
000061 d06a                      		RCALL		CLEARKEY
000062 d1c4                      		RCALL		retardo1s
                                 getk2b:	
000063 d068                      		RCALL		CLEARKEY	
000064 d038                      		RCALL		GETKEY
000065 3030                      		CPI			KEY,0x00
000066 f3e1                      		BREQ		getk2b
000067 e300                      		LDI			TEMP,48
000068 303b                      		CPI			KEY,11
000069 f409                      		BRNE		KeyNotZero
00006a e030                      		LDI			KEY,0x00
                                 KeyNotZero:
00006b 0f30                      		ADD			KEY,TEMP
00006c 2f83                      		MOV			DISPVAR,KEY
00006d d102                      		RCALL		DisplayChar
00006e d1b8                      		RCALL		retardo1s
00006f 933f                      		PUSH		KEY
000070 fd50                      		SBRC		PRGFLAGS,PERC
000071 c002                      		RJMP		getPercentage
000072 6051                      		ORI			PRGFLAGS,(1<<PERC)
000073 cfef                      		RJMP		getk2b
                                 
                                 getPercentage:
000074 7f5e                      		ANDI		PRGFLAGS,(0xFE<<PERC)
000075 d29c                      		RCALL		keyb_to_bcd
000076 906f                      		POP			PERCENTREG
                                 
                                 KeyMenu3b:
000077 d13f                      		RCALL		DisplayClear
000078 d1cf                      		RCALL		DisplayMenu3b
000079 d052                      		RCALL		CLEARKEY
00007a d1ac                      		RCALL		retardo1s
                                 getk3b:
00007b d161                      		RCALL		Shift
00007c d020                      		RCALL		GETKEY
00007d 3030                      		CPI			KEY,0x00
00007e f3e1                      		BREQ		getk3b
00007f 3034                      		CPI			KEY,0x04
000080 f7d0                      		BRSH		getk3b
                                 
                                 END:	
000081 d135                      		RCALL		DisplayClear
000082 d1c9                      		RCALL		DisplayWait
000083 d1a3                      		RCALL		retardo1s
000084 d132                      		RCALL		DisplayClear
000085 d1ca                      		RCALL		DisplayDone
000086 d1a0                      		RCALL		retardo1s
000087 d12f                      		RCALL		DisplayClear
000088 df85                      		RCALL measurement
                                 
000089 d2a5                      		RCALL bin_to_ascii
00008a 910f                      		pop r16
00008b 2f80                      		mov DISPVAR,r16
00008c d0e3                      		RCALL DisplayChar
00008d 910f                      		pop r16
00008e 2f80                      		mov DISPVAR,r16
00008f d0e0                      		RCALL DisplayChar
000090 910f                      		pop r16
000091 2f80                      		mov DISPVAR,r16
000092 d0dd                      		RCALL DisplayChar
000093 d18e                      		RCALL retardo3s
000094 910f                      		pop r16
000095 cfa0                      		RJMP		KeyMenu0
                                 
                                  .include "kb_driver.asm"
                                 
                                  * kb_driver.asm
                                  *
                                  *  Created: 25-Oct-16 10:23:47 PM
                                  *   Author: galca
                                  */ 
                                 
                                 .EQU COL1 = PINB0
                                 .EQU COL2 = PINB1
                                 .EQU COL3 = PINB2
                                 
                                 .EQU ROW1 = PINB3
                                 .EQU ROW2 = PINB7
                                 .EQU ROW3 = PINB5
                                 .EQU ROW4 = PINB4
                                 
                                 .EQU ROW1VAL = 1
                                 .EQU ROW2VAL = 4
                                 .EQU ROW3VAL = 7
                                 .EQU ROW4VAL = 10
                                 
                                 .EQU KBPORT = PORTB
                                 .EQU PRESSED = 0
                                 .EQU KBCONF = 0xF8
                                 .EQU KBPULLUPS = 0x07
                                  
                                 
                                 .DEF KBTEMP = R17
                                 .DEF KBFLAGS = R18
                                 .DEF KEY = R19
                                  
                                 .CSEG
                                 
                                 KBINIT:
000096 931f                      		PUSH		KBTEMP
000097 ef18                       		LDI			KBTEMP,KBCONF		;cols como input, filas como output
000098 b914                      		OUT			DDRB,KBTEMP	
000099 e017                      		LDI			KBTEMP,KBPULLUPS		;habilitar pullups en el input
00009a b915                      		OUT			KBPORT,KBTEMP
00009b 911f                      		POP			KBTEMP	
00009c 9508                      		RET
                                 
                                  GETKEY:
                                 												;Esta sección lee la fila 1
00009d e031                      		LDI			KEY,ROW1VAL					;carga el valor de la primera tecla de la fila 1 en "key"
00009e ef17                      		LDI			KBTEMP,~(1<<ROW1)			;"apaga" fila 1 (carga un byte de unos con un único cero en la posición "ROW1")
00009f b915                      		OUT			KBPORT,KBTEMP				;y cargando el valor al puerto usado por el teclado
0000a0 d013                      		RCALL		READ_COL					;se pasa a leer las columnas, esperando encontrar coincidencias
                                  
0000a1 fd20                      		SBRC		KBFLAGS,PRESSED				;si se registró una tecla presionada
0000a2 c010                      		RJMP		DONE						;salir de la subrutina
                                  
                                 												;Esta sección lee la fila 2
0000a3 e034                      		LDI			KEY,ROW2VAL					;carga el valor de la primera tecla de la fila 2 en "key"
0000a4 e71f                      		LDI			KBTEMP,~(1<<ROW2)			;"apaga" fila 2 (carga un byte de unos con un único cero en la posición "ROW2")
0000a5 b915                      		OUT			KBPORT,KBTEMP				;y cargando el valor al puerto usado por el teclado
0000a6 d00d                      		RCALL		READ_COL					;se pasa a leer las columnas, esperando encontrar coincidencias
                                  
0000a7 fd20                      		SBRC		KBFLAGS,PRESSED				;si se registró una tecla presionada
0000a8 c00a                      		RJMP		DONE						;salir de la subrutina
                                 												
                                 												;Esta sección lee la fila 3
0000a9 e037                      		LDI			KEY,ROW3VAL					;carga el valor de la primera tecla de la fila 3 en "key"
0000aa ed1f                      		LDI			KBTEMP,~(1<<ROW3)			;"apaga" fila 3 (carga un byte de unos con un único cero en la posición "ROW3")
0000ab b915                      		OUT			KBPORT,KBTEMP				;y cargando el valor al puerto usado por el teclado
0000ac d007                      		RCALL		READ_COL					;se pasa a leer las columnas, esperando encontrar coincidencias
                                 
0000ad fd20                      		SBRC		KBFLAGS,PRESSED				;si se registró una tecla presionada
0000ae c004                      		RJMP		DONE						;salir de la subrutina
                                  
                                 												;Esta sección lee la fila 4
0000af e03a                      		LDI			KEY,ROW4VAL					;carga el valor de la primera tecla de la fila 4 en "key"
0000b0 ee1f                      		LDI			KBTEMP,~(1<<ROW4)			;"apaga" fila 4 (carga un byte de unos con un único cero en la posición "ROW4")
0000b1 b915                      		OUT			KBPORT,KBTEMP				;y cargando el valor al puerto usado por el teclado
0000b2 d001                      		RCALL		READ_COL					;se pasa a leer las columnas, esperando encontrar coincidencias
                                  
                                 DONE:					
0000b3 9508                      		RET
                                  
                                 READ_COL:
0000b4 d013                      		RCALL		SETTLE
0000b5 7f2e                      		CBR			KBFLAGS, (1<<PRESSED)		;estado = no presionado
                                  
0000b6 9918                      		SBIC		PINB, COL1					;lee columna 1
0000b7 c002                      		RJMP		NEXTCOL						;si no, pasar a columna 2
0000b8 6021                      		SBR			KBFLAGS, (1<<PRESSED)		;estado = presionado
0000b9 9508                      		RET										;devolver el valor de la primer columna de la fila
                                 NEXTCOL:
0000ba 9919                      		SBIC		PINB,COL2					;lee columna 2
0000bb c003                      		RJMP		NEXTCOL1					;si no, pasar a columna 3
0000bc 9533                      		INC			KEY							
0000bd 6021                      		SBR			KBFLAGS,(1<<PRESSED)		;estado = presionado
0000be 9508                      		RET										;devolver el valor de la segunda columna de la fila
                                 NEXTCOL1:
0000bf 991a                      		SBIC		PINB,COL3					;lee columna 3
0000c0 c004                      		RJMP		EXIT						;si no, termina
0000c1 9533                      		INC			KEY							;estado = presionado
0000c2 9533                      		INC			KEY
0000c3 6021                      		SBR			KBFLAGS, (1<<PRESSED)		;estado=presionado
0000c4 9508                      		RET										;devolver el valor de la tercer columna de la fila
                                 EXIT:
0000c5 2733                      		CLR			KEY							;vacía el valor de la tecla
0000c6 7f2e                      		CBR			KBFLAGS, (1<<PRESSED)		;no se presionó ninguna tecla
0000c7 9508                      		RET										
                                 SETTLE:
0000c8 ef1f                      		LDI			KBTEMP,255
0000c9 951a                      TAGAIN: DEC			KBTEMP
0000ca f7f1                      		BRNE		TAGAIN
0000cb 9508                      		RET 
                                 
                                 CLEARKEY:
0000cc e030                      		LDI			KEY,0X00
                                  .include "disp_driver.asm"
0000cd 9508                      
                                  * disp_driver.asm
                                  *
                                  *  Created: 01-Nov-16 5:01:30 PM
                                  *   Author: galca
                                  */ 
                                  ;
                                 ; display.asm
                                 ;
                                 ; Created: 23/9/2016 2:16:36 p. m.
                                 ; Author : waral
                                 ;
                                 
                                 	.def CONTADOR = R20
                                 	.def DISPVAR = R24
                                 
                                 	.equ TWI_RATE = 0xF8
                                 	.equ STARTi = 0x08
                                 	.equ MT_SLA_ACK = 0x20
                                 	.equ MT_DATA_ACK= 0x28
                                 	.equ SL_ADD = 0b01001110
                                 
                                 
                                 ;para usar el i2c no hay que inicializar nada de los puertos... 
                                 ;lo que yo puse fue para encender un led que me diga que esta todo ok
                                 
                                 
                                 /*start:
                                 	ldi TEMP , 0x02		; inicializacion led de error
                                 	out ddrb , TEMP
                                 	ldi TEMP , 0x00			
                                 	out portb , TEMP	;esto tranquilamente se puede borrar
                                 	
                                 	RCALL InicI2C			; esta funcion inicializa el display, si o si tiene que ir. no hace falta modificarle nada
                                 	RCALL InicDisplay		; lo mismo que la anterior
                                 	RCALL DisplayCocktail	; Mando "Cocktail" al display
                                 	RCALL DisplayEnter		; Mando "Enter" al display
                                 	RCALL DisplayWelcome	; Mando "Welcome" al display
                                 	
                                 
                                 
                                 	RCALL I2CStop			; cuando finaliza el programa hay que ponerle stop al i2c
                                 	
                                 	ldi R16,0x02	;LED INDICADOR DE FINALIZACION OK DE PROGRAMA
                                 	out PORTB,R16
                                 
                                 loop:
                                 	rjmp loop			;loop infinito
                                 
                                     rjmp start			;vuelve al inicio*/
                                 
                                 ;---------------------------------------------------------------------
                                 ;---------------------------------------------------------------------
                                 ;-----------------------------Fin start-------------------------------
                                 ;---------------------------------------------------------------------
                                 ;---------------------------------------------------------------------
                                 
                                 
                                 
                                 ;----------------------------SUBRUTINAS-------------------------------
                                 
                                 ;_____________________________________________________
                                 ;;;;;;;;;;;;;;;;;DISPLAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;|
                                 ;_____________________________________________________|
                                 
                                 ;------- inicializacion i2c-------
                                 InicI2C:	
                                 	
0000ce ef08                      	ldi TEMP, TWI_RATE
0000cf 9300 00b8                 	sts TWBR,TEMP
                                 
0000d1 ea04                      	ldi TEMP, (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)   
0000d2 9300 00bc                 	sts TWCR, TEMP								;envia condicion de start
                                 
                                 wait1:
0000d4 9100 00bc                 	lds TEMP,TWCR
0000d6 ff07                      	sbrs TEMP,TWINT								;espera flag de start ok
0000d7 cffc                      	rjmp wait1
                                 
0000d8 9100 00b9                 	lds TEMP,TWSR
0000da 7f08                      	andi TEMP, 0xF8								;si el estado en el registro TWI es distinto de START se va a error
0000db 3008                      	cpi TEMP, STARTi
0000dc f409                      	brne error_A
0000dd c001                      	rjmp continuo
                                 error_A:
0000de d0d4                      	RCALL ERROR1
                                 	
                                 continuo:
0000df e40e                      	ldi TEMP, SL_ADD								
0000e0 9300 00bb                 	sts TWDR, TEMP								;Carga direccion del esclavo en el registro TWDR, limpia bit TWINT para empezar la transmision de la direccion
0000e2 e804                      	ldi TEMP, (1<<TWINT) | (1<<TWEN)
0000e3 9300 00bc                 	sts TWCR, TEMP								;envio direccion del esclavo
                                 
                                 wait2:
0000e5 9100 00bc                 	lds TEMP,TWCR
0000e7 ff07                      	sbrs TEMP,TWINT								;espera seteo de TWINT para confirmar transmision ok
0000e8 cffc                      	rjmp wait2
                                 
0000e9 9100 00b9                 	lds TEMP,TWSR
0000eb 7f08                      	andi TEMP, 0xF8								;chequea el registro TWI, salta a error si no se transmitio bien
0000ec 3200                      	cpi TEMP, MT_SLA_ACK
0000ed f009                      	breq error_B
0000ee c001                      	rjmp continuo2
                                 error_B:
0000ef d0c3                      	RCALL ERROR1
                                 continuo2:
0000f0 9508                      	ret
                                 	
                                 ;----------------------------------Fin inicializacion i2c----------------------------------------;
                                 
                                 ;.................................incialización display, envio de a 4bits........................;
                                 InicDisplay:	
                                 	
0000f1 d11d                      	RCALL retardo50ms
                                 	
0000f2 e300                      	ldi TEMP, 0x30
0000f3 e310                      	ldi r17,0x30
0000f4 9300 00bb                 	sts TWDR, TEMP								; Carga DATA en twdr, limpia twint para empezar la transmision
0000f6 e804                      	ldi TEMP, (1<<TWINT) |(1<<TWEN)
0000f7 9300 00bc                 	sts TWCR, TEMP								
0000f9 d06c                      	RCALL WaitDataI2c
                                 
0000fa d0a7                      	RCALL DisplayEnable
                                 
0000fb d121                      	RCALL retardo5ms
                                 
0000fc d0a5                      	RCALL DisplayEnable
                                 
0000fd d10a                      	RCALL retardo1ms
                                 												; todo esto te lo pide que hagas la hoja de datos del display
0000fe d0a3                      	RCALL DisplayEnable
                                 
0000ff d11d                      	RCALL retardo5ms
                                 
000100 e208                      	ldi r16, 0x28								;set 4bit mode
000101 e218                      	ldi r17,0x28
000102 9300 00bb                 	sts TWDR, r16								
000104 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
000105 9300 00bc                 	sts TWCR, r16								
000107 d05e                      	RCALL WaitDataI2c
                                 	
000108 d099                      	RCALL DisplayEnable
                                 
000109 d0fe                      	RCALL retardo1ms
                                 
00010a e208                      	ldi TEMP,0x28								;0x28_H
00010b e218                      	ldi r17,0x28
00010c 9300 00bb                 	sts TWDR, TEMP								
00010e e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
00010f 9300 00bc                 	sts TWCR, TEMP								
000111 d054                      	RCALL WaitDataI2c
                                 
000112 d08f                      	RCALL DisplayEnable
                                 
000113 e808                      	ldi TEMP,0x88								;0x28_L
000114 e818                      	ldi r17,0x88
000115 9300 00bb                 	sts TWDR, r16								
000117 e804                      	ldi TEMP, (1<<TWINT) |(1<<TWEN)
000118 9300 00bc                 	sts TWCR, TEMP								
00011a d04b                      	RCALL WaitDataI2c
                                 
00011b d086                      	RCALL DisplayEnable
                                 
00011c e008                      	ldi TEMP, 0x08								;0x08_H
00011d e018                      	ldi r17,0x08
00011e 9300 00bb                 	sts TWDR, TEMP								
000120 e804                      	ldi TEMP, (1<<TWINT) |(1<<TWEN)
000121 9300 00bc                 	sts TWCR, TEMP								
000123 d042                      	RCALL WaitDataI2c
                                 
000124 d07d                      	RCALL DisplayEnable							
                                 
000125 e808                      	ldi TEMP,0x88								;0x08_L				
000126 e818                      	ldi r17,0x88
                                 	
000127 9300 00bb                 	sts TWDR, TEMP								
000129 e804                      	ldi TEMP, (1<<TWINT) |(1<<TWEN)
00012a 9300 00bc                 	sts TWCR, TEMP								
00012c d039                      	RCALL WaitDataI2c
                                 
00012d d074                      	RCALL DisplayEnable
                                 
00012e e008                      	ldi r16,0x08								;0x01_H	
00012f e018                      	ldi r17,0x08
000130 9300 00bb                 	sts TWDR, r16								
000132 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
000133 9300 00bc                 	sts TWCR, r16								
000135 d030                      	RCALL WaitDataI2c
                                 
000136 d06b                      	RCALL DisplayEnable
                                 
000137 e108                      	ldi r16,0x18								;0x01_L	
000138 e118                      	ldi r17,0x18
                                 		
000139 9300 00bb                 	sts TWDR, r16								
00013b e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
00013c 9300 00bc                 	sts TWCR, r16								
00013e d027                      	RCALL WaitDataI2c
                                 
00013f d062                      	RCALL DisplayEnable
                                 
000140 e008                      	ldi r16,0x08								;0x0F_H		
000141 e018                      	ldi r17,0x08
                                 
000142 9300 00bb                 	sts TWDR, r16								
000144 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
000145 9300 00bc                 	sts TWCR, r16								
000147 d01e                      	RCALL WaitDataI2c
                                 
000148 d059                      	RCALL DisplayEnable
                                 	
000149 ef08                      	ldi r16,0xF8								;0x0F_L	
00014a ef18                      	ldi r17,0xF8
00014b 9300 00bb                 	sts TWDR, r16								
00014d e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
00014e 9300 00bc                 	sts TWCR, r16								
000150 d015                      	RCALL WaitDataI2c
                                 
000151 d050                      	RCALL DisplayEnable
                                 
000152 e008                      	ldi r16,0x08							;0x06_H
000153 e018                      	ldi r17,0x08
000154 9300 00bb                 	sts TWDR, r16								
000156 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
000157 9300 00bc                 	sts TWCR, r16
000159 d00c                      	RCALL WaitDataI2c
                                 
00015a d047                      	RCALL DisplayEnable
                                 
00015b d0c1                      	RCALL retardo5ms
                                 	
00015c e608                      	ldi r16, 0x68							;0x06_L
00015d e618                      	ldi r17, 0x68
00015e 9300 00bb                 	sts TWDR, r16								
000160 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
000161 9300 00bc                 	sts TWCR, r16
000163 d002                      	RCALL WaitDataI2c
                                 
000164 d03d                      	RCALL DisplayEnable
                                 
000165 9508                      	ret
                                 
                                 ;-----------Fin Inicialización display--------------
                                 
                                 ;--DISPLAY : DATA I2C OK---;
                                 
                                 WaitDataI2c:
                                 
                                 wait_twint:
000166 9100 00bc                 	lds r16,TWCR
000168 ff07                      	sbrs r16,TWINT								; Espera TWINT para confirmar que se envió ok
000169 cffc                      	rjmp wait_twint
                                 
00016a 9100 00b9                 	lds r16,TWSR
00016c 7f08                      	andi r16, 0xF8
00016d 3208                      	cpi r16, MT_DATA_ACK
00016e f591                      	brne error_data
00016f 9508                      	ret
                                 
                                 ;------DISPLAY : CHAR------;                  Con esta Funcion le enviamos un CHAR al display
                                 DisplayChar:
                                 
000170 2f08                      	mov r16,DISPVAR							  ;En DISPVAR tiene que estar el CHAR
000171 7f00                      	andi r16,0xF0							  ;Envio DISPVAR_H
000172 6009                      	ori r16,0x09
000173 2f10                      	mov r17,r16
000174 9300 00bb                 	sts TWDR, r16								; Carga DATA en twdr, limpia twint para empezar la transmision
000176 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
000177 9300 00bc                 	sts TWCR, r16
                                 
000179 dfec                      	RCALL WaitDataI2c
00017a d027                      	RCALL DisplayEnable
                                 
00017b 2f08                      	mov r16,DISPVAR							  ;Envio DISPVAR_L
00017c 0f00                      	lsl r16
00017d 0f00                      	lsl r16
00017e 0f00                      	lsl r16
00017f 0f00                      	lsl r16
000180 6009                      	ori r16,0x09
000181 2f10                      	mov r17,r16
000182 9300 00bb                 	sts TWDR, r16								
000184 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
000185 9300 00bc                 	sts TWCR, r16
000187 dfde                      	RCALL WaitDataI2c
                                 
000188 d019                      	RCALL DisplayEnable
                                 
000189 9508                      	ret
                                 
                                 ;------Display :ENTER----------
                                 
                                 DisplayEnter:
                                 
00018a ec08                      	ldi r16,0xC8								;0x08_H
00018b ec18                      	ldi r17,0xC8
00018c 9300 00bb                 	sts TWDR, r16								
00018e e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
00018f 9300 00bc                 	sts TWCR, r16								
000191 dfd4                      	RCALL WaitDataI2c
                                 
000192 d00f                      	RCALL DisplayEnable							
                                 
000193 e008                      	ldi r16,0x08								;0x08_L				
000194 e018                      	ldi r17,0x08
                                 	
000195 9300 00bb                 	sts TWDR, r16								
000197 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
000198 9300 00bc                 	sts TWCR, r16								
00019a dfcb                      	RCALL WaitDataI2c
                                 
00019b d006                      	RCALL DisplayEnable
00019c 9508                      ret
                                 
                                 
                                 
                                 ;----DISPLAY : STOP------
                                 
                                 I2CStop:
00019d e904                      	ldi r16, (1<<TWINT)|(1<<TWEN)| (1<<TWSTO)	;Transmite bit de STOP
00019e 9300 00bc                 	sts TWCR, r16
0001a0 9508                      			ret
                                 
                                 error_data:
0001a1 d011                      	RCALL ERROR1
                                 
                                 
                                 DisplayEnable:
0001a2 d065                      	RCALL retardo1ms
                                 	
0001a3 6014                      	ori r17, 0x04
0001a4 9310 00bb                 	sts TWDR, r17								
0001a6 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
0001a7 9300 00bc                 	sts TWCR, r16
0001a9 dfbc                      	RCALL WaitDataI2c
                                 ;	RCALL retardo1ms
                                 
0001aa 7f1b                      	andi r17, 0b11111011
0001ab 9310 00bb                 	sts TWDR, r17								
0001ad e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
0001ae 9300 00bc                 	sts TWCR, r16
0001b0 dfb5                      	RCALL WaitDataI2c
                                 
                                 	;RCALL retardo1ms
0001b1 9508                      	ret
                                 
                                 
                                 ;-----------Error----------------------------------
                                 
                                 ERROR:
                                 	
                                 	;ldi R16,0x02
                                 	;out PORTB,R16
0001b2 cfff                      	rjmp error
                                 
                                 ERROR1:
                                 	
                                 	;ldi R16,0x02
                                 	;out PORTB,R16
0001b3 e904                      	ldi r16, (1<<TWINT)|(1<<TWEN)| (1<<TWSTO)	;Transmite bit de STOP
0001b4 9300 00bc                 	sts TWCR, r16
0001b6 cffb                      	rjmp error
                                 
                                 ;------Display :CLEAR----------
                                 DisplayClear:
0001b7 e018                      	ldi r17, 0x08
0001b8 e008                      	ldi	r16, 0x08
0001b9 9300 00bb                 	sts TWDR, r16								; Carga DATA en twdr, limpia twint para empezar la transmision
0001bb e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
0001bc 9300 00bc                 	sts TWCR, r16
                                 
0001be dfa7                      	RCALL WaitDataI2c
0001bf dfe2                      	RCALL DisplayEnable
                                 
0001c0 e118                      	ldi r17, 0x18
0001c1 e108                      	ldi r16, 0x18
0001c2 9300 00bb                 	sts TWDR, r16								
0001c4 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
0001c5 9300 00bc                 	sts TWCR, r16
0001c7 df9e                      	RCALL WaitDataI2c
                                 
0001c8 dfd9                      	RCALL DisplayEnable
                                 
0001c9 9508                      	ret
                                 
                                 DisplayToggleShift:
0001ca e118                      	ldi r17, 0x18
0001cb e108                      	ldi	r16, 0x18
0001cc 9300 00bb                 	sts TWDR, r16								; Carga DATA en twdr, limpia twint para empezar la transmision
0001ce e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)
0001cf 9300 00bc                 	sts TWCR, r16
                                 
0001d1 df94                      	RCALL WaitDataI2c
0001d2 dfcf                      	RCALL DisplayEnable
                                 
0001d3 e818                      	ldi r17, 0x88
0001d4 e808                      	ldi r16, 0x88
0001d5 9300 00bb                 	sts TWDR, r16								
0001d7 e804                      	ldi r16, (1<<TWINT) |(1<<TWEN)				
0001d8 9300 00bc                 	sts TWCR, r16
0001da df8b                      	RCALL WaitDataI2c
                                 
0001db dfc6                      	RCALL DisplayEnable
                                 
0001dc 9508                      	ret
                                 
                                 Shift:
0001dd 959a                      		DEC			SHIFTREGISTER
0001de f411                      		BRNE		SkipShift0
0001df dfea                      		RCALL		DisplayToggleShift
0001e0 ea90                      		LDI			SHIFTREGISTER,SHIFTDELAY		
                                 SkipShift0:
0001e1 d026                      		RCALL		retardo1ms
                                 
0001e2 9508                      		ret
                                 
                                 DisplayString:
0001e3 93ff                      	PUSH ZH
0001e4 93ef                      	PUSH ZL
0001e5 e040                      	LDI CONTADOR,0x00
                                 
                                 DisplayString_cont:
0001e6 9543                      	INC CONTADOR	
0001e7 9185                      	LPM DISPVAR, Z+
0001e8 3080                      	CPI DISPVAR,0x00
0001e9 f7e1                      	BRNE DisplayString_cont
0001ea 9543                      	INC CONTADOR
0001eb 9185                      	LPM DISPVAR, Z+
0001ec 3080                      	CPI DISPVAR,0x00
0001ed f7c1                      	BRNE DisplayString_cont
0001ee 954a                      	DEC CONTADOR
0001ef 954a                      	DEC CONTADOR
0001f0 91ef                      	POP ZL
0001f1 91ff                      	POP ZH
                                 
                                 DisplayString_next:
0001f2 9185                      	lpm DISPVAR, Z+
0001f3 3080                      	CPI DISPVAR,0x00
0001f4 f419                      	BRNE DisplayString_nextChar
0001f5 df94                      	RCALL DisplayEnter
0001f6 954a                      	DEC CONTADOR
0001f7 cffa                      	RJMP DisplayString_next
                                 DisplayString_nextChar:
0001f8 df77                      	RCALL DisplayChar
                                 
0001f9 954a                      	dec  CONTADOR
0001fa f7b9                      	brne DisplayString_next
                                 	
0001fb 9508                      	ret
                                 
                                 
                                 
                                 DispNum:
                                 	
                                 
0001fc e300                      	ldi TEMP, 48
0001fd 0f30                      	add KEY,TEMP
                                 	
                                 	
                                 DispNum_cont:
0001fe 2f80                      	mov DISPVAR,TEMP
0001ff df70                      	RCALL DisplayChar
                                 	
                                  .include "delay.asm"
000200 9508                      
                                  * delay.asm
                                  *
                                  *  Created: 05-Nov-16 5:35:06 PM
                                  *   Author: galca
                                  */ 
                                  retardo10us:
000201 930f                      	push TEMP
000202 e30a                      	ldi TEMP,58
                                 loop_ret_10:
000203 950a                      	dec TEMP
000204 0000                      	NOP
000205 f7e9                      	brne loop_ret_10
000206 910f                      	pop TEMP
000207 9508                      	ret
                                 
                                 retardo1ms:
000208 930f                      	push TEMP
000209 e604                      	ldi TEMP,100
                                 loop_ret_1m:
00020a dff6                      	RCALL retardo10us
00020b 950a                      	dec TEMP	
00020c f7e9                      	brne loop_ret_1m
00020d 910f                      	pop TEMP
00020e 9508                      	ret
                                 
                                 retardo50ms:
00020f 930f                      	push TEMP
000210 e302                      	ldi TEMP,50
                                 loop_ret_50m:
000211 dff6                      	RCALL retardo1ms
000212 950a                      	dec TEMP
000213 f7e9                      	brne loop_ret_50m
000214 910f                      	pop TEMP
000215 9508                      	ret
                                 
                                 retardo500ms:
000216 930f                      	push TEMP
000217 e00a                      	ldi TEMP,10
                                 loop_ret_500m:
000218 dff6                      	RCALL retardo50ms
000219 950a                      	dec TEMP
00021a f7e9                      	brne loop_ret_500m
00021b 910f                      	pop TEMP
00021c 9508                      	ret
                                 
                                 retardo5ms:
00021d e005                      	ldi TEMP,5
                                 loop_ret_5m:
00021e dfe9                      	RCALL retardo1ms
00021f 950a                      	dec TEMP
000220 f7e9                      	brne loop_ret_5m
000221 9508                      	ret
                                 
                                 retardo3s:
                                 
000222 e30c                      	ldi TEMP, 60
                                 loop_ret_3s:
000223 dfeb                      	RCALL retardo50ms
000224 950a                      	dec TEMP
000225 f7e9                      	brne loop_ret_3s
000226 9508                      	ret
                                 
                                 retardo1s:
                                 
000227 e104                      	ldi TEMP, 20
                                 loop_ret_1s:
000228 dfe6                      	RCALL retardo50ms
000229 950a                      	dec TEMP
00022a f7e9                      	brne loop_ret_1s
                                  .include "interface.asm"
00022b 9508                      
                                  * interface.asm
                                  *
                                  *  Created: 05-Nov-16 7:59:54 PM
                                  *   Author: galca
                                  */ 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                  ;....................Display welcome............................
                                 DisplayWelcome:
                                 	
00022c e0f4                      	LDi ZH, High(2*T_Welcome)
00022d eae8                      	LDI ZL, LOW(2*T_Welcome)
                                 	
00022e dfb4                      	RCALL DisplayString
00022f df5a                      	RCALL DisplayEnter
                                 	
000230 e0f4                      	LDI ZH, High(2*T_Cocktail)
000231 ebe6                      	LDI ZL, LOW(2*T_Cocktail)
                                 	
000232 dfb0                      	RCALL DisplayString
                                 		
000233 9508                      	ret
                                 
                                 DisplayMenu0:
                                 	
000234 e0f4                      	LDi ZH, High(2*T_Mode_Select)
000235 ece6                      	LDI ZL, LOW(2*T_Mode_Select)
                                 	
000236 dfac                      	RCALL DisplayString
                                 	
                                 		
000237 9508                      	ret
                                 
                                 DisplayMenu1a:
                                 	
000238 e0f4                      	LDi ZH, High(2*T_Pred_Select)
000239 efea                      	LDI ZL, LOW(2*T_Pred_Select)
                                 	
00023a dfa8                      	RCALL DisplayString
                                 	
                                 		
00023b 9508                      	ret
                                 
                                 DisplayMenu2a:
                                 	
00023c e0f5                      	LDi ZH, High(2*T_Pot_Select)
00023d e2ee                      	LDI ZL, LOW(2*T_Pot_Select)
                                 	
00023e dfa4                      	RCALL DisplayString
                                 	
                                 		
00023f 9508                      	ret
                                 
                                 DisplayMenu1b:
                                 	
000240 e0f5                      	LDi ZH, High(2*T_Bebida1_Select)
000241 e6e2                      	LDI ZL, LOW(2*T_Bebida1_Select)
                                 	
000242 dfa0                      	RCALL DisplayString
                                 	
                                 		
000243 9508                      	ret
                                 
                                 DisplayMenu2b:
                                 	
000244 e0f5                      	LDi ZH, High(2*T_Porc_Select)
000245 ede0                      	LDI ZL, LOW(2*T_Porc_Select)
                                 	
000246 df9c                      	RCALL DisplayString
                                 	
                                 		
000247 9508                      	ret
                                 
                                 DisplayMenu3b:
                                 	
000248 e0f5                      	LDi ZH, High(2*T_Bebida2_Select)
000249 e9e8                      	LDI ZL, LOW(2*T_Bebida2_Select)
                                 	
00024a df98                      	RCALL DisplayString
00024b 9508                      	ret
                                 
                                 DisplayWait:
                                 	
00024c e0f5                      	LDi ZH, High(2*T_Espere)
00024d eeea                      	LDI ZL, LOW(2*T_Espere)
                                 
00024e df94                      	RCALL DisplayString
00024f 9508                      	ret
                                 
                                 DisplayDone:
                                 	
000250 e0f6                      	LDi ZH, High(2*T_Listo)
000251 e0e0                      	LDI ZL, LOW(2*T_Listo)
                                 
000252 df90                      	RCALL DisplayString
000253 9508                      	ret
                                 
                                  ;....................TABLAS (display)...........................
                                 
                                 T_Welcome:
000254 4942
000255 4e45
000256 4556
000257 494e
000258 4f44
000259 2153
00025a 0000                      	.Db 'B','I','E','N','V','E','N','I','D','O','S','!',0,0
                                 
                                 T_COCKTail:
00025b 2a2a
00025c 432a
00025d 434f
00025e 2d4b
00025f 4154
000260 4c49
000261 2a2a
000262 0000                      	.DB '*','*','*','C','O','C','K','-','T','A','I','L','*','*',0,0
                                 	
                                 T_Mode_Select:
000263 6553
000264 656c
000265 6363
000266 6f69
000267 656e
000268 6d20
000269 646f
00026a 206f
00026b 6564
00026c 6f20
00026d 6570
00026e 6172
00026f 6963
000270 6e6f
000271 003a
000272 2d31
000273 6142
000274 6973
000275 6f63
000276 3220
000277 412d
000278 6176
000279 7a6e
00027a 6461
00027b 006f
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm(113): warning: .cseg .db misalignment - padding zero byte
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(239): 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm' included form here
00027c 0000                      	.DB		"Seleccione modo de operacion:",0,"1-Basico 2-Avanzado",0,0 
                                 
                                 T_Pred_Select:
00027d 6553
00027e 656c
00027f 6363
000280 6f69
000281 656e
000282 6220
000283 6265
000284 6469
000285 3a61
000286 3100
000287 462d
000288 7265
000289 656e
00028a 2074
00028b 2d32
00028c 6857
00028d 7369
00028e 6f63
00028f 616c
000290 3320
000291 432d
000292 636f
000293 2d61
000294 6f43
000295 616c
000296 0000                      	.DB		"Seleccione bebida:",0,"1-Fernet 2-Whiscola 3-Coca-Cola",0,0
                                 
                                 T_Pot_Select:
000297 6553
000298 656c
000299 6363
00029a 6f69
00029b 656e
00029c 7020
00029d 746f
00029e 6e65
00029f 6963
0002a0 3a61
0002a1 3100
0002a2 432d
0002a3 726f
0002a4 6f64
0002a5 6562
0002a6 2073
0002a7 2d32
0002a8 654d
0002a9 6964
0002aa 2061
0002ab 2d33
0002ac 6e49
0002ad 6166
0002ae 746e
0002af 6c69
0002b0 0000                      	.DB		"Seleccione potencia:",0,"1-Cordobes 2-Media 3-Infantil",0,0
                                 
                                 T_Bebida1_Select:
0002b1 6553
0002b2 656c
0002b3 6363
0002b4 6f69
0002b5 656e
0002b6 7020
0002b7 6972
0002b8 656d
0002b9 6172
0002ba 6220
0002bb 6265
0002bc 6469
0002bd 3a61
0002be 3100
0002bf 462d
0002c0 7265
0002c1 656e
0002c2 2074
0002c3 2d32
0002c4 6857
0002c5 7369
0002c6 796b
0002c7 3320
0002c8 432d
0002c9 636f
0002ca 0061
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm(122): warning: .cseg .db misalignment - padding zero byte
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(239): 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm' included form here
0002cb 0000                      	.DB		"Seleccione primera bebida:",0,"1-Fernet 2-Whisky 3-Coca",0,0
                                 
                                 T_Bebida2_Select:
0002cc 6553
0002cd 656c
0002ce 6363
0002cf 6f69
0002d0 656e
0002d1 7320
0002d2 6765
0002d3 6e75
0002d4 6164
0002d5 6220
0002d6 6265
0002d7 6469
0002d8 3a61
0002d9 2000
0002da 2d31
0002db 6546
0002dc 6e72
0002dd 7465
0002de 3220
0002df 572d
0002e0 6968
0002e1 6b73
0002e2 2079
0002e3 2d33
0002e4 6f43
0002e5 6163
0002e6 0020
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm(125): warning: .cseg .db misalignment - padding zero byte
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(239): 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm' included form here
0002e7 0000                      	.DB		"Seleccione segunda bebida:",0," 1-Fernet 2-Whisky 3-Coca ",0,0
                                 
                                 T_Porc_Select:
0002e8 6e49
0002e9 7274
0002ea 646f
0002eb 7a75
0002ec 6163
0002ed 7000
0002ee 726f
0002ef 6563
0002f0 746e
0002f1 6a61
0002f2 3a65
0002f3 0020
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm(128): warning: .cseg .db misalignment - padding zero byte
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(239): 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\interface.asm' included form here
0002f4 0000                      	.DB		"Introduzca",0,"porcentaje: ",0,0
                                 
                                 T_Espere:
0002f5 7345
0002f6 6570
0002f7 6572
0002f8 0020
0002f9 6f70
0002fa 2072
0002fb 6166
0002fc 6f76
0002fd 2e72
0002fe 2e2e
0002ff 0000                      	.DB		"Espere ",0,"por favor...",0,0
                                 
                                 T_Listo:
000300 694c
000301 7473
000302 216f
000303 5220
000304 7465
000305 7269
000306 2065
000307 7573
000308 6200
000309 6265
00030a 6469
00030b 2061
00030c 6f70
00030d 2072
00030e 6166
00030f 6f76                       .include "math.asm"
000310 0072
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\math.asm(1): warning: .cseg .db misalignment - padding zero byte
D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\main.asm(240): 'D:\Documents\FIUBA\Electrónica\Laboratorio de Microprocesadores\mas-cocktail\mas-cocktail\math.asm' included form here
000311 0000                      
                                  * math.asm
                                  *
                                  *  Created: 18-Nov-16 11:18:15 AM
                                  *   Author: galca
                                  */ 
                                 
                                  .DEF	DENOMINATOR = R2
                                  .DEF	QUOTIENT = R3
                                  .DEF	NUM = R5
                                 
                                 keyb_to_bcd:
000312 91ff                      		POP			ZH
000313 91ef                      		POP			ZL
000314 910f                      		POP			TEMP
000315 700f                      		ANDI		TEMP,0x0F
000316 9502                      		SWAP		TEMP
                                 
000317 2e40                      		MOV			TEMP2,TEMP
000318 910f                      		POP			TEMP
000319 700f                      		ANDI		TEMP,0x0F
00031a 2904                      		OR			TEMP,TEMP2
00031b 930f                      		PUSH		TEMP
00031c 93ef                      		PUSH		ZL
00031d 93ff                      		PUSH		ZH
                                 
00031e 9508                      		RET
                                 
                                 bcd_to_ascii:
00031f 91ff                      		POP			ZH
000320 91ef                      		POP			ZL
000321 910f                      		POP			TEMP
000322 930f                      		PUSH		TEMP
000323 700f                      		ANDI		TEMP,0x0F
000324 6300                      		ORI			TEMP,0x30
                                 
000325 2e40                      		MOV			TEMP2,TEMP
000326 910f                      		POP			TEMP
000327 924f                      		PUSH		TEMP2
000328 9502                      		SWAP		TEMP
000329 700f                      		ANDI		TEMP,0x0F
00032a 6300                      		ORI			TEMP,0x30
00032b 930f                      		PUSH		TEMP
                                 
00032c 93ef                      		PUSH		ZL
00032d 93ff                      		PUSH		ZH
00032e 9508                      		RET
                                 
                                 bin_to_ascii:
00032f 91ff                      		POP			ZH
000330 91ef                      		POP			ZL
000331 905f                      		POP			NUM
000332 e00a                      		LDI			TEMP,10
000333 2e20                      		MOV			DENOMINATOR,TEMP
000334 d011                      		RCALL		DIVIDE
000335 2d05                      		MOV			TEMP,NUM
000336 6300                      		ORI			TEMP,0x30
000337 2e50                      		MOV			NUM,TEMP
000338 925f                      		PUSH		NUM
000339 2c53                      		MOV			NUM,QUOTIENT
00033a d00b                      		RCALL		DIVIDE
00033b 2d05                      		MOV			TEMP,NUM
00033c 6300                      		ORI			TEMP,0x30
00033d 2e50                      		MOV			NUM,TEMP
00033e 925f                      		PUSH		NUM
00033f 2d03                      		MOV			TEMP,QUOTIENT
000340 6300                      		ORI			TEMP,0x30
000341 2e30                      		MOV			QUOTIENT,TEMP
000342 923f                      		PUSH		QUOTIENT
000343 93ef                      		PUSH		ZL
000344 93ff                      		PUSH		ZH
000345 9508                      		RET
                                 
                                 DIVIDE:
000346 e000                      		LDI			TEMP,0
000347 2e30                      		MOV			QUOTIENT,TEMP
                                 DIVLOOP:
000348 9433                      		INC			QUOTIENT
000349 1852                      		SUB			NUM,DENOMINATOR
00034a f7e8                      		BRCC		DIVLOOP
00034b 943a                      		DEC			QUOTIENT
00034c 0c52                      		ADD			NUM,DENOMINATOR
00034d 9508                      


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :   0 z  :   3 r0 :   0 r1 :   0 r2 :   3 r3 :   7 r4 :   8 
r5 :  10 r6 :   1 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 202 r17:  40 r18:   8 r19:  26 r20:   7 
r21:   3 r22:   0 r23:   0 r24:  13 r25:   3 r26:   0 r27:   0 r28:   0 
r29:   0 r30:  20 r31:  20 
Registers used: 16 out of 35 (45.7%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   3 adiw  :   0 and   :   0 
andi  :  10 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   1 brcs  :   0 break :   0 breq  :   8 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  16 brpl  :   0 brsh  :   4 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   0 cbr   :   2 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   1 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :  18 cpse  :   0 dec   :  14 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :   6 jmp   :   0 
ld    :   0 ldd   :   0 ldi   : 118 lds   :   9 lpm   :   3 lsl   :   4 
lsr   :   0 mov   :  20 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   1 or    :   1 ori   :   9 out   :   8 pop   :  25 
push  :  25 rcall : 147 ret   :  44 reti  :   0 rjmp  :  22 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   0 sbic  :   3 sbis  :   0 
sbiw  :   0 sbr   :   3 sbrc  :   4 sbrs  :   5 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :  55 
sub   :   1 subi  :   0 swap  :   2 tst   :   0 wdr   :   0 
Instructions used: 32 out of 113 (28.3%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00069c   1312    380   1692   32768   5.2%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 5 warnings
